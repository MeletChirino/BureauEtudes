
SHT31_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080040e0  080040e0  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004160  08004160  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004168  08004168  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  080041e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080041e0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c54  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017b2  00000000  00000000  00028ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  0002a4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000838  00000000  00000000  0002ad88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000190d  00000000  00000000  0002b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b62  00000000  00000000  0002cecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008453c  00000000  00000000  00034a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b8f6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002898  00000000  00000000  000b8fe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	080040c8 	.word	0x080040c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	080040c8 	.word	0x080040c8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_f2uiz>:
 80009cc:	0042      	lsls	r2, r0, #1
 80009ce:	d20e      	bcs.n	80009ee <__aeabi_f2uiz+0x22>
 80009d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009d4:	d30b      	bcc.n	80009ee <__aeabi_f2uiz+0x22>
 80009d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009de:	d409      	bmi.n	80009f4 <__aeabi_f2uiz+0x28>
 80009e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e8:	fa23 f002 	lsr.w	r0, r3, r2
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr
 80009f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009f8:	d101      	bne.n	80009fe <__aeabi_f2uiz+0x32>
 80009fa:	0242      	lsls	r2, r0, #9
 80009fc:	d102      	bne.n	8000a04 <__aeabi_f2uiz+0x38>
 80009fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	468c      	mov	ip, r1
 8000a42:	4604      	mov	r4, r0
 8000a44:	9e08      	ldr	r6, [sp, #32]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14b      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4615      	mov	r5, r2
 8000a4e:	d967      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b14a      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a56:	f1c2 0720 	rsb	r7, r2, #32
 8000a5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a62:	4095      	lsls	r5, r2
 8000a64:	ea47 0c03 	orr.w	ip, r7, r3
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a6e:	fbbc f7fe 	udiv	r7, ip, lr
 8000a72:	fa1f f885 	uxth.w	r8, r5
 8000a76:	fb0e c317 	mls	r3, lr, r7, ip
 8000a7a:	fb07 f908 	mul.w	r9, r7, r8
 8000a7e:	0c21      	lsrs	r1, r4, #16
 8000a80:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a84:	4599      	cmp	r9, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18eb      	adds	r3, r5, r3
 8000a8a:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000a8e:	f080 811c 	bcs.w	8000cca <__udivmoddi4+0x28e>
 8000a92:	4599      	cmp	r9, r3
 8000a94:	f240 8119 	bls.w	8000cca <__udivmoddi4+0x28e>
 8000a98:	3f02      	subs	r7, #2
 8000a9a:	442b      	add	r3, r5
 8000a9c:	eba3 0309 	sub.w	r3, r3, r9
 8000aa0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa8:	fb00 f108 	mul.w	r1, r0, r8
 8000aac:	b2a4      	uxth	r4, r4
 8000aae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	d909      	bls.n	8000aca <__udivmoddi4+0x8e>
 8000ab6:	192c      	adds	r4, r5, r4
 8000ab8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000abc:	f080 8107 	bcs.w	8000cce <__udivmoddi4+0x292>
 8000ac0:	42a1      	cmp	r1, r4
 8000ac2:	f240 8104 	bls.w	8000cce <__udivmoddi4+0x292>
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	442c      	add	r4, r5
 8000aca:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ace:	2700      	movs	r7, #0
 8000ad0:	1a64      	subs	r4, r4, r1
 8000ad2:	b11e      	cbz	r6, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	40d4      	lsrs	r4, r2
 8000ad8:	e9c6 4300 	strd	r4, r3, [r6]
 8000adc:	4639      	mov	r1, r7
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d909      	bls.n	8000afa <__udivmoddi4+0xbe>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80ec 	beq.w	8000cc4 <__udivmoddi4+0x288>
 8000aec:	2700      	movs	r7, #0
 8000aee:	e9c6 0100 	strd	r0, r1, [r6]
 8000af2:	4638      	mov	r0, r7
 8000af4:	4639      	mov	r1, r7
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	fab3 f783 	clz	r7, r3
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d148      	bne.n	8000b94 <__udivmoddi4+0x158>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d302      	bcc.n	8000b0c <__udivmoddi4+0xd0>
 8000b06:	4282      	cmp	r2, r0
 8000b08:	f200 80fb 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b0c:	1a84      	subs	r4, r0, r2
 8000b0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	469c      	mov	ip, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d0e0      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b1a:	e9c6 4c00 	strd	r4, ip, [r6]
 8000b1e:	e7dd      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b20:	b902      	cbnz	r2, 8000b24 <__udivmoddi4+0xe8>
 8000b22:	deff      	udf	#255	; 0xff
 8000b24:	fab2 f282 	clz	r2, r2
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	f040 808f 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2e:	2701      	movs	r7, #1
 8000b30:	1b49      	subs	r1, r1, r5
 8000b32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000b36:	fa1f f985 	uxth.w	r9, r5
 8000b3a:	fbb1 fef8 	udiv	lr, r1, r8
 8000b3e:	fb08 111e 	mls	r1, r8, lr, r1
 8000b42:	fb09 f00e 	mul.w	r0, r9, lr
 8000b46:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000b4a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000b4e:	4298      	cmp	r0, r3
 8000b50:	d907      	bls.n	8000b62 <__udivmoddi4+0x126>
 8000b52:	18eb      	adds	r3, r5, r3
 8000b54:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000b58:	d202      	bcs.n	8000b60 <__udivmoddi4+0x124>
 8000b5a:	4298      	cmp	r0, r3
 8000b5c:	f200 80cd 	bhi.w	8000cfa <__udivmoddi4+0x2be>
 8000b60:	468e      	mov	lr, r1
 8000b62:	1a1b      	subs	r3, r3, r0
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	fb09 f900 	mul.w	r9, r9, r0
 8000b70:	b2a4      	uxth	r4, r4
 8000b72:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b76:	45a1      	cmp	r9, r4
 8000b78:	d907      	bls.n	8000b8a <__udivmoddi4+0x14e>
 8000b7a:	192c      	adds	r4, r5, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x14c>
 8000b82:	45a1      	cmp	r9, r4
 8000b84:	f200 80b6 	bhi.w	8000cf4 <__udivmoddi4+0x2b8>
 8000b88:	4618      	mov	r0, r3
 8000b8a:	eba4 0409 	sub.w	r4, r4, r9
 8000b8e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000b92:	e79e      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b94:	f1c7 0520 	rsb	r5, r7, #32
 8000b98:	40bb      	lsls	r3, r7
 8000b9a:	fa22 fc05 	lsr.w	ip, r2, r5
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa21 f405 	lsr.w	r4, r1, r5
 8000ba6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000baa:	fbb4 f9fe 	udiv	r9, r4, lr
 8000bae:	fa1f f88c 	uxth.w	r8, ip
 8000bb2:	fb0e 4419 	mls	r4, lr, r9, r4
 8000bb6:	fa20 f305 	lsr.w	r3, r0, r5
 8000bba:	40b9      	lsls	r1, r7
 8000bbc:	fb09 fa08 	mul.w	sl, r9, r8
 8000bc0:	4319      	orrs	r1, r3
 8000bc2:	0c0b      	lsrs	r3, r1, #16
 8000bc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc8:	45a2      	cmp	sl, r4
 8000bca:	fa02 f207 	lsl.w	r2, r2, r7
 8000bce:	fa00 f307 	lsl.w	r3, r0, r7
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be0:	45a2      	cmp	sl, r4
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bea:	4464      	add	r4, ip
 8000bec:	eba4 040a 	sub.w	r4, r4, sl
 8000bf0:	fbb4 f0fe 	udiv	r0, r4, lr
 8000bf4:	fb0e 4410 	mls	r4, lr, r0, r4
 8000bf8:	fb00 fa08 	mul.w	sl, r0, r8
 8000bfc:	b289      	uxth	r1, r1
 8000bfe:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000c02:	45a2      	cmp	sl, r4
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x1dc>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c0e:	d26b      	bcs.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c10:	45a2      	cmp	sl, r4
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c14:	3802      	subs	r0, #2
 8000c16:	4464      	add	r4, ip
 8000c18:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c1c:	fba0 8902 	umull	r8, r9, r0, r2
 8000c20:	eba4 040a 	sub.w	r4, r4, sl
 8000c24:	454c      	cmp	r4, r9
 8000c26:	4641      	mov	r1, r8
 8000c28:	46ce      	mov	lr, r9
 8000c2a:	d354      	bcc.n	8000cd6 <__udivmoddi4+0x29a>
 8000c2c:	d051      	beq.n	8000cd2 <__udivmoddi4+0x296>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d069      	beq.n	8000d06 <__udivmoddi4+0x2ca>
 8000c32:	1a5a      	subs	r2, r3, r1
 8000c34:	eb64 040e 	sbc.w	r4, r4, lr
 8000c38:	fa04 f505 	lsl.w	r5, r4, r5
 8000c3c:	fa22 f307 	lsr.w	r3, r2, r7
 8000c40:	40fc      	lsrs	r4, r7
 8000c42:	431d      	orrs	r5, r3
 8000c44:	e9c6 5400 	strd	r5, r4, [r6]
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e747      	b.n	8000adc <__udivmoddi4+0xa0>
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	fa21 f003 	lsr.w	r0, r1, r3
 8000c56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000c5a:	fbb0 f7f8 	udiv	r7, r0, r8
 8000c5e:	fa1f f985 	uxth.w	r9, r5
 8000c62:	fb08 0017 	mls	r0, r8, r7, r0
 8000c66:	fa24 f303 	lsr.w	r3, r4, r3
 8000c6a:	4091      	lsls	r1, r2
 8000c6c:	fb07 fc09 	mul.w	ip, r7, r9
 8000c70:	430b      	orrs	r3, r1
 8000c72:	0c19      	lsrs	r1, r3, #16
 8000c74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c78:	458c      	cmp	ip, r1
 8000c7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x254>
 8000c80:	1869      	adds	r1, r5, r1
 8000c82:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c86:	d231      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000c88:	458c      	cmp	ip, r1
 8000c8a:	d92f      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000c8c:	3f02      	subs	r7, #2
 8000c8e:	4429      	add	r1, r5
 8000c90:	eba1 010c 	sub.w	r1, r1, ip
 8000c94:	fbb1 f0f8 	udiv	r0, r1, r8
 8000c98:	fb08 1c10 	mls	ip, r8, r0, r1
 8000c9c:	fb00 fe09 	mul.w	lr, r0, r9
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x27e>
 8000caa:	1869      	adds	r1, r5, r1
 8000cac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb0:	d218      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb2:	458e      	cmp	lr, r1
 8000cb4:	d916      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	4429      	add	r1, r5
 8000cba:	eba1 010e 	sub.w	r1, r1, lr
 8000cbe:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cc2:	e73a      	b.n	8000b3a <__udivmoddi4+0xfe>
 8000cc4:	4637      	mov	r7, r6
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	e708      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cca:	460f      	mov	r7, r1
 8000ccc:	e6e6      	b.n	8000a9c <__udivmoddi4+0x60>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	e6fb      	b.n	8000aca <__udivmoddi4+0x8e>
 8000cd2:	4543      	cmp	r3, r8
 8000cd4:	d2ab      	bcs.n	8000c2e <__udivmoddi4+0x1f2>
 8000cd6:	ebb8 0102 	subs.w	r1, r8, r2
 8000cda:	eb69 020c 	sbc.w	r2, r9, ip
 8000cde:	3801      	subs	r0, #1
 8000ce0:	4696      	mov	lr, r2
 8000ce2:	e7a4      	b.n	8000c2e <__udivmoddi4+0x1f2>
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	e7e8      	b.n	8000cba <__udivmoddi4+0x27e>
 8000ce8:	4608      	mov	r0, r1
 8000cea:	e795      	b.n	8000c18 <__udivmoddi4+0x1dc>
 8000cec:	4607      	mov	r7, r0
 8000cee:	e7cf      	b.n	8000c90 <__udivmoddi4+0x254>
 8000cf0:	4681      	mov	r9, r0
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	442c      	add	r4, r5
 8000cf8:	e747      	b.n	8000b8a <__udivmoddi4+0x14e>
 8000cfa:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cfe:	442b      	add	r3, r5
 8000d00:	e72f      	b.n	8000b62 <__udivmoddi4+0x126>
 8000d02:	4638      	mov	r0, r7
 8000d04:	e707      	b.n	8000b16 <__udivmoddi4+0xda>
 8000d06:	4637      	mov	r7, r6
 8000d08:	e6e8      	b.n	8000adc <__udivmoddi4+0xa0>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_I2C_MspInit+0x7c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d128      	bne.n	8000d84 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_I2C_MspInit+0x80>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <HAL_I2C_MspInit+0x80>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_I2C_MspInit+0x80>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d50:	2312      	movs	r3, #18
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	480b      	ldr	r0, [pc, #44]	; (8000d94 <HAL_I2C_MspInit+0x84>)
 8000d68:	f000 fc68 	bl	800163c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_I2C_MspInit+0x80>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_I2C_MspInit+0x80>)
 8000d72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d76:	6253      	str	r3, [r2, #36]	; 0x24
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_I2C_MspInit+0x80>)
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40005400 	.word	0x40005400
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020400 	.word	0x40020400

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b08f      	sub	sp, #60	; 0x3c
 8000d9c:	af02      	add	r7, sp, #8
		uint16_t ST, SRH;
		//values to store raw temperature and humidity
		static const uint8_t SHT31_ADDRS = 0x44 << 1,
				LCD_ADDRS = 0x7c,
				RGB_ADDRS = 0xc4;
		uint16_t SHT31_MEAS_HIGHREP = 0x062c;
 8000d9e:	f240 632c 	movw	r3, #1580	; 0x62c
 8000da2:	837b      	strh	r3, [r7, #26]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f000 fad5 	bl	8001352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f8be 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dac:	f000 f962 	bl	8001074 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000db0:	f000 f908 	bl	8000fc4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000db4:	f000 f934 	bl	8001020 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		ret = HAL_I2C_Master_Transmit(
 8000db8:	4b53      	ldr	r3, [pc, #332]	; (8000f08 <main+0x170>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b299      	uxth	r1, r3
 8000dbe:	f107 021a 	add.w	r2, r7, #26
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2302      	movs	r3, #2
 8000dca:	4850      	ldr	r0, [pc, #320]	; (8000f0c <main+0x174>)
 8000dcc:	f000 ff14 	bl	8001bf8 <HAL_I2C_Master_Transmit>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				SHT31_ADDRS,
				&SHT31_MEAS_HIGHREP,
				2,
				HAL_MAX_DELAY);

		if(ret != HAL_OK){
 8000dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d008      	beq.n	8000df0 <main+0x58>
			strcpy((char*)serial_text, "Error Tx\r\n");
 8000dde:	463b      	mov	r3, r7
 8000de0:	4a4b      	ldr	r2, [pc, #300]	; (8000f10 <main+0x178>)
 8000de2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000de4:	c303      	stmia	r3!, {r0, r1}
 8000de6:	801a      	strh	r2, [r3, #0]
 8000de8:	3302      	adds	r3, #2
 8000dea:	0c12      	lsrs	r2, r2, #16
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	e072      	b.n	8000ed6 <main+0x13e>
		} else {

			ret = HAL_I2C_Master_Receive(&hi2c1, SHT31_ADDRS, &buf, 2, HAL_MAX_DELAY);
 8000df0:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <main+0x170>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b299      	uxth	r1, r3
 8000df6:	f107 020c 	add.w	r2, r7, #12
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2302      	movs	r3, #2
 8000e02:	4842      	ldr	r0, [pc, #264]	; (8000f0c <main+0x174>)
 8000e04:	f000 fff6 	bl	8001df4 <HAL_I2C_Master_Receive>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if( ret != HAL_OK){
 8000e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <main+0x8c>
			strcpy((char*)buf, "Error Tx2\r\n");
 8000e16:	4a3f      	ldr	r2, [pc, #252]	; (8000f14 <main+0x17c>)
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e22:	e058      	b.n	8000ed6 <main+0x13e>
			} else {
				ST = buf[0];
 8000e24:	7b3b      	ldrb	r3, [r7, #12]
 8000e26:	85bb      	strh	r3, [r7, #44]	; 0x2c
				ST <<= 8;
 8000e28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	85bb      	strh	r3, [r7, #44]	; 0x2c
				ST |= buf[1];
 8000e2e:	7b7b      	ldrb	r3, [r7, #13]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e34:	4313      	orrs	r3, r2
 8000e36:	85bb      	strh	r3, [r7, #44]	; 0x2c
				double stemp = ST;
 8000e38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff faea 	bl	8000414 <__aeabi_ui2d>
 8000e40:	4603      	mov	r3, r0
 8000e42:	460c      	mov	r4, r1
 8000e44:	e9c7 3408 	strd	r3, r4, [r7, #32]
				stemp = ST;
 8000e48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fae2 	bl	8000414 <__aeabi_ui2d>
 8000e50:	4603      	mov	r3, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	e9c7 3408 	strd	r3, r4, [r7, #32]
				stemp *= 175;
 8000e58:	a327      	add	r3, pc, #156	; (adr r3, 8000ef8 <main+0x160>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e62:	f7ff fb51 	bl	8000508 <__aeabi_dmul>
 8000e66:	4603      	mov	r3, r0
 8000e68:	460c      	mov	r4, r1
 8000e6a:	e9c7 3408 	strd	r3, r4, [r7, #32]
				stemp /= 0xffff;
 8000e6e:	a324      	add	r3, pc, #144	; (adr r3, 8000f00 <main+0x168>)
 8000e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e78:	f7ff fc70 	bl	800075c <__aeabi_ddiv>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	460c      	mov	r4, r1
 8000e80:	e9c7 3408 	strd	r3, r4, [r7, #32]
				stemp = -45 + stemp;
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <main+0x180>)
 8000e8a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e8e:	f7ff f983 	bl	8000198 <__aeabi_dsub>
 8000e92:	4603      	mov	r3, r0
 8000e94:	460c      	mov	r4, r1
 8000e96:	e9c7 3408 	strd	r3, r4, [r7, #32]
				temp = stemp;
 8000e9a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e9e:	f7ff fd45 	bl	800092c <__aeabi_d2f>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	61fb      	str	r3, [r7, #28]
				sprintf((char*)serial_text,
 8000ea6:	69f8      	ldr	r0, [r7, #28]
 8000ea8:	f7ff fd90 	bl	80009cc <__aeabi_f2uiz>
 8000eac:	4604      	mov	r4, r0
				"%u.%0.2u C\n",
				((unsigned int) temp),
				(((unsigned int) temp  % 100)*100));
 8000eae:	69f8      	ldr	r0, [r7, #28]
 8000eb0:	f7ff fd8c 	bl	80009cc <__aeabi_f2uiz>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <main+0x184>)
 8000eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8000ebc:	095b      	lsrs	r3, r3, #5
 8000ebe:	2164      	movs	r1, #100	; 0x64
 8000ec0:	fb01 f303 	mul.w	r3, r1, r3
 8000ec4:	1ad3      	subs	r3, r2, r3
				sprintf((char*)serial_text,
 8000ec6:	2264      	movs	r2, #100	; 0x64
 8000ec8:	fb02 f303 	mul.w	r3, r2, r3
 8000ecc:	4638      	mov	r0, r7
 8000ece:	4622      	mov	r2, r4
 8000ed0:	4913      	ldr	r1, [pc, #76]	; (8000f20 <main+0x188>)
 8000ed2:	f002 fce7 	bl	80038a4 <siprintf>
			}
		}


		//strcpy((char*)serial_text, "hello!\r\n");
		HAL_UART_Transmit(&huart2, serial_text, strlen((char*)serial_text), HAL_MAX_DELAY);
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff f951 	bl	8000180 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4639      	mov	r1, r7
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee8:	480e      	ldr	r0, [pc, #56]	; (8000f24 <main+0x18c>)
 8000eea:	f002 fae2 	bl	80034b2 <HAL_UART_Transmit>
		HAL_Delay(500);
 8000eee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ef2:	f000 fa9d 	bl	8001430 <HAL_Delay>
  {
 8000ef6:	e75f      	b.n	8000db8 <main+0x20>
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	4065e000 	.word	0x4065e000
 8000f00:	00000000 	.word	0x00000000
 8000f04:	40efffe0 	.word	0x40efffe0
 8000f08:	08004104 	.word	0x08004104
 8000f0c:	20000098 	.word	0x20000098
 8000f10:	080040e0 	.word	0x080040e0
 8000f14:	080040ec 	.word	0x080040ec
 8000f18:	40468000 	.word	0x40468000
 8000f1c:	51eb851f 	.word	0x51eb851f
 8000f20:	080040f8 	.word	0x080040f8
 8000f24:	200000ec 	.word	0x200000ec

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b092      	sub	sp, #72	; 0x48
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2234      	movs	r2, #52	; 0x34
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 fcac 	bl	8003894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <SystemClock_Config+0x98>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f52:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <SystemClock_Config+0x98>)
 8000f54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f58:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f62:	2310      	movs	r3, #16
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	2302      	movs	r3, #2
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000f74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fc8a 	bl	8002898 <HAL_RCC_OscConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f8a:	f000 f8db 	bl	8001144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8e:	230f      	movs	r3, #15
 8000f90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f92:	2303      	movs	r3, #3
 8000f94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 ffa6 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fb2:	f000 f8c7 	bl	8001144 <Error_Handler>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3748      	adds	r7, #72	; 0x48
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fca:	4a13      	ldr	r2, [pc, #76]	; (8001018 <MX_I2C1_Init+0x54>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fd0:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_I2C1_Init+0x58>)
 8000fd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fe2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fe6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <MX_I2C1_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_I2C1_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_I2C1_Init+0x50>)
 8001002:	f000 fcc1 	bl	8001988 <HAL_I2C_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800100c:	f000 f89a 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000098 	.word	0x20000098
 8001018:	40005400 	.word	0x40005400
 800101c:	000186a0 	.word	0x000186a0

08001020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <MX_USART2_UART_Init+0x50>)
 8001028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001058:	f002 f9de 	bl	8003418 <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001062:	f000 f86f 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000ec 	.word	0x200000ec
 8001070:	40004400 	.word	0x40004400

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <MX_GPIO_Init+0xc0>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a29      	ldr	r2, [pc, #164]	; (8001134 <MX_GPIO_Init+0xc0>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <MX_GPIO_Init+0xc0>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	4b24      	ldr	r3, [pc, #144]	; (8001134 <MX_GPIO_Init+0xc0>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a23      	ldr	r2, [pc, #140]	; (8001134 <MX_GPIO_Init+0xc0>)
 80010a8:	f043 0320 	orr.w	r3, r3, #32
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_GPIO_Init+0xc0>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_GPIO_Init+0xc0>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <MX_GPIO_Init+0xc0>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_GPIO_Init+0xc0>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_GPIO_Init+0xc0>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <MX_GPIO_Init+0xc0>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_GPIO_Init+0xc0>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2120      	movs	r1, #32
 80010ee:	4812      	ldr	r0, [pc, #72]	; (8001138 <MX_GPIO_Init+0xc4>)
 80010f0:	f000 fc32 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_GPIO_Init+0xc8>)
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_GPIO_Init+0xcc>)
 800110a:	f000 fa97 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800110e:	2320      	movs	r3, #32
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_GPIO_Init+0xc4>)
 8001126:	f000 fa89 	bl	800163c <HAL_GPIO_Init>

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000
 800113c:	10110000 	.word	0x10110000
 8001140:	40020800 	.word	0x40020800

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114a:	e7fe      	b.n	800114a <Error_Handler+0x6>

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_MspInit+0x5c>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_MspInit+0x5c>)
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	6253      	str	r3, [r2, #36]	; 0x24
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_MspInit+0x5c>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_MspInit+0x5c>)
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_MspInit+0x5c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6213      	str	r3, [r2, #32]
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_MspInit+0x5c>)
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_MspInit+0x5c>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_MspInit+0x5c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	6253      	str	r3, [r2, #36]	; 0x24
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_MspInit+0x5c>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800119a:	2007      	movs	r0, #7
 800119c:	f000 fa1a 	bl	80015d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f2:	f000 f901 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f002 fb08 	bl	8003840 <__errno>
 8001230:	4602      	mov	r2, r0
 8001232:	230c      	movs	r3, #12
 8001234:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20014000 	.word	0x20014000
 800125c:	00000400 	.word	0x00000400
 8001260:	2000008c 	.word	0x2000008c
 8001264:	20000138 	.word	0x20000138

08001268 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <SystemInit+0x14>)
 800126e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001272:	609a      	str	r2, [r3, #8]
#endif
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_UART_MspInit+0x7c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d127      	bne.n	80012f2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	4a16      	ldr	r2, [pc, #88]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	6253      	str	r3, [r2, #36]	; 0x24
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012d2:	230c      	movs	r3, #12
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e2:	2307      	movs	r3, #7
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_UART_MspInit+0x84>)
 80012ee:	f000 f9a5 	bl	800163c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004400 	.word	0x40004400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001308:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800130a:	e003      	b.n	8001314 <LoopCopyDataInit>

0800130c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800130e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001310:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001312:	3104      	adds	r1, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001318:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800131a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800131c:	d3f6      	bcc.n	800130c <CopyDataInit>
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001320:	e002      	b.n	8001328 <LoopFillZerobss>

08001322 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001324:	f842 3b04 	str.w	r3, [r2], #4

08001328 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800132a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800132c:	d3f9      	bcc.n	8001322 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132e:	f7ff ff9b 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001332:	f002 fa8b 	bl	800384c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001336:	f7ff fd2f 	bl	8000d98 <main>
  bx lr
 800133a:	4770      	bx	lr
  ldr r3, =_sidata
 800133c:	08004170 	.word	0x08004170
  ldr r0, =_sdata
 8001340:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001344:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001348:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800134c:	20000134 	.word	0x20000134

08001350 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_IRQHandler>

08001352 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f939 	bl	80015d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f80e 	bl	8001384 <HAL_InitTick>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e001      	b.n	8001378 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001374:	f7ff feea 	bl	800114c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001378:	79fb      	ldrb	r3, [r7, #7]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_InitTick+0x68>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d022      	beq.n	80013de <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_InitTick+0x6c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_InitTick+0x68>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f938 	bl	8001622 <HAL_SYSTICK_Config>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10f      	bne.n	80013d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	d809      	bhi.n	80013d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013be:	2200      	movs	r2, #0
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c6:	f000 f910 	bl	80015ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_InitTick+0x70>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e007      	b.n	80013e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e004      	b.n	80013e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e001      	b.n	80013e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x1c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x20>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4413      	add	r3, r2
 8001406:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x1c>)
 8001408:	6013      	str	r3, [r2, #0]
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	2000012c 	.word	0x2000012c
 8001418:	20000008 	.word	0x20000008

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <HAL_GetTick+0x10>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	2000012c 	.word	0x2000012c

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff fff0 	bl	800141c <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001448:	d004      	beq.n	8001454 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_Delay+0x40>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001454:	bf00      	nop
 8001456:	f7ff ffe1 	bl	800141c <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	429a      	cmp	r2, r3
 8001464:	d8f7      	bhi.n	8001456 <HAL_Delay+0x26>
  {
  }
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a0:	d301      	bcc.n	80015a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00f      	b.n	80015c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <SysTick_Config+0x40>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ae:	210f      	movs	r1, #15
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015b4:	f7ff ff90 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <SysTick_Config+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <SysTick_Config+0x40>)
 80015c0:	2207      	movs	r2, #7
 80015c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	e000e010 	.word	0xe000e010

080015d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff49 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015fc:	f7ff ff5e 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	6978      	ldr	r0, [r7, #20]
 8001608:	f7ff ff90 	bl	800152c <NVIC_EncodePriority>
 800160c:	4602      	mov	r2, r0
 800160e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff5f 	bl	80014d8 <__NVIC_SetPriority>
}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffb0 	bl	8001590 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001652:	e160      	b.n	8001916 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8152 	beq.w	8001910 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d00b      	beq.n	800168c <HAL_GPIO_Init+0x50>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d007      	beq.n	800168c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001680:	2b11      	cmp	r3, #17
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b12      	cmp	r3, #18
 800168a:	d130      	bne.n	80016ee <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80016c2:	2201      	movs	r2, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 0201 	and.w	r2, r3, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0xf2>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b12      	cmp	r3, #18
 800172c:	d123      	bne.n	8001776 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	08da      	lsrs	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3208      	adds	r2, #8
 8001736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	6939      	ldr	r1, [r7, #16]
 8001772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0203 	and.w	r2, r3, #3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 80ac 	beq.w	8001910 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b8:	4b5d      	ldr	r3, [pc, #372]	; (8001930 <HAL_GPIO_Init+0x2f4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a5c      	ldr	r2, [pc, #368]	; (8001930 <HAL_GPIO_Init+0x2f4>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	4b5a      	ldr	r3, [pc, #360]	; (8001930 <HAL_GPIO_Init+0x2f4>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80017d0:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_GPIO_Init+0x2f8>)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	220f      	movs	r2, #15
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a50      	ldr	r2, [pc, #320]	; (8001938 <HAL_GPIO_Init+0x2fc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d025      	beq.n	8001848 <HAL_GPIO_Init+0x20c>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a4f      	ldr	r2, [pc, #316]	; (800193c <HAL_GPIO_Init+0x300>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d01f      	beq.n	8001844 <HAL_GPIO_Init+0x208>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a4e      	ldr	r2, [pc, #312]	; (8001940 <HAL_GPIO_Init+0x304>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d019      	beq.n	8001840 <HAL_GPIO_Init+0x204>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <HAL_GPIO_Init+0x308>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d013      	beq.n	800183c <HAL_GPIO_Init+0x200>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <HAL_GPIO_Init+0x30c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00d      	beq.n	8001838 <HAL_GPIO_Init+0x1fc>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a4b      	ldr	r2, [pc, #300]	; (800194c <HAL_GPIO_Init+0x310>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d007      	beq.n	8001834 <HAL_GPIO_Init+0x1f8>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a4a      	ldr	r2, [pc, #296]	; (8001950 <HAL_GPIO_Init+0x314>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_GPIO_Init+0x1f4>
 800182c:	2306      	movs	r3, #6
 800182e:	e00c      	b.n	800184a <HAL_GPIO_Init+0x20e>
 8001830:	2307      	movs	r3, #7
 8001832:	e00a      	b.n	800184a <HAL_GPIO_Init+0x20e>
 8001834:	2305      	movs	r3, #5
 8001836:	e008      	b.n	800184a <HAL_GPIO_Init+0x20e>
 8001838:	2304      	movs	r3, #4
 800183a:	e006      	b.n	800184a <HAL_GPIO_Init+0x20e>
 800183c:	2303      	movs	r3, #3
 800183e:	e004      	b.n	800184a <HAL_GPIO_Init+0x20e>
 8001840:	2302      	movs	r3, #2
 8001842:	e002      	b.n	800184a <HAL_GPIO_Init+0x20e>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_GPIO_Init+0x20e>
 8001848:	2300      	movs	r3, #0
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	f002 0203 	and.w	r2, r2, #3
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	4093      	lsls	r3, r2
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800185a:	4936      	ldr	r1, [pc, #216]	; (8001934 <HAL_GPIO_Init+0x2f8>)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001868:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <HAL_GPIO_Init+0x318>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800188c:	4a31      	ldr	r2, [pc, #196]	; (8001954 <HAL_GPIO_Init+0x318>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_GPIO_Init+0x318>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018b6:	4a27      	ldr	r2, [pc, #156]	; (8001954 <HAL_GPIO_Init+0x318>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_GPIO_Init+0x318>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018e0:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <HAL_GPIO_Init+0x318>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_GPIO_Init+0x318>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <HAL_GPIO_Init+0x318>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	f47f ae97 	bne.w	8001654 <HAL_GPIO_Init+0x18>
  }
}
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40023800 	.word	0x40023800
 8001934:	40010000 	.word	0x40010000
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40021400 	.word	0x40021400
 8001950:	40021800 	.word	0x40021800
 8001954:	40010400 	.word	0x40010400

08001958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001974:	e003      	b.n	800197e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001976:	887b      	ldrh	r3, [r7, #2]
 8001978:	041a      	lsls	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	619a      	str	r2, [r3, #24]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e11f      	b.n	8001bda <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff f9ae 	bl	8000d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2224      	movs	r2, #36	; 0x24
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019ec:	f001 fc8c 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 80019f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a7b      	ldr	r2, [pc, #492]	; (8001be4 <HAL_I2C_Init+0x25c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d807      	bhi.n	8001a0c <HAL_I2C_Init+0x84>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4a7a      	ldr	r2, [pc, #488]	; (8001be8 <HAL_I2C_Init+0x260>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	bf94      	ite	ls
 8001a04:	2301      	movls	r3, #1
 8001a06:	2300      	movhi	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	e006      	b.n	8001a1a <HAL_I2C_Init+0x92>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4a77      	ldr	r2, [pc, #476]	; (8001bec <HAL_I2C_Init+0x264>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	bf94      	ite	ls
 8001a14:	2301      	movls	r3, #1
 8001a16:	2300      	movhi	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0db      	b.n	8001bda <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4a72      	ldr	r2, [pc, #456]	; (8001bf0 <HAL_I2C_Init+0x268>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	0c9b      	lsrs	r3, r3, #18
 8001a2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a64      	ldr	r2, [pc, #400]	; (8001be4 <HAL_I2C_Init+0x25c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d802      	bhi.n	8001a5c <HAL_I2C_Init+0xd4>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	e009      	b.n	8001a70 <HAL_I2C_Init+0xe8>
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	4a63      	ldr	r2, [pc, #396]	; (8001bf4 <HAL_I2C_Init+0x26c>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	3301      	adds	r3, #1
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4956      	ldr	r1, [pc, #344]	; (8001be4 <HAL_I2C_Init+0x25c>)
 8001a8c:	428b      	cmp	r3, r1
 8001a8e:	d80d      	bhi.n	8001aac <HAL_I2C_Init+0x124>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1e59      	subs	r1, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	bf38      	it	cc
 8001aa8:	2304      	movcc	r3, #4
 8001aaa:	e04f      	b.n	8001b4c <HAL_I2C_Init+0x1c4>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d111      	bne.n	8001ad8 <HAL_I2C_Init+0x150>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1e58      	subs	r0, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	440b      	add	r3, r1
 8001ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	e012      	b.n	8001afe <HAL_I2C_Init+0x176>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1e58      	subs	r0, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	0099      	lsls	r1, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_I2C_Init+0x17e>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e022      	b.n	8001b4c <HAL_I2C_Init+0x1c4>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10e      	bne.n	8001b2c <HAL_I2C_Init+0x1a4>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1e58      	subs	r0, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6859      	ldr	r1, [r3, #4]
 8001b16:	460b      	mov	r3, r1
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	440b      	add	r3, r1
 8001b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2a:	e00f      	b.n	8001b4c <HAL_I2C_Init+0x1c4>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1e58      	subs	r0, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	0099      	lsls	r1, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	6809      	ldr	r1, [r1, #0]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69da      	ldr	r2, [r3, #28]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6911      	ldr	r1, [r2, #16]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68d2      	ldr	r2, [r2, #12]
 8001b86:	4311      	orrs	r1, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	000186a0 	.word	0x000186a0
 8001be8:	001e847f 	.word	0x001e847f
 8001bec:	003d08ff 	.word	0x003d08ff
 8001bf0:	431bde83 	.word	0x431bde83
 8001bf4:	10624dd3 	.word	0x10624dd3

08001bf8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	461a      	mov	r2, r3
 8001c04:	460b      	mov	r3, r1
 8001c06:	817b      	strh	r3, [r7, #10]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff fc06 	bl	800141c <HAL_GetTick>
 8001c10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	f040 80e0 	bne.w	8001de0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2319      	movs	r3, #25
 8001c26:	2201      	movs	r2, #1
 8001c28:	4970      	ldr	r1, [pc, #448]	; (8001dec <HAL_I2C_Master_Transmit+0x1f4>)
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 fc58 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
 8001c38:	e0d3      	b.n	8001de2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_I2C_Master_Transmit+0x50>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e0cc      	b.n	8001de2 <HAL_I2C_Master_Transmit+0x1ea>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d007      	beq.n	8001c6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2221      	movs	r2, #33	; 0x21
 8001c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2210      	movs	r2, #16
 8001c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	893a      	ldrh	r2, [r7, #8]
 8001c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4a50      	ldr	r2, [pc, #320]	; (8001df0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cb0:	8979      	ldrh	r1, [r7, #10]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	6a3a      	ldr	r2, [r7, #32]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 fac2 	bl	8002240 <I2C_MasterRequestWrite>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e08d      	b.n	8001de2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cdc:	e066      	b.n	8001dac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	6a39      	ldr	r1, [r7, #32]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fcd2 	bl	800268c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00d      	beq.n	8001d0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d107      	bne.n	8001d06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06b      	b.n	8001de2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d11b      	bne.n	8001d80 <HAL_I2C_Master_Transmit+0x188>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d017      	beq.n	8001d80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	6a39      	ldr	r1, [r7, #32]
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 fcc2 	bl	800270e <I2C_WaitOnBTFFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00d      	beq.n	8001dac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d107      	bne.n	8001da8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e01a      	b.n	8001de2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d194      	bne.n	8001cde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e000      	b.n	8001de2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	00100002 	.word	0x00100002
 8001df0:	ffff0000 	.word	0xffff0000

08001df4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	; 0x30
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	460b      	mov	r3, r1
 8001e02:	817b      	strh	r3, [r7, #10]
 8001e04:	4613      	mov	r3, r2
 8001e06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff fb08 	bl	800141c <HAL_GetTick>
 8001e0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	f040 820b 	bne.w	8002232 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2319      	movs	r3, #25
 8001e22:	2201      	movs	r2, #1
 8001e24:	497c      	ldr	r1, [pc, #496]	; (8002018 <HAL_I2C_Master_Receive+0x224>)
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 fb5a 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
 8001e34:	e1fe      	b.n	8002234 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_I2C_Master_Receive+0x50>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e1f7      	b.n	8002234 <HAL_I2C_Master_Receive+0x440>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d007      	beq.n	8001e6a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2222      	movs	r2, #34	; 0x22
 8001e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2210      	movs	r2, #16
 8001e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	893a      	ldrh	r2, [r7, #8]
 8001e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4a5c      	ldr	r2, [pc, #368]	; (800201c <HAL_I2C_Master_Receive+0x228>)
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001eac:	8979      	ldrh	r1, [r7, #10]
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 fa46 	bl	8002344 <I2C_MasterRequestRead>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e1b8      	b.n	8002234 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d113      	bne.n	8001ef2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	623b      	str	r3, [r7, #32]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	623b      	str	r3, [r7, #32]
 8001ede:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e18c      	b.n	800220c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d11b      	bne.n	8001f32 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e16c      	b.n	800220c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d11b      	bne.n	8001f72 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	e14c      	b.n	800220c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f98:	e138      	b.n	800220c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	f200 80f1 	bhi.w	8002186 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d123      	bne.n	8001ff4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 fbed 	bl	8002790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e139      	b.n	8002234 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ff2:	e10b      	b.n	800220c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d14e      	bne.n	800209a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002002:	2200      	movs	r2, #0
 8002004:	4906      	ldr	r1, [pc, #24]	; (8002020 <HAL_I2C_Master_Receive+0x22c>)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fa6a 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e10e      	b.n	8002234 <HAL_I2C_Master_Receive+0x440>
 8002016:	bf00      	nop
 8002018:	00100002 	.word	0x00100002
 800201c:	ffff0000 	.word	0xffff0000
 8002020:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002098:	e0b8      	b.n	800220c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a0:	2200      	movs	r2, #0
 80020a2:	4966      	ldr	r1, [pc, #408]	; (800223c <HAL_I2C_Master_Receive+0x448>)
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fa1b 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0bf      	b.n	8002234 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fc:	2200      	movs	r2, #0
 80020fe:	494f      	ldr	r1, [pc, #316]	; (800223c <HAL_I2C_Master_Receive+0x448>)
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f9ed 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e091      	b.n	8002234 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002184:	e042      	b.n	800220c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fb00 	bl	8002790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e04c      	b.n	8002234 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d118      	bne.n	800220c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	f47f aec2 	bne.w	8001f9a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002232:	2302      	movs	r3, #2
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3728      	adds	r7, #40	; 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	00010004 	.word	0x00010004

08002240 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	460b      	mov	r3, r1
 800224e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b08      	cmp	r3, #8
 800225a:	d006      	beq.n	800226a <I2C_MasterRequestWrite+0x2a>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d003      	beq.n	800226a <I2C_MasterRequestWrite+0x2a>
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002268:	d108      	bne.n	800227c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e00b      	b.n	8002294 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	2b12      	cmp	r3, #18
 8002282:	d107      	bne.n	8002294 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002292:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f91d 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00d      	beq.n	80022c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ba:	d103      	bne.n	80022c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e035      	b.n	8002334 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022d0:	d108      	bne.n	80022e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022d2:	897b      	ldrh	r3, [r7, #10]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022e0:	611a      	str	r2, [r3, #16]
 80022e2:	e01b      	b.n	800231c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022e4:	897b      	ldrh	r3, [r7, #10]
 80022e6:	11db      	asrs	r3, r3, #7
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f003 0306 	and.w	r3, r3, #6
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f063 030f 	orn	r3, r3, #15
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	490e      	ldr	r1, [pc, #56]	; (800233c <I2C_MasterRequestWrite+0xfc>)
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f943 	bl	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e010      	b.n	8002334 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002312:	897b      	ldrh	r3, [r7, #10]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4907      	ldr	r1, [pc, #28]	; (8002340 <I2C_MasterRequestWrite+0x100>)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f933 	bl	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	00010008 	.word	0x00010008
 8002340:	00010002 	.word	0x00010002

08002344 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	460b      	mov	r3, r1
 8002352:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002368:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d006      	beq.n	800237e <I2C_MasterRequestRead+0x3a>
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d003      	beq.n	800237e <I2C_MasterRequestRead+0x3a>
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800237c:	d108      	bne.n	8002390 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e00b      	b.n	80023a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	2b11      	cmp	r3, #17
 8002396:	d107      	bne.n	80023a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f893 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00d      	beq.n	80023dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ce:	d103      	bne.n	80023d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e079      	b.n	80024d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023e4:	d108      	bne.n	80023f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023e6:	897b      	ldrh	r3, [r7, #10]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	611a      	str	r2, [r3, #16]
 80023f6:	e05f      	b.n	80024b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023f8:	897b      	ldrh	r3, [r7, #10]
 80023fa:	11db      	asrs	r3, r3, #7
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f003 0306 	and.w	r3, r3, #6
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f063 030f 	orn	r3, r3, #15
 8002408:	b2da      	uxtb	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4930      	ldr	r1, [pc, #192]	; (80024d8 <I2C_MasterRequestRead+0x194>)
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f8b9 	bl	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e054      	b.n	80024d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002426:	897b      	ldrh	r3, [r7, #10]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4929      	ldr	r1, [pc, #164]	; (80024dc <I2C_MasterRequestRead+0x198>)
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f8a9 	bl	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e044      	b.n	80024d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f831 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00d      	beq.n	80024a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002492:	d103      	bne.n	800249c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e017      	b.n	80024d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80024a0:	897b      	ldrh	r3, [r7, #10]
 80024a2:	11db      	asrs	r3, r3, #7
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f003 0306 	and.w	r3, r3, #6
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f063 030e 	orn	r3, r3, #14
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4907      	ldr	r1, [pc, #28]	; (80024dc <I2C_MasterRequestRead+0x198>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f865 	bl	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	00010008 	.word	0x00010008
 80024dc:	00010002 	.word	0x00010002

080024e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f0:	e025      	b.n	800253e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f8:	d021      	beq.n	800253e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fa:	f7fe ff8f 	bl	800141c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d116      	bne.n	800253e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f043 0220 	orr.w	r2, r3, #32
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e023      	b.n	8002586 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d10d      	bne.n	8002564 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4013      	ands	r3, r2
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	e00c      	b.n	800257e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4013      	ands	r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	429a      	cmp	r2, r3
 8002582:	d0b6      	beq.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800259c:	e051      	b.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d123      	bne.n	80025f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f043 0204 	orr.w	r2, r3, #4
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e046      	b.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025fc:	d021      	beq.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fe:	f7fe ff0d 	bl	800141c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	429a      	cmp	r2, r3
 800260c:	d302      	bcc.n	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d116      	bne.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e020      	b.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	0c1b      	lsrs	r3, r3, #16
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10c      	bne.n	8002666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4013      	ands	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	e00b      	b.n	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	43da      	mvns	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4013      	ands	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d18d      	bne.n	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002698:	e02d      	b.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f8ce 	bl	800283c <I2C_IsAcknowledgeFailed>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e02d      	b.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b0:	d021      	beq.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b2:	f7fe feb3 	bl	800141c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d302      	bcc.n	80026c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d116      	bne.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f043 0220 	orr.w	r2, r3, #32
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e007      	b.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002700:	2b80      	cmp	r3, #128	; 0x80
 8002702:	d1ca      	bne.n	800269a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800271a:	e02d      	b.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f88d 	bl	800283c <I2C_IsAcknowledgeFailed>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e02d      	b.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002732:	d021      	beq.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002734:	f7fe fe72 	bl	800141c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	429a      	cmp	r2, r3
 8002742:	d302      	bcc.n	800274a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d116      	bne.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e007      	b.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b04      	cmp	r3, #4
 8002784:	d1ca      	bne.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800279c:	e042      	b.n	8002824 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d119      	bne.n	80027e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0210 	mvn.w	r2, #16
 80027b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e029      	b.n	8002834 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e0:	f7fe fe1c 	bl	800141c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d302      	bcc.n	80027f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d116      	bne.n	8002824 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e007      	b.n	8002834 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d1b5      	bne.n	800279e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002852:	d11b      	bne.n	800288c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800285c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0204 	orr.w	r2, r3, #4
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e31d      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028aa:	4b94      	ldr	r3, [pc, #592]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b4:	4b91      	ldr	r3, [pc, #580]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028bc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d07b      	beq.n	80029c2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d006      	beq.n	80028de <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d10f      	bne.n	80028f6 <HAL_RCC_OscConfig+0x5e>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d10b      	bne.n	80028f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028de:	4b87      	ldr	r3, [pc, #540]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d06a      	beq.n	80029c0 <HAL_RCC_OscConfig+0x128>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d166      	bne.n	80029c0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e2f7      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x74>
 80028fe:	4b7f      	ldr	r3, [pc, #508]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a7e      	ldr	r2, [pc, #504]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e02d      	b.n	8002968 <HAL_RCC_OscConfig+0xd0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10c      	bne.n	800292e <HAL_RCC_OscConfig+0x96>
 8002914:	4b79      	ldr	r3, [pc, #484]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a78      	ldr	r2, [pc, #480]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b76      	ldr	r3, [pc, #472]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a75      	ldr	r2, [pc, #468]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	e01c      	b.n	8002968 <HAL_RCC_OscConfig+0xd0>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b05      	cmp	r3, #5
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0xb8>
 8002936:	4b71      	ldr	r3, [pc, #452]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a70      	ldr	r2, [pc, #448]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b6e      	ldr	r3, [pc, #440]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6d      	ldr	r2, [pc, #436]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xd0>
 8002950:	4b6a      	ldr	r3, [pc, #424]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a69      	ldr	r2, [pc, #420]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b67      	ldr	r3, [pc, #412]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a66      	ldr	r2, [pc, #408]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fd54 	bl	800141c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe fd50 	bl	800141c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e2ad      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800298a:	4b5c      	ldr	r3, [pc, #368]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xe0>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fd40 	bl	800141c <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe fd3c 	bl	800141c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e299      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029b2:	4b52      	ldr	r3, [pc, #328]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x108>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d05a      	beq.n	8002a84 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_OscConfig+0x176>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d116      	bne.n	8002a0e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e0:	4b46      	ldr	r3, [pc, #280]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_OscConfig+0x160>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e276      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b40      	ldr	r3, [pc, #256]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	493d      	ldr	r1, [pc, #244]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0c:	e03a      	b.n	8002a84 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d020      	beq.n	8002a58 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a16:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <HAL_RCC_OscConfig+0x268>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fcfe 	bl	800141c <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a24:	f7fe fcfa 	bl	800141c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e257      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a36:	4b31      	ldr	r3, [pc, #196]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	492a      	ldr	r1, [pc, #168]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
 8002a56:	e015      	b.n	8002a84 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a58:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <HAL_RCC_OscConfig+0x268>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fe fcdd 	bl	800141c <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a66:	f7fe fcd9 	bl	800141c <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e236      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a78:	4b20      	ldr	r3, [pc, #128]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80b8 	beq.w	8002c02 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d170      	bne.n	8002b7a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a98:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x218>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e21a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1a      	ldr	r2, [r3, #32]
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d921      	bls.n	8002b04 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fc47 	bl	8003358 <RCC_SetFlashLatencyFromMSIRange>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e208      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4906      	ldr	r1, [pc, #24]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	4901      	ldr	r1, [pc, #4]	; (8002afc <HAL_RCC_OscConfig+0x264>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
 8002afa:	e020      	b.n	8002b3e <HAL_RCC_OscConfig+0x2a6>
 8002afc:	40023800 	.word	0x40023800
 8002b00:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b04:	4ba4      	ldr	r3, [pc, #656]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	49a1      	ldr	r1, [pc, #644]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b16:	4ba0      	ldr	r3, [pc, #640]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	061b      	lsls	r3, r3, #24
 8002b24:	499c      	ldr	r1, [pc, #624]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fc12 	bl	8003358 <RCC_SetFlashLatencyFromMSIRange>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e1d3      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	0b5b      	lsrs	r3, r3, #13
 8002b44:	3301      	adds	r3, #1
 8002b46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b4e:	4a92      	ldr	r2, [pc, #584]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002b50:	6892      	ldr	r2, [r2, #8]
 8002b52:	0912      	lsrs	r2, r2, #4
 8002b54:	f002 020f 	and.w	r2, r2, #15
 8002b58:	4990      	ldr	r1, [pc, #576]	; (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002b5a:	5c8a      	ldrb	r2, [r1, r2]
 8002b5c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b5e:	4a90      	ldr	r2, [pc, #576]	; (8002da0 <HAL_RCC_OscConfig+0x508>)
 8002b60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b62:	4b90      	ldr	r3, [pc, #576]	; (8002da4 <HAL_RCC_OscConfig+0x50c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fc0c 	bl	8001384 <HAL_InitTick>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d045      	beq.n	8002c02 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	e1b5      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d029      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b82:	4b89      	ldr	r3, [pc, #548]	; (8002da8 <HAL_RCC_OscConfig+0x510>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fc48 	bl	800141c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b90:	f7fe fc44 	bl	800141c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1a1      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ba2:	4b7d      	ldr	r3, [pc, #500]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bae:	4b7a      	ldr	r3, [pc, #488]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4977      	ldr	r1, [pc, #476]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc0:	4b75      	ldr	r3, [pc, #468]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	4972      	ldr	r1, [pc, #456]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
 8002bd4:	e015      	b.n	8002c02 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bd6:	4b74      	ldr	r3, [pc, #464]	; (8002da8 <HAL_RCC_OscConfig+0x510>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fc1e 	bl	800141c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002be4:	f7fe fc1a 	bl	800141c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e177      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bf6:	4b68      	ldr	r3, [pc, #416]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d030      	beq.n	8002c70 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c16:	4b65      	ldr	r3, [pc, #404]	; (8002dac <HAL_RCC_OscConfig+0x514>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fbfe 	bl	800141c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c24:	f7fe fbfa 	bl	800141c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e157      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c36:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x38c>
 8002c42:	e015      	b.n	8002c70 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c44:	4b59      	ldr	r3, [pc, #356]	; (8002dac <HAL_RCC_OscConfig+0x514>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fbe7 	bl	800141c <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c52:	f7fe fbe3 	bl	800141c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e140      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c64:	4b4c      	ldr	r3, [pc, #304]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80b5 	beq.w	8002de8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c82:	4b45      	ldr	r3, [pc, #276]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4b42      	ldr	r3, [pc, #264]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	4a41      	ldr	r2, [pc, #260]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6253      	str	r3, [r2, #36]	; 0x24
 8002c9a:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002caa:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <HAL_RCC_OscConfig+0x518>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d118      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb6:	4b3e      	ldr	r3, [pc, #248]	; (8002db0 <HAL_RCC_OscConfig+0x518>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a3d      	ldr	r2, [pc, #244]	; (8002db0 <HAL_RCC_OscConfig+0x518>)
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fbab 	bl	800141c <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cca:	f7fe fba7 	bl	800141c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b64      	cmp	r3, #100	; 0x64
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e104      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <HAL_RCC_OscConfig+0x518>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x466>
 8002cf0:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	4a28      	ldr	r2, [pc, #160]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfa:	6353      	str	r3, [r2, #52]	; 0x34
 8002cfc:	e02d      	b.n	8002d5a <HAL_RCC_OscConfig+0x4c2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x488>
 8002d06:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	4a23      	ldr	r2, [pc, #140]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d10:	6353      	str	r3, [r2, #52]	; 0x34
 8002d12:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d16:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d1c:	6353      	str	r3, [r2, #52]	; 0x34
 8002d1e:	e01c      	b.n	8002d5a <HAL_RCC_OscConfig+0x4c2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d10c      	bne.n	8002d42 <HAL_RCC_OscConfig+0x4aa>
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	4a1a      	ldr	r2, [pc, #104]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d32:	6353      	str	r3, [r2, #52]	; 0x34
 8002d34:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3e:	6353      	str	r3, [r2, #52]	; 0x34
 8002d40:	e00b      	b.n	8002d5a <HAL_RCC_OscConfig+0x4c2>
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d46:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d4c:	6353      	str	r3, [r2, #52]	; 0x34
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d52:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d58:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d015      	beq.n	8002d8e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fe fb5b 	bl	800141c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fe fb57 	bl	800141c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e0b2      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ee      	beq.n	8002d6a <HAL_RCC_OscConfig+0x4d2>
 8002d8c:	e023      	b.n	8002dd6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe fb45 	bl	800141c <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d94:	e019      	b.n	8002dca <HAL_RCC_OscConfig+0x532>
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08004114 	.word	0x08004114
 8002da0:	20000000 	.word	0x20000000
 8002da4:	20000004 	.word	0x20000004
 8002da8:	42470020 	.word	0x42470020
 8002dac:	42470680 	.word	0x42470680
 8002db0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fe fb32 	bl	800141c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e08d      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dca:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <HAL_RCC_OscConfig+0x658>)
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1ee      	bne.n	8002db4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dd6:	7ffb      	ldrb	r3, [r7, #31]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ddc:	4b44      	ldr	r3, [pc, #272]	; (8002ef0 <HAL_RCC_OscConfig+0x658>)
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	4a43      	ldr	r2, [pc, #268]	; (8002ef0 <HAL_RCC_OscConfig+0x658>)
 8002de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d079      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d056      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d13b      	bne.n	8002e76 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_RCC_OscConfig+0x65c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe fb0a 	bl	800141c <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fb06 	bl	800141c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e063      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e1e:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_RCC_OscConfig+0x658>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2a:	4b31      	ldr	r3, [pc, #196]	; (8002ef0 <HAL_RCC_OscConfig+0x658>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	4319      	orrs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	430b      	orrs	r3, r1
 8002e42:	492b      	ldr	r1, [pc, #172]	; (8002ef0 <HAL_RCC_OscConfig+0x658>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e48:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <HAL_RCC_OscConfig+0x65c>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4e:	f7fe fae5 	bl	800141c <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e56:	f7fe fae1 	bl	800141c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e03e      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e68:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <HAL_RCC_OscConfig+0x658>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x5be>
 8002e74:	e036      	b.n	8002ee4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_RCC_OscConfig+0x65c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe face 	bl	800141c <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe faca 	bl	800141c <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e027      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e96:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <HAL_RCC_OscConfig+0x658>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5ec>
 8002ea2:	e01f      	b.n	8002ee4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e01a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_RCC_OscConfig+0x658>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3720      	adds	r7, #32
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	42470060 	.word	0x42470060

08002ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e11a      	b.n	8003142 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b8f      	ldr	r3, [pc, #572]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d919      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x34>
 8002f20:	4b8a      	ldr	r3, [pc, #552]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a89      	ldr	r2, [pc, #548]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b87      	ldr	r3, [pc, #540]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 0201 	bic.w	r2, r3, #1
 8002f34:	4985      	ldr	r1, [pc, #532]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3c:	4b83      	ldr	r3, [pc, #524]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0f9      	b.n	8003142 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5a:	4b7d      	ldr	r3, [pc, #500]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	497a      	ldr	r1, [pc, #488]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 808e 	beq.w	8003096 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f82:	4b73      	ldr	r3, [pc, #460]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d121      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0d7      	b.n	8003142 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f9a:	4b6d      	ldr	r3, [pc, #436]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d115      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0cb      	b.n	8003142 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fb2:	4b67      	ldr	r3, [pc, #412]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0bf      	b.n	8003142 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fc2:	4b63      	ldr	r3, [pc, #396]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0b7      	b.n	8003142 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b5f      	ldr	r3, [pc, #380]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	495c      	ldr	r1, [pc, #368]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fa1a 	bl	800141c <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d112      	bne.n	8003018 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff4:	f7fe fa12 	bl	800141c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e09b      	b.n	8003142 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800300a:	4b51      	ldr	r3, [pc, #324]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b08      	cmp	r3, #8
 8003014:	d1ee      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xfc>
 8003016:	e03e      	b.n	8003096 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d112      	bne.n	8003046 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003022:	f7fe f9fb 	bl	800141c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e084      	b.n	8003142 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003038:	4b45      	ldr	r3, [pc, #276]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b0c      	cmp	r3, #12
 8003042:	d1ee      	bne.n	8003022 <HAL_RCC_ClockConfig+0x12a>
 8003044:	e027      	b.n	8003096 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d11d      	bne.n	800308a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003050:	f7fe f9e4 	bl	800141c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e06d      	b.n	8003142 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003066:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b04      	cmp	r3, #4
 8003070:	d1ee      	bne.n	8003050 <HAL_RCC_ClockConfig+0x158>
 8003072:	e010      	b.n	8003096 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003074:	f7fe f9d2 	bl	800141c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e05b      	b.n	8003142 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800308a:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ee      	bne.n	8003074 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003096:	4b2d      	ldr	r3, [pc, #180]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d219      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d105      	bne.n	80030b6 <HAL_RCC_ClockConfig+0x1be>
 80030aa:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a27      	ldr	r2, [pc, #156]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b25      	ldr	r3, [pc, #148]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 0201 	bic.w	r2, r3, #1
 80030be:	4923      	ldr	r1, [pc, #140]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e034      	b.n	8003142 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e4:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4917      	ldr	r1, [pc, #92]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	490f      	ldr	r1, [pc, #60]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003116:	f000 f823 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 800311a:	4601      	mov	r1, r0
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <HAL_RCC_ClockConfig+0x258>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_RCC_ClockConfig+0x25c>)
 8003128:	5cd3      	ldrb	r3, [r2, r3]
 800312a:	fa21 f303 	lsr.w	r3, r1, r3
 800312e:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <HAL_RCC_ClockConfig+0x260>)
 8003130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_ClockConfig+0x264>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe f924 	bl	8001384 <HAL_InitTick>
 800313c:	4603      	mov	r3, r0
 800313e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003140:	7afb      	ldrb	r3, [r7, #11]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40023c00 	.word	0x40023c00
 8003150:	40023800 	.word	0x40023800
 8003154:	08004114 	.word	0x08004114
 8003158:	20000000 	.word	0x20000000
 800315c:	20000004 	.word	0x20000004

08003160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003166:	4b5f      	ldr	r3, [pc, #380]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b08      	cmp	r3, #8
 8003174:	d007      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x26>
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d008      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x2c>
 800317a:	2b04      	cmp	r3, #4
 800317c:	f040 809f 	bne.w	80032be <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003182:	613b      	str	r3, [r7, #16]
      break;
 8003184:	e0a9      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003186:	4b59      	ldr	r3, [pc, #356]	; (80032ec <HAL_RCC_GetSysClockFreq+0x18c>)
 8003188:	613b      	str	r3, [r7, #16]
      break;
 800318a:	e0a6      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	0c9b      	lsrs	r3, r3, #18
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	4a56      	ldr	r2, [pc, #344]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x190>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	0d9b      	lsrs	r3, r3, #22
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	3301      	adds	r3, #1
 80031a4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031a6:	4b4f      	ldr	r3, [pc, #316]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d041      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	461d      	mov	r5, r3
 80031b6:	f04f 0600 	mov.w	r6, #0
 80031ba:	4629      	mov	r1, r5
 80031bc:	4632      	mov	r2, r6
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	f04f 0400 	mov.w	r4, #0
 80031c6:	0154      	lsls	r4, r2, #5
 80031c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031cc:	014b      	lsls	r3, r1, #5
 80031ce:	4619      	mov	r1, r3
 80031d0:	4622      	mov	r2, r4
 80031d2:	1b49      	subs	r1, r1, r5
 80031d4:	eb62 0206 	sbc.w	r2, r2, r6
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	f04f 0400 	mov.w	r4, #0
 80031e0:	0194      	lsls	r4, r2, #6
 80031e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031e6:	018b      	lsls	r3, r1, #6
 80031e8:	1a5b      	subs	r3, r3, r1
 80031ea:	eb64 0402 	sbc.w	r4, r4, r2
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	00e2      	lsls	r2, r4, #3
 80031f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031fc:	00d9      	lsls	r1, r3, #3
 80031fe:	460b      	mov	r3, r1
 8003200:	4614      	mov	r4, r2
 8003202:	195b      	adds	r3, r3, r5
 8003204:	eb44 0406 	adc.w	r4, r4, r6
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	0262      	lsls	r2, r4, #9
 8003212:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003216:	0259      	lsls	r1, r3, #9
 8003218:	460b      	mov	r3, r1
 800321a:	4614      	mov	r4, r2
 800321c:	4618      	mov	r0, r3
 800321e:	4621      	mov	r1, r4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f04f 0400 	mov.w	r4, #0
 8003226:	461a      	mov	r2, r3
 8003228:	4623      	mov	r3, r4
 800322a:	f7fd fbef 	bl	8000a0c <__aeabi_uldivmod>
 800322e:	4603      	mov	r3, r0
 8003230:	460c      	mov	r4, r1
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	e040      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	461d      	mov	r5, r3
 800323a:	f04f 0600 	mov.w	r6, #0
 800323e:	4629      	mov	r1, r5
 8003240:	4632      	mov	r2, r6
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	f04f 0400 	mov.w	r4, #0
 800324a:	0154      	lsls	r4, r2, #5
 800324c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003250:	014b      	lsls	r3, r1, #5
 8003252:	4619      	mov	r1, r3
 8003254:	4622      	mov	r2, r4
 8003256:	1b49      	subs	r1, r1, r5
 8003258:	eb62 0206 	sbc.w	r2, r2, r6
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	f04f 0400 	mov.w	r4, #0
 8003264:	0194      	lsls	r4, r2, #6
 8003266:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800326a:	018b      	lsls	r3, r1, #6
 800326c:	1a5b      	subs	r3, r3, r1
 800326e:	eb64 0402 	sbc.w	r4, r4, r2
 8003272:	f04f 0100 	mov.w	r1, #0
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	00e2      	lsls	r2, r4, #3
 800327c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003280:	00d9      	lsls	r1, r3, #3
 8003282:	460b      	mov	r3, r1
 8003284:	4614      	mov	r4, r2
 8003286:	195b      	adds	r3, r3, r5
 8003288:	eb44 0406 	adc.w	r4, r4, r6
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	02a2      	lsls	r2, r4, #10
 8003296:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800329a:	0299      	lsls	r1, r3, #10
 800329c:	460b      	mov	r3, r1
 800329e:	4614      	mov	r4, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	4621      	mov	r1, r4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f04f 0400 	mov.w	r4, #0
 80032aa:	461a      	mov	r2, r3
 80032ac:	4623      	mov	r3, r4
 80032ae:	f7fd fbad 	bl	8000a0c <__aeabi_uldivmod>
 80032b2:	4603      	mov	r3, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	613b      	str	r3, [r7, #16]
      break;
 80032bc:	e00d      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	0b5b      	lsrs	r3, r3, #13
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	3301      	adds	r3, #1
 80032ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	613b      	str	r3, [r7, #16]
      break;
 80032d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032da:	693b      	ldr	r3, [r7, #16]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	007a1200 	.word	0x007a1200
 80032f0:	08004108 	.word	0x08004108

080032f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f8:	4b02      	ldr	r3, [pc, #8]	; (8003304 <HAL_RCC_GetHCLKFreq+0x10>)
 80032fa:	681b      	ldr	r3, [r3, #0]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	20000000 	.word	0x20000000

08003308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800330c:	f7ff fff2 	bl	80032f4 <HAL_RCC_GetHCLKFreq>
 8003310:	4601      	mov	r1, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4a03      	ldr	r2, [pc, #12]	; (800332c <HAL_RCC_GetPCLK1Freq+0x24>)
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	08004124 	.word	0x08004124

08003330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003334:	f7ff ffde 	bl	80032f4 <HAL_RCC_GetHCLKFreq>
 8003338:	4601      	mov	r1, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0adb      	lsrs	r3, r3, #11
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4a03      	ldr	r2, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003346:	5cd3      	ldrb	r3, [r2, r3]
 8003348:	fa21 f303 	lsr.w	r3, r1, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	08004124 	.word	0x08004124

08003358 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003364:	4b29      	ldr	r3, [pc, #164]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d12c      	bne.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003370:	4b26      	ldr	r3, [pc, #152]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	e016      	b.n	80033b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b20      	ldr	r3, [pc, #128]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	4a1f      	ldr	r2, [pc, #124]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	6253      	str	r3, [r2, #36]	; 0x24
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80033a0:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80033a8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80033aa:	4b18      	ldr	r3, [pc, #96]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	4a17      	ldr	r2, [pc, #92]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80033bc:	d105      	bne.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0x72>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033c4:	d101      	bne.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80033c6:	2301      	movs	r3, #1
 80033c8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0f      	ldr	r2, [pc, #60]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 0201 	bic.w	r2, r3, #1
 80033e4:	490b      	ldr	r1, [pc, #44]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d001      	beq.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	40007000 	.word	0x40007000
 8003414:	40023c00 	.word	0x40023c00

08003418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e03f      	b.n	80034aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd ff1e 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2224      	movs	r2, #36	; 0x24
 8003448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800345a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f90b 	bl	8003678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b088      	sub	sp, #32
 80034b6:	af02      	add	r7, sp, #8
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	603b      	str	r3, [r7, #0]
 80034be:	4613      	mov	r3, r2
 80034c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	f040 8083 	bne.w	80035da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_UART_Transmit+0x2e>
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e07b      	b.n	80035dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Transmit+0x40>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e074      	b.n	80035dc <HAL_UART_Transmit+0x12a>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2221      	movs	r2, #33	; 0x21
 8003504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003508:	f7fd ff88 	bl	800141c <HAL_GetTick>
 800350c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	88fa      	ldrh	r2, [r7, #6]
 8003512:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003522:	e042      	b.n	80035aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353a:	d122      	bne.n	8003582 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2200      	movs	r2, #0
 8003544:	2180      	movs	r1, #128	; 0x80
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f84c 	bl	80035e4 <UART_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e042      	b.n	80035dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003568:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3302      	adds	r3, #2
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	e017      	b.n	80035aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3301      	adds	r3, #1
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	e013      	b.n	80035aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2200      	movs	r2, #0
 800358a:	2180      	movs	r1, #128	; 0x80
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f829 	bl	80035e4 <UART_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e01f      	b.n	80035dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	60ba      	str	r2, [r7, #8]
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1b7      	bne.n	8003524 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2200      	movs	r2, #0
 80035bc:	2140      	movs	r1, #64	; 0x40
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f810 	bl	80035e4 <UART_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e006      	b.n	80035dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f4:	e02c      	b.n	8003650 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035fc:	d028      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <UART_WaitOnFlagUntilTimeout+0x30>
 8003604:	f7fd ff0a 	bl	800141c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	429a      	cmp	r2, r3
 8003612:	d21d      	bcs.n	8003650 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003622:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e00f      	b.n	8003670 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	429a      	cmp	r2, r3
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	429a      	cmp	r2, r3
 800366c:	d0c3      	beq.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036b8:	f023 030c 	bic.w	r3, r3, #12
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	430b      	orrs	r3, r1
 80036c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a55      	ldr	r2, [pc, #340]	; (8003838 <UART_SetConfig+0x1c0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d103      	bne.n	80036ee <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036e6:	f7ff fe23 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	e002      	b.n	80036f4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036ee:	f7ff fe0b 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 80036f2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fc:	d14c      	bne.n	8003798 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	009a      	lsls	r2, r3, #2
 8003708:	441a      	add	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	4a49      	ldr	r2, [pc, #292]	; (800383c <UART_SetConfig+0x1c4>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	0119      	lsls	r1, r3, #4
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009a      	lsls	r2, r3, #2
 8003728:	441a      	add	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fbb2 f2f3 	udiv	r2, r2, r3
 8003734:	4b41      	ldr	r3, [pc, #260]	; (800383c <UART_SetConfig+0x1c4>)
 8003736:	fba3 0302 	umull	r0, r3, r3, r2
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2064      	movs	r0, #100	; 0x64
 800373e:	fb00 f303 	mul.w	r3, r0, r3
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	3332      	adds	r3, #50	; 0x32
 8003748:	4a3c      	ldr	r2, [pc, #240]	; (800383c <UART_SetConfig+0x1c4>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003756:	4419      	add	r1, r3
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	009a      	lsls	r2, r3, #2
 8003762:	441a      	add	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fbb2 f2f3 	udiv	r2, r2, r3
 800376e:	4b33      	ldr	r3, [pc, #204]	; (800383c <UART_SetConfig+0x1c4>)
 8003770:	fba3 0302 	umull	r0, r3, r3, r2
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	2064      	movs	r0, #100	; 0x64
 8003778:	fb00 f303 	mul.w	r3, r0, r3
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	3332      	adds	r3, #50	; 0x32
 8003782:	4a2e      	ldr	r2, [pc, #184]	; (800383c <UART_SetConfig+0x1c4>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	f003 0207 	and.w	r2, r3, #7
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	440a      	add	r2, r1
 8003794:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003796:	e04a      	b.n	800382e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	009a      	lsls	r2, r3, #2
 80037a2:	441a      	add	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	4a23      	ldr	r2, [pc, #140]	; (800383c <UART_SetConfig+0x1c4>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	0119      	lsls	r1, r3, #4
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009a      	lsls	r2, r3, #2
 80037c2:	441a      	add	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <UART_SetConfig+0x1c4>)
 80037d0:	fba3 0302 	umull	r0, r3, r3, r2
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	2064      	movs	r0, #100	; 0x64
 80037d8:	fb00 f303 	mul.w	r3, r0, r3
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	3332      	adds	r3, #50	; 0x32
 80037e2:	4a16      	ldr	r2, [pc, #88]	; (800383c <UART_SetConfig+0x1c4>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ee:	4419      	add	r1, r3
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	009a      	lsls	r2, r3, #2
 80037fa:	441a      	add	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	fbb2 f2f3 	udiv	r2, r2, r3
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <UART_SetConfig+0x1c4>)
 8003808:	fba3 0302 	umull	r0, r3, r3, r2
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	2064      	movs	r0, #100	; 0x64
 8003810:	fb00 f303 	mul.w	r3, r0, r3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	3332      	adds	r3, #50	; 0x32
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <UART_SetConfig+0x1c4>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	f003 020f 	and.w	r2, r3, #15
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	440a      	add	r2, r1
 800382c:	609a      	str	r2, [r3, #8]
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40013800 	.word	0x40013800
 800383c:	51eb851f 	.word	0x51eb851f

08003840 <__errno>:
 8003840:	4b01      	ldr	r3, [pc, #4]	; (8003848 <__errno+0x8>)
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	2000000c 	.word	0x2000000c

0800384c <__libc_init_array>:
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	2500      	movs	r5, #0
 8003850:	4e0c      	ldr	r6, [pc, #48]	; (8003884 <__libc_init_array+0x38>)
 8003852:	4c0d      	ldr	r4, [pc, #52]	; (8003888 <__libc_init_array+0x3c>)
 8003854:	1ba4      	subs	r4, r4, r6
 8003856:	10a4      	asrs	r4, r4, #2
 8003858:	42a5      	cmp	r5, r4
 800385a:	d109      	bne.n	8003870 <__libc_init_array+0x24>
 800385c:	f000 fc34 	bl	80040c8 <_init>
 8003860:	2500      	movs	r5, #0
 8003862:	4e0a      	ldr	r6, [pc, #40]	; (800388c <__libc_init_array+0x40>)
 8003864:	4c0a      	ldr	r4, [pc, #40]	; (8003890 <__libc_init_array+0x44>)
 8003866:	1ba4      	subs	r4, r4, r6
 8003868:	10a4      	asrs	r4, r4, #2
 800386a:	42a5      	cmp	r5, r4
 800386c:	d105      	bne.n	800387a <__libc_init_array+0x2e>
 800386e:	bd70      	pop	{r4, r5, r6, pc}
 8003870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003874:	4798      	blx	r3
 8003876:	3501      	adds	r5, #1
 8003878:	e7ee      	b.n	8003858 <__libc_init_array+0xc>
 800387a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800387e:	4798      	blx	r3
 8003880:	3501      	adds	r5, #1
 8003882:	e7f2      	b.n	800386a <__libc_init_array+0x1e>
 8003884:	08004168 	.word	0x08004168
 8003888:	08004168 	.word	0x08004168
 800388c:	08004168 	.word	0x08004168
 8003890:	0800416c 	.word	0x0800416c

08003894 <memset>:
 8003894:	4603      	mov	r3, r0
 8003896:	4402      	add	r2, r0
 8003898:	4293      	cmp	r3, r2
 800389a:	d100      	bne.n	800389e <memset+0xa>
 800389c:	4770      	bx	lr
 800389e:	f803 1b01 	strb.w	r1, [r3], #1
 80038a2:	e7f9      	b.n	8003898 <memset+0x4>

080038a4 <siprintf>:
 80038a4:	b40e      	push	{r1, r2, r3}
 80038a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038aa:	b500      	push	{lr}
 80038ac:	b09c      	sub	sp, #112	; 0x70
 80038ae:	ab1d      	add	r3, sp, #116	; 0x74
 80038b0:	9002      	str	r0, [sp, #8]
 80038b2:	9006      	str	r0, [sp, #24]
 80038b4:	9107      	str	r1, [sp, #28]
 80038b6:	9104      	str	r1, [sp, #16]
 80038b8:	4808      	ldr	r0, [pc, #32]	; (80038dc <siprintf+0x38>)
 80038ba:	4909      	ldr	r1, [pc, #36]	; (80038e0 <siprintf+0x3c>)
 80038bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80038c0:	9105      	str	r1, [sp, #20]
 80038c2:	6800      	ldr	r0, [r0, #0]
 80038c4:	a902      	add	r1, sp, #8
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	f000 f866 	bl	8003998 <_svfiprintf_r>
 80038cc:	2200      	movs	r2, #0
 80038ce:	9b02      	ldr	r3, [sp, #8]
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	b01c      	add	sp, #112	; 0x70
 80038d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80038d8:	b003      	add	sp, #12
 80038da:	4770      	bx	lr
 80038dc:	2000000c 	.word	0x2000000c
 80038e0:	ffff0208 	.word	0xffff0208

080038e4 <__ssputs_r>:
 80038e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e8:	688e      	ldr	r6, [r1, #8]
 80038ea:	4682      	mov	sl, r0
 80038ec:	429e      	cmp	r6, r3
 80038ee:	460c      	mov	r4, r1
 80038f0:	4690      	mov	r8, r2
 80038f2:	4699      	mov	r9, r3
 80038f4:	d837      	bhi.n	8003966 <__ssputs_r+0x82>
 80038f6:	898a      	ldrh	r2, [r1, #12]
 80038f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038fc:	d031      	beq.n	8003962 <__ssputs_r+0x7e>
 80038fe:	2302      	movs	r3, #2
 8003900:	6825      	ldr	r5, [r4, #0]
 8003902:	6909      	ldr	r1, [r1, #16]
 8003904:	1a6f      	subs	r7, r5, r1
 8003906:	6965      	ldr	r5, [r4, #20]
 8003908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800390c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003910:	f109 0301 	add.w	r3, r9, #1
 8003914:	443b      	add	r3, r7
 8003916:	429d      	cmp	r5, r3
 8003918:	bf38      	it	cc
 800391a:	461d      	movcc	r5, r3
 800391c:	0553      	lsls	r3, r2, #21
 800391e:	d530      	bpl.n	8003982 <__ssputs_r+0x9e>
 8003920:	4629      	mov	r1, r5
 8003922:	f000 fb37 	bl	8003f94 <_malloc_r>
 8003926:	4606      	mov	r6, r0
 8003928:	b950      	cbnz	r0, 8003940 <__ssputs_r+0x5c>
 800392a:	230c      	movs	r3, #12
 800392c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003930:	f8ca 3000 	str.w	r3, [sl]
 8003934:	89a3      	ldrh	r3, [r4, #12]
 8003936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800393a:	81a3      	strh	r3, [r4, #12]
 800393c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003940:	463a      	mov	r2, r7
 8003942:	6921      	ldr	r1, [r4, #16]
 8003944:	f000 fab6 	bl	8003eb4 <memcpy>
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800394e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003952:	81a3      	strh	r3, [r4, #12]
 8003954:	6126      	str	r6, [r4, #16]
 8003956:	443e      	add	r6, r7
 8003958:	6026      	str	r6, [r4, #0]
 800395a:	464e      	mov	r6, r9
 800395c:	6165      	str	r5, [r4, #20]
 800395e:	1bed      	subs	r5, r5, r7
 8003960:	60a5      	str	r5, [r4, #8]
 8003962:	454e      	cmp	r6, r9
 8003964:	d900      	bls.n	8003968 <__ssputs_r+0x84>
 8003966:	464e      	mov	r6, r9
 8003968:	4632      	mov	r2, r6
 800396a:	4641      	mov	r1, r8
 800396c:	6820      	ldr	r0, [r4, #0]
 800396e:	f000 faac 	bl	8003eca <memmove>
 8003972:	68a3      	ldr	r3, [r4, #8]
 8003974:	2000      	movs	r0, #0
 8003976:	1b9b      	subs	r3, r3, r6
 8003978:	60a3      	str	r3, [r4, #8]
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	441e      	add	r6, r3
 800397e:	6026      	str	r6, [r4, #0]
 8003980:	e7dc      	b.n	800393c <__ssputs_r+0x58>
 8003982:	462a      	mov	r2, r5
 8003984:	f000 fb60 	bl	8004048 <_realloc_r>
 8003988:	4606      	mov	r6, r0
 800398a:	2800      	cmp	r0, #0
 800398c:	d1e2      	bne.n	8003954 <__ssputs_r+0x70>
 800398e:	6921      	ldr	r1, [r4, #16]
 8003990:	4650      	mov	r0, sl
 8003992:	f000 fab3 	bl	8003efc <_free_r>
 8003996:	e7c8      	b.n	800392a <__ssputs_r+0x46>

08003998 <_svfiprintf_r>:
 8003998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800399c:	461d      	mov	r5, r3
 800399e:	898b      	ldrh	r3, [r1, #12]
 80039a0:	b09d      	sub	sp, #116	; 0x74
 80039a2:	061f      	lsls	r7, r3, #24
 80039a4:	4680      	mov	r8, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	4616      	mov	r6, r2
 80039aa:	d50f      	bpl.n	80039cc <_svfiprintf_r+0x34>
 80039ac:	690b      	ldr	r3, [r1, #16]
 80039ae:	b96b      	cbnz	r3, 80039cc <_svfiprintf_r+0x34>
 80039b0:	2140      	movs	r1, #64	; 0x40
 80039b2:	f000 faef 	bl	8003f94 <_malloc_r>
 80039b6:	6020      	str	r0, [r4, #0]
 80039b8:	6120      	str	r0, [r4, #16]
 80039ba:	b928      	cbnz	r0, 80039c8 <_svfiprintf_r+0x30>
 80039bc:	230c      	movs	r3, #12
 80039be:	f8c8 3000 	str.w	r3, [r8]
 80039c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039c6:	e0c8      	b.n	8003b5a <_svfiprintf_r+0x1c2>
 80039c8:	2340      	movs	r3, #64	; 0x40
 80039ca:	6163      	str	r3, [r4, #20]
 80039cc:	2300      	movs	r3, #0
 80039ce:	9309      	str	r3, [sp, #36]	; 0x24
 80039d0:	2320      	movs	r3, #32
 80039d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039d6:	2330      	movs	r3, #48	; 0x30
 80039d8:	f04f 0b01 	mov.w	fp, #1
 80039dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039e0:	9503      	str	r5, [sp, #12]
 80039e2:	4637      	mov	r7, r6
 80039e4:	463d      	mov	r5, r7
 80039e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039ea:	b10b      	cbz	r3, 80039f0 <_svfiprintf_r+0x58>
 80039ec:	2b25      	cmp	r3, #37	; 0x25
 80039ee:	d13e      	bne.n	8003a6e <_svfiprintf_r+0xd6>
 80039f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80039f4:	d00b      	beq.n	8003a0e <_svfiprintf_r+0x76>
 80039f6:	4653      	mov	r3, sl
 80039f8:	4632      	mov	r2, r6
 80039fa:	4621      	mov	r1, r4
 80039fc:	4640      	mov	r0, r8
 80039fe:	f7ff ff71 	bl	80038e4 <__ssputs_r>
 8003a02:	3001      	adds	r0, #1
 8003a04:	f000 80a4 	beq.w	8003b50 <_svfiprintf_r+0x1b8>
 8003a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a0a:	4453      	add	r3, sl
 8003a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a0e:	783b      	ldrb	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 809d 	beq.w	8003b50 <_svfiprintf_r+0x1b8>
 8003a16:	2300      	movs	r3, #0
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a20:	9304      	str	r3, [sp, #16]
 8003a22:	9307      	str	r3, [sp, #28]
 8003a24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a28:	931a      	str	r3, [sp, #104]	; 0x68
 8003a2a:	462f      	mov	r7, r5
 8003a2c:	2205      	movs	r2, #5
 8003a2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003a32:	4850      	ldr	r0, [pc, #320]	; (8003b74 <_svfiprintf_r+0x1dc>)
 8003a34:	f000 fa30 	bl	8003e98 <memchr>
 8003a38:	9b04      	ldr	r3, [sp, #16]
 8003a3a:	b9d0      	cbnz	r0, 8003a72 <_svfiprintf_r+0xda>
 8003a3c:	06d9      	lsls	r1, r3, #27
 8003a3e:	bf44      	itt	mi
 8003a40:	2220      	movmi	r2, #32
 8003a42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a46:	071a      	lsls	r2, r3, #28
 8003a48:	bf44      	itt	mi
 8003a4a:	222b      	movmi	r2, #43	; 0x2b
 8003a4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a50:	782a      	ldrb	r2, [r5, #0]
 8003a52:	2a2a      	cmp	r2, #42	; 0x2a
 8003a54:	d015      	beq.n	8003a82 <_svfiprintf_r+0xea>
 8003a56:	462f      	mov	r7, r5
 8003a58:	2000      	movs	r0, #0
 8003a5a:	250a      	movs	r5, #10
 8003a5c:	9a07      	ldr	r2, [sp, #28]
 8003a5e:	4639      	mov	r1, r7
 8003a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a64:	3b30      	subs	r3, #48	; 0x30
 8003a66:	2b09      	cmp	r3, #9
 8003a68:	d94d      	bls.n	8003b06 <_svfiprintf_r+0x16e>
 8003a6a:	b1b8      	cbz	r0, 8003a9c <_svfiprintf_r+0x104>
 8003a6c:	e00f      	b.n	8003a8e <_svfiprintf_r+0xf6>
 8003a6e:	462f      	mov	r7, r5
 8003a70:	e7b8      	b.n	80039e4 <_svfiprintf_r+0x4c>
 8003a72:	4a40      	ldr	r2, [pc, #256]	; (8003b74 <_svfiprintf_r+0x1dc>)
 8003a74:	463d      	mov	r5, r7
 8003a76:	1a80      	subs	r0, r0, r2
 8003a78:	fa0b f000 	lsl.w	r0, fp, r0
 8003a7c:	4318      	orrs	r0, r3
 8003a7e:	9004      	str	r0, [sp, #16]
 8003a80:	e7d3      	b.n	8003a2a <_svfiprintf_r+0x92>
 8003a82:	9a03      	ldr	r2, [sp, #12]
 8003a84:	1d11      	adds	r1, r2, #4
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	9103      	str	r1, [sp, #12]
 8003a8a:	2a00      	cmp	r2, #0
 8003a8c:	db01      	blt.n	8003a92 <_svfiprintf_r+0xfa>
 8003a8e:	9207      	str	r2, [sp, #28]
 8003a90:	e004      	b.n	8003a9c <_svfiprintf_r+0x104>
 8003a92:	4252      	negs	r2, r2
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	9207      	str	r2, [sp, #28]
 8003a9a:	9304      	str	r3, [sp, #16]
 8003a9c:	783b      	ldrb	r3, [r7, #0]
 8003a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003aa0:	d10c      	bne.n	8003abc <_svfiprintf_r+0x124>
 8003aa2:	787b      	ldrb	r3, [r7, #1]
 8003aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8003aa6:	d133      	bne.n	8003b10 <_svfiprintf_r+0x178>
 8003aa8:	9b03      	ldr	r3, [sp, #12]
 8003aaa:	3702      	adds	r7, #2
 8003aac:	1d1a      	adds	r2, r3, #4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	9203      	str	r2, [sp, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bfb8      	it	lt
 8003ab6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003aba:	9305      	str	r3, [sp, #20]
 8003abc:	4d2e      	ldr	r5, [pc, #184]	; (8003b78 <_svfiprintf_r+0x1e0>)
 8003abe:	2203      	movs	r2, #3
 8003ac0:	7839      	ldrb	r1, [r7, #0]
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f000 f9e8 	bl	8003e98 <memchr>
 8003ac8:	b138      	cbz	r0, 8003ada <_svfiprintf_r+0x142>
 8003aca:	2340      	movs	r3, #64	; 0x40
 8003acc:	1b40      	subs	r0, r0, r5
 8003ace:	fa03 f000 	lsl.w	r0, r3, r0
 8003ad2:	9b04      	ldr	r3, [sp, #16]
 8003ad4:	3701      	adds	r7, #1
 8003ad6:	4303      	orrs	r3, r0
 8003ad8:	9304      	str	r3, [sp, #16]
 8003ada:	7839      	ldrb	r1, [r7, #0]
 8003adc:	2206      	movs	r2, #6
 8003ade:	4827      	ldr	r0, [pc, #156]	; (8003b7c <_svfiprintf_r+0x1e4>)
 8003ae0:	1c7e      	adds	r6, r7, #1
 8003ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ae6:	f000 f9d7 	bl	8003e98 <memchr>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d038      	beq.n	8003b60 <_svfiprintf_r+0x1c8>
 8003aee:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <_svfiprintf_r+0x1e8>)
 8003af0:	bb13      	cbnz	r3, 8003b38 <_svfiprintf_r+0x1a0>
 8003af2:	9b03      	ldr	r3, [sp, #12]
 8003af4:	3307      	adds	r3, #7
 8003af6:	f023 0307 	bic.w	r3, r3, #7
 8003afa:	3308      	adds	r3, #8
 8003afc:	9303      	str	r3, [sp, #12]
 8003afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b00:	444b      	add	r3, r9
 8003b02:	9309      	str	r3, [sp, #36]	; 0x24
 8003b04:	e76d      	b.n	80039e2 <_svfiprintf_r+0x4a>
 8003b06:	fb05 3202 	mla	r2, r5, r2, r3
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	460f      	mov	r7, r1
 8003b0e:	e7a6      	b.n	8003a5e <_svfiprintf_r+0xc6>
 8003b10:	2300      	movs	r3, #0
 8003b12:	250a      	movs	r5, #10
 8003b14:	4619      	mov	r1, r3
 8003b16:	3701      	adds	r7, #1
 8003b18:	9305      	str	r3, [sp, #20]
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b20:	3a30      	subs	r2, #48	; 0x30
 8003b22:	2a09      	cmp	r2, #9
 8003b24:	d903      	bls.n	8003b2e <_svfiprintf_r+0x196>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0c8      	beq.n	8003abc <_svfiprintf_r+0x124>
 8003b2a:	9105      	str	r1, [sp, #20]
 8003b2c:	e7c6      	b.n	8003abc <_svfiprintf_r+0x124>
 8003b2e:	fb05 2101 	mla	r1, r5, r1, r2
 8003b32:	2301      	movs	r3, #1
 8003b34:	4607      	mov	r7, r0
 8003b36:	e7f0      	b.n	8003b1a <_svfiprintf_r+0x182>
 8003b38:	ab03      	add	r3, sp, #12
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <_svfiprintf_r+0x1ec>)
 8003b40:	a904      	add	r1, sp, #16
 8003b42:	4640      	mov	r0, r8
 8003b44:	f3af 8000 	nop.w
 8003b48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003b4c:	4681      	mov	r9, r0
 8003b4e:	d1d6      	bne.n	8003afe <_svfiprintf_r+0x166>
 8003b50:	89a3      	ldrh	r3, [r4, #12]
 8003b52:	065b      	lsls	r3, r3, #25
 8003b54:	f53f af35 	bmi.w	80039c2 <_svfiprintf_r+0x2a>
 8003b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b5a:	b01d      	add	sp, #116	; 0x74
 8003b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b60:	ab03      	add	r3, sp, #12
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	4622      	mov	r2, r4
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <_svfiprintf_r+0x1ec>)
 8003b68:	a904      	add	r1, sp, #16
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	f000 f882 	bl	8003c74 <_printf_i>
 8003b70:	e7ea      	b.n	8003b48 <_svfiprintf_r+0x1b0>
 8003b72:	bf00      	nop
 8003b74:	0800412c 	.word	0x0800412c
 8003b78:	08004132 	.word	0x08004132
 8003b7c:	08004136 	.word	0x08004136
 8003b80:	00000000 	.word	0x00000000
 8003b84:	080038e5 	.word	0x080038e5

08003b88 <_printf_common>:
 8003b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b8c:	4691      	mov	r9, r2
 8003b8e:	461f      	mov	r7, r3
 8003b90:	688a      	ldr	r2, [r1, #8]
 8003b92:	690b      	ldr	r3, [r1, #16]
 8003b94:	4606      	mov	r6, r0
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bfb8      	it	lt
 8003b9a:	4613      	movlt	r3, r2
 8003b9c:	f8c9 3000 	str.w	r3, [r9]
 8003ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003baa:	b112      	cbz	r2, 8003bb2 <_printf_common+0x2a>
 8003bac:	3301      	adds	r3, #1
 8003bae:	f8c9 3000 	str.w	r3, [r9]
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	0699      	lsls	r1, r3, #26
 8003bb6:	bf42      	ittt	mi
 8003bb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003bbc:	3302      	addmi	r3, #2
 8003bbe:	f8c9 3000 	strmi.w	r3, [r9]
 8003bc2:	6825      	ldr	r5, [r4, #0]
 8003bc4:	f015 0506 	ands.w	r5, r5, #6
 8003bc8:	d107      	bne.n	8003bda <_printf_common+0x52>
 8003bca:	f104 0a19 	add.w	sl, r4, #25
 8003bce:	68e3      	ldr	r3, [r4, #12]
 8003bd0:	f8d9 2000 	ldr.w	r2, [r9]
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	42ab      	cmp	r3, r5
 8003bd8:	dc29      	bgt.n	8003c2e <_printf_common+0xa6>
 8003bda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003bde:	6822      	ldr	r2, [r4, #0]
 8003be0:	3300      	adds	r3, #0
 8003be2:	bf18      	it	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	0692      	lsls	r2, r2, #26
 8003be8:	d42e      	bmi.n	8003c48 <_printf_common+0xc0>
 8003bea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bee:	4639      	mov	r1, r7
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	47c0      	blx	r8
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	d021      	beq.n	8003c3c <_printf_common+0xb4>
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	68e5      	ldr	r5, [r4, #12]
 8003bfc:	f003 0306 	and.w	r3, r3, #6
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	bf18      	it	ne
 8003c04:	2500      	movne	r5, #0
 8003c06:	f8d9 2000 	ldr.w	r2, [r9]
 8003c0a:	f04f 0900 	mov.w	r9, #0
 8003c0e:	bf08      	it	eq
 8003c10:	1aad      	subeq	r5, r5, r2
 8003c12:	68a3      	ldr	r3, [r4, #8]
 8003c14:	6922      	ldr	r2, [r4, #16]
 8003c16:	bf08      	it	eq
 8003c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bfc4      	itt	gt
 8003c20:	1a9b      	subgt	r3, r3, r2
 8003c22:	18ed      	addgt	r5, r5, r3
 8003c24:	341a      	adds	r4, #26
 8003c26:	454d      	cmp	r5, r9
 8003c28:	d11a      	bne.n	8003c60 <_printf_common+0xd8>
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	e008      	b.n	8003c40 <_printf_common+0xb8>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	4652      	mov	r2, sl
 8003c32:	4639      	mov	r1, r7
 8003c34:	4630      	mov	r0, r6
 8003c36:	47c0      	blx	r8
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d103      	bne.n	8003c44 <_printf_common+0xbc>
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c44:	3501      	adds	r5, #1
 8003c46:	e7c2      	b.n	8003bce <_printf_common+0x46>
 8003c48:	2030      	movs	r0, #48	; 0x30
 8003c4a:	18e1      	adds	r1, r4, r3
 8003c4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c56:	4422      	add	r2, r4
 8003c58:	3302      	adds	r3, #2
 8003c5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c5e:	e7c4      	b.n	8003bea <_printf_common+0x62>
 8003c60:	2301      	movs	r3, #1
 8003c62:	4622      	mov	r2, r4
 8003c64:	4639      	mov	r1, r7
 8003c66:	4630      	mov	r0, r6
 8003c68:	47c0      	blx	r8
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d0e6      	beq.n	8003c3c <_printf_common+0xb4>
 8003c6e:	f109 0901 	add.w	r9, r9, #1
 8003c72:	e7d8      	b.n	8003c26 <_printf_common+0x9e>

08003c74 <_printf_i>:
 8003c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	7e09      	ldrb	r1, [r1, #24]
 8003c80:	b085      	sub	sp, #20
 8003c82:	296e      	cmp	r1, #110	; 0x6e
 8003c84:	4617      	mov	r7, r2
 8003c86:	4606      	mov	r6, r0
 8003c88:	4698      	mov	r8, r3
 8003c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c8c:	f000 80b3 	beq.w	8003df6 <_printf_i+0x182>
 8003c90:	d822      	bhi.n	8003cd8 <_printf_i+0x64>
 8003c92:	2963      	cmp	r1, #99	; 0x63
 8003c94:	d036      	beq.n	8003d04 <_printf_i+0x90>
 8003c96:	d80a      	bhi.n	8003cae <_printf_i+0x3a>
 8003c98:	2900      	cmp	r1, #0
 8003c9a:	f000 80b9 	beq.w	8003e10 <_printf_i+0x19c>
 8003c9e:	2958      	cmp	r1, #88	; 0x58
 8003ca0:	f000 8083 	beq.w	8003daa <_printf_i+0x136>
 8003ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ca8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003cac:	e032      	b.n	8003d14 <_printf_i+0xa0>
 8003cae:	2964      	cmp	r1, #100	; 0x64
 8003cb0:	d001      	beq.n	8003cb6 <_printf_i+0x42>
 8003cb2:	2969      	cmp	r1, #105	; 0x69
 8003cb4:	d1f6      	bne.n	8003ca4 <_printf_i+0x30>
 8003cb6:	6820      	ldr	r0, [r4, #0]
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	0605      	lsls	r5, r0, #24
 8003cbc:	f103 0104 	add.w	r1, r3, #4
 8003cc0:	d52a      	bpl.n	8003d18 <_printf_i+0xa4>
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6011      	str	r1, [r2, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	da03      	bge.n	8003cd2 <_printf_i+0x5e>
 8003cca:	222d      	movs	r2, #45	; 0x2d
 8003ccc:	425b      	negs	r3, r3
 8003cce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003cd2:	486f      	ldr	r0, [pc, #444]	; (8003e90 <_printf_i+0x21c>)
 8003cd4:	220a      	movs	r2, #10
 8003cd6:	e039      	b.n	8003d4c <_printf_i+0xd8>
 8003cd8:	2973      	cmp	r1, #115	; 0x73
 8003cda:	f000 809d 	beq.w	8003e18 <_printf_i+0x1a4>
 8003cde:	d808      	bhi.n	8003cf2 <_printf_i+0x7e>
 8003ce0:	296f      	cmp	r1, #111	; 0x6f
 8003ce2:	d020      	beq.n	8003d26 <_printf_i+0xb2>
 8003ce4:	2970      	cmp	r1, #112	; 0x70
 8003ce6:	d1dd      	bne.n	8003ca4 <_printf_i+0x30>
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	f043 0320 	orr.w	r3, r3, #32
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	e003      	b.n	8003cfa <_printf_i+0x86>
 8003cf2:	2975      	cmp	r1, #117	; 0x75
 8003cf4:	d017      	beq.n	8003d26 <_printf_i+0xb2>
 8003cf6:	2978      	cmp	r1, #120	; 0x78
 8003cf8:	d1d4      	bne.n	8003ca4 <_printf_i+0x30>
 8003cfa:	2378      	movs	r3, #120	; 0x78
 8003cfc:	4865      	ldr	r0, [pc, #404]	; (8003e94 <_printf_i+0x220>)
 8003cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d02:	e055      	b.n	8003db0 <_printf_i+0x13c>
 8003d04:	6813      	ldr	r3, [r2, #0]
 8003d06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d0a:	1d19      	adds	r1, r3, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6011      	str	r1, [r2, #0]
 8003d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d14:	2301      	movs	r3, #1
 8003d16:	e08c      	b.n	8003e32 <_printf_i+0x1be>
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d1e:	6011      	str	r1, [r2, #0]
 8003d20:	bf18      	it	ne
 8003d22:	b21b      	sxthne	r3, r3
 8003d24:	e7cf      	b.n	8003cc6 <_printf_i+0x52>
 8003d26:	6813      	ldr	r3, [r2, #0]
 8003d28:	6825      	ldr	r5, [r4, #0]
 8003d2a:	1d18      	adds	r0, r3, #4
 8003d2c:	6010      	str	r0, [r2, #0]
 8003d2e:	0628      	lsls	r0, r5, #24
 8003d30:	d501      	bpl.n	8003d36 <_printf_i+0xc2>
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	e002      	b.n	8003d3c <_printf_i+0xc8>
 8003d36:	0668      	lsls	r0, r5, #25
 8003d38:	d5fb      	bpl.n	8003d32 <_printf_i+0xbe>
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	296f      	cmp	r1, #111	; 0x6f
 8003d3e:	bf14      	ite	ne
 8003d40:	220a      	movne	r2, #10
 8003d42:	2208      	moveq	r2, #8
 8003d44:	4852      	ldr	r0, [pc, #328]	; (8003e90 <_printf_i+0x21c>)
 8003d46:	2100      	movs	r1, #0
 8003d48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d4c:	6865      	ldr	r5, [r4, #4]
 8003d4e:	2d00      	cmp	r5, #0
 8003d50:	60a5      	str	r5, [r4, #8]
 8003d52:	f2c0 8095 	blt.w	8003e80 <_printf_i+0x20c>
 8003d56:	6821      	ldr	r1, [r4, #0]
 8003d58:	f021 0104 	bic.w	r1, r1, #4
 8003d5c:	6021      	str	r1, [r4, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d13d      	bne.n	8003dde <_printf_i+0x16a>
 8003d62:	2d00      	cmp	r5, #0
 8003d64:	f040 808e 	bne.w	8003e84 <_printf_i+0x210>
 8003d68:	4665      	mov	r5, ip
 8003d6a:	2a08      	cmp	r2, #8
 8003d6c:	d10b      	bne.n	8003d86 <_printf_i+0x112>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	07db      	lsls	r3, r3, #31
 8003d72:	d508      	bpl.n	8003d86 <_printf_i+0x112>
 8003d74:	6923      	ldr	r3, [r4, #16]
 8003d76:	6862      	ldr	r2, [r4, #4]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	bfde      	ittt	le
 8003d7c:	2330      	movle	r3, #48	; 0x30
 8003d7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003d86:	ebac 0305 	sub.w	r3, ip, r5
 8003d8a:	6123      	str	r3, [r4, #16]
 8003d8c:	f8cd 8000 	str.w	r8, [sp]
 8003d90:	463b      	mov	r3, r7
 8003d92:	aa03      	add	r2, sp, #12
 8003d94:	4621      	mov	r1, r4
 8003d96:	4630      	mov	r0, r6
 8003d98:	f7ff fef6 	bl	8003b88 <_printf_common>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d14d      	bne.n	8003e3c <_printf_i+0x1c8>
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003da4:	b005      	add	sp, #20
 8003da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003daa:	4839      	ldr	r0, [pc, #228]	; (8003e90 <_printf_i+0x21c>)
 8003dac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003db0:	6813      	ldr	r3, [r2, #0]
 8003db2:	6821      	ldr	r1, [r4, #0]
 8003db4:	1d1d      	adds	r5, r3, #4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6015      	str	r5, [r2, #0]
 8003dba:	060a      	lsls	r2, r1, #24
 8003dbc:	d50b      	bpl.n	8003dd6 <_printf_i+0x162>
 8003dbe:	07ca      	lsls	r2, r1, #31
 8003dc0:	bf44      	itt	mi
 8003dc2:	f041 0120 	orrmi.w	r1, r1, #32
 8003dc6:	6021      	strmi	r1, [r4, #0]
 8003dc8:	b91b      	cbnz	r3, 8003dd2 <_printf_i+0x15e>
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	f022 0220 	bic.w	r2, r2, #32
 8003dd0:	6022      	str	r2, [r4, #0]
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	e7b7      	b.n	8003d46 <_printf_i+0xd2>
 8003dd6:	064d      	lsls	r5, r1, #25
 8003dd8:	bf48      	it	mi
 8003dda:	b29b      	uxthmi	r3, r3
 8003ddc:	e7ef      	b.n	8003dbe <_printf_i+0x14a>
 8003dde:	4665      	mov	r5, ip
 8003de0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003de4:	fb02 3311 	mls	r3, r2, r1, r3
 8003de8:	5cc3      	ldrb	r3, [r0, r3]
 8003dea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003dee:	460b      	mov	r3, r1
 8003df0:	2900      	cmp	r1, #0
 8003df2:	d1f5      	bne.n	8003de0 <_printf_i+0x16c>
 8003df4:	e7b9      	b.n	8003d6a <_printf_i+0xf6>
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	6825      	ldr	r5, [r4, #0]
 8003dfa:	1d18      	adds	r0, r3, #4
 8003dfc:	6961      	ldr	r1, [r4, #20]
 8003dfe:	6010      	str	r0, [r2, #0]
 8003e00:	0628      	lsls	r0, r5, #24
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	d501      	bpl.n	8003e0a <_printf_i+0x196>
 8003e06:	6019      	str	r1, [r3, #0]
 8003e08:	e002      	b.n	8003e10 <_printf_i+0x19c>
 8003e0a:	066a      	lsls	r2, r5, #25
 8003e0c:	d5fb      	bpl.n	8003e06 <_printf_i+0x192>
 8003e0e:	8019      	strh	r1, [r3, #0]
 8003e10:	2300      	movs	r3, #0
 8003e12:	4665      	mov	r5, ip
 8003e14:	6123      	str	r3, [r4, #16]
 8003e16:	e7b9      	b.n	8003d8c <_printf_i+0x118>
 8003e18:	6813      	ldr	r3, [r2, #0]
 8003e1a:	1d19      	adds	r1, r3, #4
 8003e1c:	6011      	str	r1, [r2, #0]
 8003e1e:	681d      	ldr	r5, [r3, #0]
 8003e20:	6862      	ldr	r2, [r4, #4]
 8003e22:	2100      	movs	r1, #0
 8003e24:	4628      	mov	r0, r5
 8003e26:	f000 f837 	bl	8003e98 <memchr>
 8003e2a:	b108      	cbz	r0, 8003e30 <_printf_i+0x1bc>
 8003e2c:	1b40      	subs	r0, r0, r5
 8003e2e:	6060      	str	r0, [r4, #4]
 8003e30:	6863      	ldr	r3, [r4, #4]
 8003e32:	6123      	str	r3, [r4, #16]
 8003e34:	2300      	movs	r3, #0
 8003e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e3a:	e7a7      	b.n	8003d8c <_printf_i+0x118>
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	462a      	mov	r2, r5
 8003e40:	4639      	mov	r1, r7
 8003e42:	4630      	mov	r0, r6
 8003e44:	47c0      	blx	r8
 8003e46:	3001      	adds	r0, #1
 8003e48:	d0aa      	beq.n	8003da0 <_printf_i+0x12c>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	079b      	lsls	r3, r3, #30
 8003e4e:	d413      	bmi.n	8003e78 <_printf_i+0x204>
 8003e50:	68e0      	ldr	r0, [r4, #12]
 8003e52:	9b03      	ldr	r3, [sp, #12]
 8003e54:	4298      	cmp	r0, r3
 8003e56:	bfb8      	it	lt
 8003e58:	4618      	movlt	r0, r3
 8003e5a:	e7a3      	b.n	8003da4 <_printf_i+0x130>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	464a      	mov	r2, r9
 8003e60:	4639      	mov	r1, r7
 8003e62:	4630      	mov	r0, r6
 8003e64:	47c0      	blx	r8
 8003e66:	3001      	adds	r0, #1
 8003e68:	d09a      	beq.n	8003da0 <_printf_i+0x12c>
 8003e6a:	3501      	adds	r5, #1
 8003e6c:	68e3      	ldr	r3, [r4, #12]
 8003e6e:	9a03      	ldr	r2, [sp, #12]
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	42ab      	cmp	r3, r5
 8003e74:	dcf2      	bgt.n	8003e5c <_printf_i+0x1e8>
 8003e76:	e7eb      	b.n	8003e50 <_printf_i+0x1dc>
 8003e78:	2500      	movs	r5, #0
 8003e7a:	f104 0919 	add.w	r9, r4, #25
 8003e7e:	e7f5      	b.n	8003e6c <_printf_i+0x1f8>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1ac      	bne.n	8003dde <_printf_i+0x16a>
 8003e84:	7803      	ldrb	r3, [r0, #0]
 8003e86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e8e:	e76c      	b.n	8003d6a <_printf_i+0xf6>
 8003e90:	0800413d 	.word	0x0800413d
 8003e94:	0800414e 	.word	0x0800414e

08003e98 <memchr>:
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	b2c9      	uxtb	r1, r1
 8003e9c:	4402      	add	r2, r0
 8003e9e:	4290      	cmp	r0, r2
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	d101      	bne.n	8003ea8 <memchr+0x10>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e003      	b.n	8003eb0 <memchr+0x18>
 8003ea8:	781c      	ldrb	r4, [r3, #0]
 8003eaa:	3001      	adds	r0, #1
 8003eac:	428c      	cmp	r4, r1
 8003eae:	d1f6      	bne.n	8003e9e <memchr+0x6>
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd10      	pop	{r4, pc}

08003eb4 <memcpy>:
 8003eb4:	b510      	push	{r4, lr}
 8003eb6:	1e43      	subs	r3, r0, #1
 8003eb8:	440a      	add	r2, r1
 8003eba:	4291      	cmp	r1, r2
 8003ebc:	d100      	bne.n	8003ec0 <memcpy+0xc>
 8003ebe:	bd10      	pop	{r4, pc}
 8003ec0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ec4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ec8:	e7f7      	b.n	8003eba <memcpy+0x6>

08003eca <memmove>:
 8003eca:	4288      	cmp	r0, r1
 8003ecc:	b510      	push	{r4, lr}
 8003ece:	eb01 0302 	add.w	r3, r1, r2
 8003ed2:	d807      	bhi.n	8003ee4 <memmove+0x1a>
 8003ed4:	1e42      	subs	r2, r0, #1
 8003ed6:	4299      	cmp	r1, r3
 8003ed8:	d00a      	beq.n	8003ef0 <memmove+0x26>
 8003eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ede:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ee2:	e7f8      	b.n	8003ed6 <memmove+0xc>
 8003ee4:	4283      	cmp	r3, r0
 8003ee6:	d9f5      	bls.n	8003ed4 <memmove+0xa>
 8003ee8:	1881      	adds	r1, r0, r2
 8003eea:	1ad2      	subs	r2, r2, r3
 8003eec:	42d3      	cmn	r3, r2
 8003eee:	d100      	bne.n	8003ef2 <memmove+0x28>
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ef6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003efa:	e7f7      	b.n	8003eec <memmove+0x22>

08003efc <_free_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4605      	mov	r5, r0
 8003f00:	2900      	cmp	r1, #0
 8003f02:	d043      	beq.n	8003f8c <_free_r+0x90>
 8003f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f08:	1f0c      	subs	r4, r1, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bfb8      	it	lt
 8003f0e:	18e4      	addlt	r4, r4, r3
 8003f10:	f000 f8d0 	bl	80040b4 <__malloc_lock>
 8003f14:	4a1e      	ldr	r2, [pc, #120]	; (8003f90 <_free_r+0x94>)
 8003f16:	6813      	ldr	r3, [r2, #0]
 8003f18:	4610      	mov	r0, r2
 8003f1a:	b933      	cbnz	r3, 8003f2a <_free_r+0x2e>
 8003f1c:	6063      	str	r3, [r4, #4]
 8003f1e:	6014      	str	r4, [r2, #0]
 8003f20:	4628      	mov	r0, r5
 8003f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f26:	f000 b8c6 	b.w	80040b6 <__malloc_unlock>
 8003f2a:	42a3      	cmp	r3, r4
 8003f2c:	d90b      	bls.n	8003f46 <_free_r+0x4a>
 8003f2e:	6821      	ldr	r1, [r4, #0]
 8003f30:	1862      	adds	r2, r4, r1
 8003f32:	4293      	cmp	r3, r2
 8003f34:	bf01      	itttt	eq
 8003f36:	681a      	ldreq	r2, [r3, #0]
 8003f38:	685b      	ldreq	r3, [r3, #4]
 8003f3a:	1852      	addeq	r2, r2, r1
 8003f3c:	6022      	streq	r2, [r4, #0]
 8003f3e:	6063      	str	r3, [r4, #4]
 8003f40:	6004      	str	r4, [r0, #0]
 8003f42:	e7ed      	b.n	8003f20 <_free_r+0x24>
 8003f44:	4613      	mov	r3, r2
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	b10a      	cbz	r2, 8003f4e <_free_r+0x52>
 8003f4a:	42a2      	cmp	r2, r4
 8003f4c:	d9fa      	bls.n	8003f44 <_free_r+0x48>
 8003f4e:	6819      	ldr	r1, [r3, #0]
 8003f50:	1858      	adds	r0, r3, r1
 8003f52:	42a0      	cmp	r0, r4
 8003f54:	d10b      	bne.n	8003f6e <_free_r+0x72>
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	4401      	add	r1, r0
 8003f5a:	1858      	adds	r0, r3, r1
 8003f5c:	4282      	cmp	r2, r0
 8003f5e:	6019      	str	r1, [r3, #0]
 8003f60:	d1de      	bne.n	8003f20 <_free_r+0x24>
 8003f62:	6810      	ldr	r0, [r2, #0]
 8003f64:	6852      	ldr	r2, [r2, #4]
 8003f66:	4401      	add	r1, r0
 8003f68:	6019      	str	r1, [r3, #0]
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	e7d8      	b.n	8003f20 <_free_r+0x24>
 8003f6e:	d902      	bls.n	8003f76 <_free_r+0x7a>
 8003f70:	230c      	movs	r3, #12
 8003f72:	602b      	str	r3, [r5, #0]
 8003f74:	e7d4      	b.n	8003f20 <_free_r+0x24>
 8003f76:	6820      	ldr	r0, [r4, #0]
 8003f78:	1821      	adds	r1, r4, r0
 8003f7a:	428a      	cmp	r2, r1
 8003f7c:	bf01      	itttt	eq
 8003f7e:	6811      	ldreq	r1, [r2, #0]
 8003f80:	6852      	ldreq	r2, [r2, #4]
 8003f82:	1809      	addeq	r1, r1, r0
 8003f84:	6021      	streq	r1, [r4, #0]
 8003f86:	6062      	str	r2, [r4, #4]
 8003f88:	605c      	str	r4, [r3, #4]
 8003f8a:	e7c9      	b.n	8003f20 <_free_r+0x24>
 8003f8c:	bd38      	pop	{r3, r4, r5, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000090 	.word	0x20000090

08003f94 <_malloc_r>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	1ccd      	adds	r5, r1, #3
 8003f98:	f025 0503 	bic.w	r5, r5, #3
 8003f9c:	3508      	adds	r5, #8
 8003f9e:	2d0c      	cmp	r5, #12
 8003fa0:	bf38      	it	cc
 8003fa2:	250c      	movcc	r5, #12
 8003fa4:	2d00      	cmp	r5, #0
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	db01      	blt.n	8003fae <_malloc_r+0x1a>
 8003faa:	42a9      	cmp	r1, r5
 8003fac:	d903      	bls.n	8003fb6 <_malloc_r+0x22>
 8003fae:	230c      	movs	r3, #12
 8003fb0:	6033      	str	r3, [r6, #0]
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	bd70      	pop	{r4, r5, r6, pc}
 8003fb6:	f000 f87d 	bl	80040b4 <__malloc_lock>
 8003fba:	4a21      	ldr	r2, [pc, #132]	; (8004040 <_malloc_r+0xac>)
 8003fbc:	6814      	ldr	r4, [r2, #0]
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	b991      	cbnz	r1, 8003fe8 <_malloc_r+0x54>
 8003fc2:	4c20      	ldr	r4, [pc, #128]	; (8004044 <_malloc_r+0xb0>)
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	b91b      	cbnz	r3, 8003fd0 <_malloc_r+0x3c>
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f000 f863 	bl	8004094 <_sbrk_r>
 8003fce:	6020      	str	r0, [r4, #0]
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	f000 f85e 	bl	8004094 <_sbrk_r>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	d124      	bne.n	8004026 <_malloc_r+0x92>
 8003fdc:	230c      	movs	r3, #12
 8003fde:	4630      	mov	r0, r6
 8003fe0:	6033      	str	r3, [r6, #0]
 8003fe2:	f000 f868 	bl	80040b6 <__malloc_unlock>
 8003fe6:	e7e4      	b.n	8003fb2 <_malloc_r+0x1e>
 8003fe8:	680b      	ldr	r3, [r1, #0]
 8003fea:	1b5b      	subs	r3, r3, r5
 8003fec:	d418      	bmi.n	8004020 <_malloc_r+0x8c>
 8003fee:	2b0b      	cmp	r3, #11
 8003ff0:	d90f      	bls.n	8004012 <_malloc_r+0x7e>
 8003ff2:	600b      	str	r3, [r1, #0]
 8003ff4:	18cc      	adds	r4, r1, r3
 8003ff6:	50cd      	str	r5, [r1, r3]
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f000 f85c 	bl	80040b6 <__malloc_unlock>
 8003ffe:	f104 000b 	add.w	r0, r4, #11
 8004002:	1d23      	adds	r3, r4, #4
 8004004:	f020 0007 	bic.w	r0, r0, #7
 8004008:	1ac3      	subs	r3, r0, r3
 800400a:	d0d3      	beq.n	8003fb4 <_malloc_r+0x20>
 800400c:	425a      	negs	r2, r3
 800400e:	50e2      	str	r2, [r4, r3]
 8004010:	e7d0      	b.n	8003fb4 <_malloc_r+0x20>
 8004012:	684b      	ldr	r3, [r1, #4]
 8004014:	428c      	cmp	r4, r1
 8004016:	bf16      	itet	ne
 8004018:	6063      	strne	r3, [r4, #4]
 800401a:	6013      	streq	r3, [r2, #0]
 800401c:	460c      	movne	r4, r1
 800401e:	e7eb      	b.n	8003ff8 <_malloc_r+0x64>
 8004020:	460c      	mov	r4, r1
 8004022:	6849      	ldr	r1, [r1, #4]
 8004024:	e7cc      	b.n	8003fc0 <_malloc_r+0x2c>
 8004026:	1cc4      	adds	r4, r0, #3
 8004028:	f024 0403 	bic.w	r4, r4, #3
 800402c:	42a0      	cmp	r0, r4
 800402e:	d005      	beq.n	800403c <_malloc_r+0xa8>
 8004030:	1a21      	subs	r1, r4, r0
 8004032:	4630      	mov	r0, r6
 8004034:	f000 f82e 	bl	8004094 <_sbrk_r>
 8004038:	3001      	adds	r0, #1
 800403a:	d0cf      	beq.n	8003fdc <_malloc_r+0x48>
 800403c:	6025      	str	r5, [r4, #0]
 800403e:	e7db      	b.n	8003ff8 <_malloc_r+0x64>
 8004040:	20000090 	.word	0x20000090
 8004044:	20000094 	.word	0x20000094

08004048 <_realloc_r>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	4607      	mov	r7, r0
 800404c:	4614      	mov	r4, r2
 800404e:	460e      	mov	r6, r1
 8004050:	b921      	cbnz	r1, 800405c <_realloc_r+0x14>
 8004052:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004056:	4611      	mov	r1, r2
 8004058:	f7ff bf9c 	b.w	8003f94 <_malloc_r>
 800405c:	b922      	cbnz	r2, 8004068 <_realloc_r+0x20>
 800405e:	f7ff ff4d 	bl	8003efc <_free_r>
 8004062:	4625      	mov	r5, r4
 8004064:	4628      	mov	r0, r5
 8004066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004068:	f000 f826 	bl	80040b8 <_malloc_usable_size_r>
 800406c:	42a0      	cmp	r0, r4
 800406e:	d20f      	bcs.n	8004090 <_realloc_r+0x48>
 8004070:	4621      	mov	r1, r4
 8004072:	4638      	mov	r0, r7
 8004074:	f7ff ff8e 	bl	8003f94 <_malloc_r>
 8004078:	4605      	mov	r5, r0
 800407a:	2800      	cmp	r0, #0
 800407c:	d0f2      	beq.n	8004064 <_realloc_r+0x1c>
 800407e:	4631      	mov	r1, r6
 8004080:	4622      	mov	r2, r4
 8004082:	f7ff ff17 	bl	8003eb4 <memcpy>
 8004086:	4631      	mov	r1, r6
 8004088:	4638      	mov	r0, r7
 800408a:	f7ff ff37 	bl	8003efc <_free_r>
 800408e:	e7e9      	b.n	8004064 <_realloc_r+0x1c>
 8004090:	4635      	mov	r5, r6
 8004092:	e7e7      	b.n	8004064 <_realloc_r+0x1c>

08004094 <_sbrk_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	2300      	movs	r3, #0
 8004098:	4c05      	ldr	r4, [pc, #20]	; (80040b0 <_sbrk_r+0x1c>)
 800409a:	4605      	mov	r5, r0
 800409c:	4608      	mov	r0, r1
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	f7fd f8ac 	bl	80011fc <_sbrk>
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	d102      	bne.n	80040ae <_sbrk_r+0x1a>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	b103      	cbz	r3, 80040ae <_sbrk_r+0x1a>
 80040ac:	602b      	str	r3, [r5, #0]
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
 80040b0:	20000130 	.word	0x20000130

080040b4 <__malloc_lock>:
 80040b4:	4770      	bx	lr

080040b6 <__malloc_unlock>:
 80040b6:	4770      	bx	lr

080040b8 <_malloc_usable_size_r>:
 80040b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040bc:	1f18      	subs	r0, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bfbc      	itt	lt
 80040c2:	580b      	ldrlt	r3, [r1, r0]
 80040c4:	18c0      	addlt	r0, r0, r3
 80040c6:	4770      	bx	lr

080040c8 <_init>:
 80040c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ca:	bf00      	nop
 80040cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ce:	bc08      	pop	{r3}
 80040d0:	469e      	mov	lr, r3
 80040d2:	4770      	bx	lr

080040d4 <_fini>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	bf00      	nop
 80040d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040da:	bc08      	pop	{r3}
 80040dc:	469e      	mov	lr, r3
 80040de:	4770      	bx	lr
