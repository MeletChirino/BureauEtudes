
WifiModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042bc  080042bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042c4  080042c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000070  0800433c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  0800433c  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8c5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dd0  00000000  00000000  0002b95e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  0002d730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000918  00000000  00000000  0002e128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002867  00000000  00000000  0002ea40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094f2  00000000  00000000  000312a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085d0b  00000000  00000000  0003a799  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c04a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b40  00000000  00000000  000c0520  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080040ec 	.word	0x080040ec

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080040ec 	.word	0x080040ec

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800019c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a0:	f000 b974 	b.w	800048c <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	468c      	mov	ip, r1
 80001c2:	4604      	mov	r4, r0
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d14b      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4615      	mov	r5, r2
 80001ce:	d967      	bls.n	80002a0 <__udivmoddi4+0xe4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0720 	rsb	r7, r2, #32
 80001da:	fa01 f302 	lsl.w	r3, r1, r2
 80001de:	fa20 f707 	lsr.w	r7, r0, r7
 80001e2:	4095      	lsls	r5, r2
 80001e4:	ea47 0c03 	orr.w	ip, r7, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001ee:	fbbc f7fe 	udiv	r7, ip, lr
 80001f2:	fa1f f885 	uxth.w	r8, r5
 80001f6:	fb0e c317 	mls	r3, lr, r7, ip
 80001fa:	fb07 f908 	mul.w	r9, r7, r8
 80001fe:	0c21      	lsrs	r1, r4, #16
 8000200:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000204:	4599      	cmp	r9, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18eb      	adds	r3, r5, r3
 800020a:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 800020e:	f080 811c 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000212:	4599      	cmp	r9, r3
 8000214:	f240 8119 	bls.w	800044a <__udivmoddi4+0x28e>
 8000218:	3f02      	subs	r7, #2
 800021a:	442b      	add	r3, r5
 800021c:	eba3 0309 	sub.w	r3, r3, r9
 8000220:	fbb3 f0fe 	udiv	r0, r3, lr
 8000224:	fb0e 3310 	mls	r3, lr, r0, r3
 8000228:	fb00 f108 	mul.w	r1, r0, r8
 800022c:	b2a4      	uxth	r4, r4
 800022e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000232:	42a1      	cmp	r1, r4
 8000234:	d909      	bls.n	800024a <__udivmoddi4+0x8e>
 8000236:	192c      	adds	r4, r5, r4
 8000238:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023c:	f080 8107 	bcs.w	800044e <__udivmoddi4+0x292>
 8000240:	42a1      	cmp	r1, r4
 8000242:	f240 8104 	bls.w	800044e <__udivmoddi4+0x292>
 8000246:	3802      	subs	r0, #2
 8000248:	442c      	add	r4, r5
 800024a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024e:	2700      	movs	r7, #0
 8000250:	1a64      	subs	r4, r4, r1
 8000252:	b11e      	cbz	r6, 800025c <__udivmoddi4+0xa0>
 8000254:	2300      	movs	r3, #0
 8000256:	40d4      	lsrs	r4, r2
 8000258:	e9c6 4300 	strd	r4, r3, [r6]
 800025c:	4639      	mov	r1, r7
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0xbe>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80ec 	beq.w	8000444 <__udivmoddi4+0x288>
 800026c:	2700      	movs	r7, #0
 800026e:	e9c6 0100 	strd	r0, r1, [r6]
 8000272:	4638      	mov	r0, r7
 8000274:	4639      	mov	r1, r7
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f783 	clz	r7, r3
 800027e:	2f00      	cmp	r7, #0
 8000280:	d148      	bne.n	8000314 <__udivmoddi4+0x158>
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd0>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80fb 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb61 0303 	sbc.w	r3, r1, r3
 8000292:	2001      	movs	r0, #1
 8000294:	469c      	mov	ip, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e0      	beq.n	800025c <__udivmoddi4+0xa0>
 800029a:	e9c6 4c00 	strd	r4, ip, [r6]
 800029e:	e7dd      	b.n	800025c <__udivmoddi4+0xa0>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xe8>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 808f 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ae:	2701      	movs	r7, #1
 80002b0:	1b49      	subs	r1, r1, r5
 80002b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002b6:	fa1f f985 	uxth.w	r9, r5
 80002ba:	fbb1 fef8 	udiv	lr, r1, r8
 80002be:	fb08 111e 	mls	r1, r8, lr, r1
 80002c2:	fb09 f00e 	mul.w	r0, r9, lr
 80002c6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ca:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002ce:	4298      	cmp	r0, r3
 80002d0:	d907      	bls.n	80002e2 <__udivmoddi4+0x126>
 80002d2:	18eb      	adds	r3, r5, r3
 80002d4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x124>
 80002da:	4298      	cmp	r0, r3
 80002dc:	f200 80cd 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002e0:	468e      	mov	lr, r1
 80002e2:	1a1b      	subs	r3, r3, r0
 80002e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ec:	fb09 f900 	mul.w	r9, r9, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	d907      	bls.n	800030a <__udivmoddi4+0x14e>
 80002fa:	192c      	adds	r4, r5, r4
 80002fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x14c>
 8000302:	45a1      	cmp	r9, r4
 8000304:	f200 80b6 	bhi.w	8000474 <__udivmoddi4+0x2b8>
 8000308:	4618      	mov	r0, r3
 800030a:	eba4 0409 	sub.w	r4, r4, r9
 800030e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000312:	e79e      	b.n	8000252 <__udivmoddi4+0x96>
 8000314:	f1c7 0520 	rsb	r5, r7, #32
 8000318:	40bb      	lsls	r3, r7
 800031a:	fa22 fc05 	lsr.w	ip, r2, r5
 800031e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000322:	fa21 f405 	lsr.w	r4, r1, r5
 8000326:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800032a:	fbb4 f9fe 	udiv	r9, r4, lr
 800032e:	fa1f f88c 	uxth.w	r8, ip
 8000332:	fb0e 4419 	mls	r4, lr, r9, r4
 8000336:	fa20 f305 	lsr.w	r3, r0, r5
 800033a:	40b9      	lsls	r1, r7
 800033c:	fb09 fa08 	mul.w	sl, r9, r8
 8000340:	4319      	orrs	r1, r3
 8000342:	0c0b      	lsrs	r3, r1, #16
 8000344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000348:	45a2      	cmp	sl, r4
 800034a:	fa02 f207 	lsl.w	r2, r2, r7
 800034e:	fa00 f307 	lsl.w	r3, r0, r7
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800035c:	f080 8088 	bcs.w	8000470 <__udivmoddi4+0x2b4>
 8000360:	45a2      	cmp	sl, r4
 8000362:	f240 8085 	bls.w	8000470 <__udivmoddi4+0x2b4>
 8000366:	f1a9 0902 	sub.w	r9, r9, #2
 800036a:	4464      	add	r4, ip
 800036c:	eba4 040a 	sub.w	r4, r4, sl
 8000370:	fbb4 f0fe 	udiv	r0, r4, lr
 8000374:	fb0e 4410 	mls	r4, lr, r0, r4
 8000378:	fb00 fa08 	mul.w	sl, r0, r8
 800037c:	b289      	uxth	r1, r1
 800037e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000382:	45a2      	cmp	sl, r4
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x1dc>
 8000386:	eb1c 0404 	adds.w	r4, ip, r4
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038e:	d26b      	bcs.n	8000468 <__udivmoddi4+0x2ac>
 8000390:	45a2      	cmp	sl, r4
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0x2ac>
 8000394:	3802      	subs	r0, #2
 8000396:	4464      	add	r4, ip
 8000398:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039c:	fba0 8902 	umull	r8, r9, r0, r2
 80003a0:	eba4 040a 	sub.w	r4, r4, sl
 80003a4:	454c      	cmp	r4, r9
 80003a6:	4641      	mov	r1, r8
 80003a8:	46ce      	mov	lr, r9
 80003aa:	d354      	bcc.n	8000456 <__udivmoddi4+0x29a>
 80003ac:	d051      	beq.n	8000452 <__udivmoddi4+0x296>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d069      	beq.n	8000486 <__udivmoddi4+0x2ca>
 80003b2:	1a5a      	subs	r2, r3, r1
 80003b4:	eb64 040e 	sbc.w	r4, r4, lr
 80003b8:	fa04 f505 	lsl.w	r5, r4, r5
 80003bc:	fa22 f307 	lsr.w	r3, r2, r7
 80003c0:	40fc      	lsrs	r4, r7
 80003c2:	431d      	orrs	r5, r3
 80003c4:	e9c6 5400 	strd	r5, r4, [r6]
 80003c8:	2700      	movs	r7, #0
 80003ca:	e747      	b.n	800025c <__udivmoddi4+0xa0>
 80003cc:	4095      	lsls	r5, r2
 80003ce:	f1c2 0320 	rsb	r3, r2, #32
 80003d2:	fa21 f003 	lsr.w	r0, r1, r3
 80003d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003da:	fbb0 f7f8 	udiv	r7, r0, r8
 80003de:	fa1f f985 	uxth.w	r9, r5
 80003e2:	fb08 0017 	mls	r0, r8, r7, r0
 80003e6:	fa24 f303 	lsr.w	r3, r4, r3
 80003ea:	4091      	lsls	r1, r2
 80003ec:	fb07 fc09 	mul.w	ip, r7, r9
 80003f0:	430b      	orrs	r3, r1
 80003f2:	0c19      	lsrs	r1, r3, #16
 80003f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f8:	458c      	cmp	ip, r1
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d907      	bls.n	8000410 <__udivmoddi4+0x254>
 8000400:	1869      	adds	r1, r5, r1
 8000402:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000406:	d231      	bcs.n	800046c <__udivmoddi4+0x2b0>
 8000408:	458c      	cmp	ip, r1
 800040a:	d92f      	bls.n	800046c <__udivmoddi4+0x2b0>
 800040c:	3f02      	subs	r7, #2
 800040e:	4429      	add	r1, r5
 8000410:	eba1 010c 	sub.w	r1, r1, ip
 8000414:	fbb1 f0f8 	udiv	r0, r1, r8
 8000418:	fb08 1c10 	mls	ip, r8, r0, r1
 800041c:	fb00 fe09 	mul.w	lr, r0, r9
 8000420:	b299      	uxth	r1, r3
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	458e      	cmp	lr, r1
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x27e>
 800042a:	1869      	adds	r1, r5, r1
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000430:	d218      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 8000432:	458e      	cmp	lr, r1
 8000434:	d916      	bls.n	8000464 <__udivmoddi4+0x2a8>
 8000436:	3802      	subs	r0, #2
 8000438:	4429      	add	r1, r5
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000442:	e73a      	b.n	80002ba <__udivmoddi4+0xfe>
 8000444:	4637      	mov	r7, r6
 8000446:	4630      	mov	r0, r6
 8000448:	e708      	b.n	800025c <__udivmoddi4+0xa0>
 800044a:	460f      	mov	r7, r1
 800044c:	e6e6      	b.n	800021c <__udivmoddi4+0x60>
 800044e:	4618      	mov	r0, r3
 8000450:	e6fb      	b.n	800024a <__udivmoddi4+0x8e>
 8000452:	4543      	cmp	r3, r8
 8000454:	d2ab      	bcs.n	80003ae <__udivmoddi4+0x1f2>
 8000456:	ebb8 0102 	subs.w	r1, r8, r2
 800045a:	eb69 020c 	sbc.w	r2, r9, ip
 800045e:	3801      	subs	r0, #1
 8000460:	4696      	mov	lr, r2
 8000462:	e7a4      	b.n	80003ae <__udivmoddi4+0x1f2>
 8000464:	4618      	mov	r0, r3
 8000466:	e7e8      	b.n	800043a <__udivmoddi4+0x27e>
 8000468:	4608      	mov	r0, r1
 800046a:	e795      	b.n	8000398 <__udivmoddi4+0x1dc>
 800046c:	4607      	mov	r7, r0
 800046e:	e7cf      	b.n	8000410 <__udivmoddi4+0x254>
 8000470:	4681      	mov	r9, r0
 8000472:	e77b      	b.n	800036c <__udivmoddi4+0x1b0>
 8000474:	3802      	subs	r0, #2
 8000476:	442c      	add	r4, r5
 8000478:	e747      	b.n	800030a <__udivmoddi4+0x14e>
 800047a:	f1ae 0e02 	sub.w	lr, lr, #2
 800047e:	442b      	add	r3, r5
 8000480:	e72f      	b.n	80002e2 <__udivmoddi4+0x126>
 8000482:	4638      	mov	r0, r7
 8000484:	e707      	b.n	8000296 <__udivmoddi4+0xda>
 8000486:	4637      	mov	r7, r6
 8000488:	e6e8      	b.n	800025c <__udivmoddi4+0xa0>
 800048a:	bf00      	nop

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08a      	sub	sp, #40	; 0x28
 8000494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b30      	ldr	r3, [pc, #192]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a2f      	ldr	r2, [pc, #188]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 0304 	and.w	r3, r3, #4
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a29      	ldr	r2, [pc, #164]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004c4:	f043 0320 	orr.w	r3, r3, #32
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b27      	ldr	r3, [pc, #156]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 0320 	and.w	r3, r3, #32
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b24      	ldr	r3, [pc, #144]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a23      	ldr	r2, [pc, #140]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b21      	ldr	r3, [pc, #132]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a1d      	ldr	r2, [pc, #116]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	4818      	ldr	r0, [pc, #96]	; (800056c <MX_GPIO_Init+0xdc>)
 800050c:	f001 f9c1 	bl	8001892 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_GPIO_Init+0xe0>)
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	4619      	mov	r1, r3
 8000524:	4813      	ldr	r0, [pc, #76]	; (8000574 <MX_GPIO_Init+0xe4>)
 8000526:	f001 f80f 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800052a:	2320      	movs	r3, #32
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4619      	mov	r1, r3
 8000540:	480a      	ldr	r0, [pc, #40]	; (800056c <MX_GPIO_Init+0xdc>)
 8000542:	f001 f801 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000546:	2320      	movs	r3, #32
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	4807      	ldr	r0, [pc, #28]	; (8000578 <MX_GPIO_Init+0xe8>)
 800055a:	f000 fff5 	bl	8001548 <HAL_GPIO_Init>

}
 800055e:	bf00      	nop
 8000560:	3728      	adds	r7, #40	; 0x28
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800
 800056c:	40020000 	.word	0x40020000
 8000570:	10110000 	.word	0x10110000
 8000574:	40020800 	.word	0x40020800
 8000578:	40020400 	.word	0x40020400

0800057c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2C1_Init+0x50>)
 8000582:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <MX_I2C1_Init+0x54>)
 8000584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2C1_Init+0x50>)
 8000588:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <MX_I2C1_Init+0x58>)
 800058a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2C1_Init+0x50>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_I2C1_Init+0x50>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_I2C1_Init+0x50>)
 800059a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800059e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_I2C1_Init+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_I2C1_Init+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_I2C1_Init+0x50>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_I2C1_Init+0x50>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_I2C1_Init+0x50>)
 80005ba:	f001 f983 	bl	80018c4 <HAL_I2C_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005c4:	f000 fc44 	bl	8000e50 <Error_Handler>
  }

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000a4 	.word	0x200000a4
 80005d0:	40005400 	.word	0x40005400
 80005d4:	000186a0 	.word	0x000186a0

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a17      	ldr	r2, [pc, #92]	; (8000654 <HAL_I2C_MspInit+0x7c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d128      	bne.n	800064c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_I2C_MspInit+0x80>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a16      	ldr	r2, [pc, #88]	; (8000658 <HAL_I2C_MspInit+0x80>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <HAL_I2C_MspInit+0x80>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000612:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000618:	2312      	movs	r3, #18
 800061a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000624:	2304      	movs	r3, #4
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000630:	f000 ff8a 	bl	8001548 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_I2C_MspInit+0x80>)
 8000636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <HAL_I2C_MspInit+0x80>)
 800063a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800063e:	6253      	str	r3, [r2, #36]	; 0x24
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_I2C_MspInit+0x80>)
 8000642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40005400 	.word	0x40005400
 8000658:	40023800 	.word	0x40023800
 800065c:	40020400 	.word	0x40020400

08000660 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af02      	add	r7, sp, #8
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	f043 030c 	orr.w	r3, r3, #12
 8000676:	b2da      	uxtb	r2, r3
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	f043 0320 	orr.w	r3, r3, #32
 8000688:	b2db      	uxtb	r3, r3
 800068a:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 800068c:	f107 0118 	add.w	r1, r7, #24
 8000690:	230a      	movs	r3, #10
 8000692:	2202      	movs	r2, #2
 8000694:	486c      	ldr	r0, [pc, #432]	; (8000848 <lcd_init+0x1e8>)
 8000696:	f002 fc8e 	bl	8002fb6 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800069a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800069e:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80006a0:	f107 0114 	add.w	r1, r7, #20
 80006a4:	230a      	movs	r3, #10
 80006a6:	2202      	movs	r2, #2
 80006a8:	4867      	ldr	r0, [pc, #412]	; (8000848 <lcd_init+0x1e8>)
 80006aa:	f002 fc84 	bl	8002fb6 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80006ae:	2364      	movs	r3, #100	; 0x64
 80006b0:	2205      	movs	r2, #5
 80006b2:	217c      	movs	r1, #124	; 0x7c
 80006b4:	69f8      	ldr	r0, [r7, #28]
 80006b6:	f001 fb3b 	bl	8001d30 <HAL_I2C_IsDeviceReady>
 80006ba:	4603      	mov	r3, r0
 80006bc:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80006be:	f107 0113 	add.w	r1, r7, #19
 80006c2:	230a      	movs	r3, #10
 80006c4:	2201      	movs	r2, #1
 80006c6:	4860      	ldr	r0, [pc, #384]	; (8000848 <lcd_init+0x1e8>)
 80006c8:	f002 fc75 	bl	8002fb6 <HAL_UART_Transmit>
	HAL_Delay(50);
 80006cc:	2032      	movs	r0, #50	; 0x32
 80006ce:	f000 fdcb 	bl	8001268 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80006d2:	f107 0218 	add.w	r2, r7, #24
 80006d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	217c      	movs	r1, #124	; 0x7c
 80006e0:	69f8      	ldr	r0, [r7, #28]
 80006e2:	f001 fa27 	bl	8001b34 <HAL_I2C_Master_Transmit>
 80006e6:	4603      	mov	r3, r0
 80006e8:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80006ea:	f107 0112 	add.w	r1, r7, #18
 80006ee:	230a      	movs	r3, #10
 80006f0:	2201      	movs	r2, #1
 80006f2:	4855      	ldr	r0, [pc, #340]	; (8000848 <lcd_init+0x1e8>)
 80006f4:	f002 fc5f 	bl	8002fb6 <HAL_UART_Transmit>
	HAL_Delay(50);
 80006f8:	2032      	movs	r0, #50	; 0x32
 80006fa:	f000 fdb5 	bl	8001268 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80006fe:	f107 0218 	add.w	r2, r7, #24
 8000702:	f241 3388 	movw	r3, #5000	; 0x1388
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2302      	movs	r3, #2
 800070a:	217c      	movs	r1, #124	; 0x7c
 800070c:	69f8      	ldr	r0, [r7, #28]
 800070e:	f001 fa11 	bl	8001b34 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000712:	2005      	movs	r0, #5
 8000714:	f000 fda8 	bl	8001268 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000718:	f107 0218 	add.w	r2, r7, #24
 800071c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2302      	movs	r3, #2
 8000724:	217c      	movs	r1, #124	; 0x7c
 8000726:	69f8      	ldr	r0, [r7, #28]
 8000728:	f001 fa04 	bl	8001b34 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	2204      	movs	r2, #4
 8000730:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	785b      	ldrb	r3, [r3, #1]
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	b2db      	uxtb	r3, r3
 800073c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800073e:	f107 0218 	add.w	r2, r7, #24
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2302      	movs	r3, #2
 800074a:	217c      	movs	r1, #124	; 0x7c
 800074c:	69f8      	ldr	r0, [r7, #28]
 800074e:	f001 f9f1 	bl	8001b34 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8000752:	2301      	movs	r3, #1
 8000754:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000756:	f107 0218 	add.w	r2, r7, #24
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2302      	movs	r3, #2
 8000762:	217c      	movs	r1, #124	; 0x7c
 8000764:	69f8      	ldr	r0, [r7, #28]
 8000766:	f001 f9e5 	bl	8001b34 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800076a:	2002      	movs	r0, #2
 800076c:	f000 fd7c 	bl	8001268 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2202      	movs	r2, #2
 8000774:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	789b      	ldrb	r3, [r3, #2]
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	b2db      	uxtb	r3, r3
 8000780:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000782:	f107 0218 	add.w	r2, r7, #24
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2302      	movs	r3, #2
 800078e:	217c      	movs	r1, #124	; 0x7c
 8000790:	69f8      	ldr	r0, [r7, #28]
 8000792:	f001 f9cf 	bl	8001b34 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8000796:	2300      	movs	r3, #0
 8000798:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800079e:	f107 0210 	add.w	r2, r7, #16
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2302      	movs	r3, #2
 80007aa:	21c4      	movs	r1, #196	; 0xc4
 80007ac:	69f8      	ldr	r0, [r7, #28]
 80007ae:	f001 f9c1 	bl	8001b34 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80007b2:	2308      	movs	r3, #8
 80007b4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80007b6:	23ff      	movs	r3, #255	; 0xff
 80007b8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80007ba:	f107 0210 	add.w	r2, r7, #16
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2302      	movs	r3, #2
 80007c6:	21c4      	movs	r1, #196	; 0xc4
 80007c8:	69f8      	ldr	r0, [r7, #28]
 80007ca:	f001 f9b3 	bl	8001b34 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80007ce:	2301      	movs	r3, #1
 80007d0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80007d2:	2320      	movs	r3, #32
 80007d4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80007d6:	f107 0210 	add.w	r2, r7, #16
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2302      	movs	r3, #2
 80007e2:	21c4      	movs	r1, #196	; 0xc4
 80007e4:	69f8      	ldr	r0, [r7, #28]
 80007e6:	f001 f9a5 	bl	8001b34 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80007ea:	2304      	movs	r3, #4
 80007ec:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80007ee:	23ff      	movs	r3, #255	; 0xff
 80007f0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80007f2:	f107 020c 	add.w	r2, r7, #12
 80007f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	21c4      	movs	r1, #196	; 0xc4
 8000800:	69f8      	ldr	r0, [r7, #28]
 8000802:	f001 f997 	bl	8001b34 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000806:	2303      	movs	r3, #3
 8000808:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800080a:	23ff      	movs	r3, #255	; 0xff
 800080c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800080e:	f107 020c 	add.w	r2, r7, #12
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2302      	movs	r3, #2
 800081a:	21c4      	movs	r1, #196	; 0xc4
 800081c:	69f8      	ldr	r0, [r7, #28]
 800081e:	f001 f989 	bl	8001b34 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000822:	2302      	movs	r3, #2
 8000824:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000826:	23ff      	movs	r3, #255	; 0xff
 8000828:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800082a:	f107 020c 	add.w	r2, r7, #12
 800082e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2302      	movs	r3, #2
 8000836:	21c4      	movs	r1, #196	; 0xc4
 8000838:	69f8      	ldr	r0, [r7, #28]
 800083a:	f001 f97b 	bl	8001b34 <HAL_I2C_Master_Transmit>


}
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000240 	.word	0x20000240

0800084c <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <clearlcd+0x2c>)
 8000856:	f000 f83b 	bl	80008d0 <lcd_position>
	lcd_print(&hi2c1,"                ");
 800085a:	4908      	ldr	r1, [pc, #32]	; (800087c <clearlcd+0x30>)
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <clearlcd+0x2c>)
 800085e:	f000 f80f 	bl	8000880 <lcd_print>
	lcd_position(&hi2c1,0,1);
 8000862:	2201      	movs	r2, #1
 8000864:	2100      	movs	r1, #0
 8000866:	4804      	ldr	r0, [pc, #16]	; (8000878 <clearlcd+0x2c>)
 8000868:	f000 f832 	bl	80008d0 <lcd_position>
	lcd_print(&hi2c1,"                ");
 800086c:	4903      	ldr	r1, [pc, #12]	; (800087c <clearlcd+0x30>)
 800086e:	4802      	ldr	r0, [pc, #8]	; (8000878 <clearlcd+0x2c>)
 8000870:	f000 f806 	bl	8000880 <lcd_print>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000a4 	.word	0x200000a4
 800087c:	08004104 	.word	0x08004104

08000880 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 800088e:	2340      	movs	r3, #64	; 0x40
 8000890:	733b      	strb	r3, [r7, #12]
    int i=0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000896:	e011      	b.n	80008bc <lcd_print+0x3c>
    {
            data[1] = str[i];
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80008a2:	f107 020c 	add.w	r2, r7, #12
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2302      	movs	r3, #2
 80008ae:	217c      	movs	r1, #124	; 0x7c
 80008b0:	6938      	ldr	r0, [r7, #16]
 80008b2:	f001 f93f 	bl	8001b34 <HAL_I2C_Master_Transmit>
            i++;
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3301      	adds	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	4413      	add	r3, r2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1e7      	bne.n	8000898 <lcd_print+0x18>
   }
}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
 80008dc:	4613      	mov	r3, r2
 80008de:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d104      	bne.n	80008f4 <lcd_position+0x24>
    {
        col = col | 0x80;
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f0:	70fb      	strb	r3, [r7, #3]
 80008f2:	e003      	b.n	80008fc <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80008fa:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000904:	f107 0208 	add.w	r2, r7, #8
 8000908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2302      	movs	r3, #2
 8000910:	217c      	movs	r1, #124	; 0x7c
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f001 f90e 	bl	8001b34 <HAL_I2C_Master_Transmit>
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af02      	add	r7, sp, #8
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
 800092a:	460b      	mov	r3, r1
 800092c:	71bb      	strb	r3, [r7, #6]
 800092e:	4613      	mov	r3, r2
 8000930:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <reglagecouleur+0x74>)
 8000934:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8000936:	2304      	movs	r3, #4
 8000938:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 800093e:	f107 0210 	add.w	r2, r7, #16
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2302      	movs	r3, #2
 800094a:	21c4      	movs	r1, #196	; 0xc4
 800094c:	6978      	ldr	r0, [r7, #20]
 800094e:	f001 f8f1 	bl	8001b34 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8000952:	2303      	movs	r3, #3
 8000954:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8000956:	79bb      	ldrb	r3, [r7, #6]
 8000958:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 800095a:	f107 020c 	add.w	r2, r7, #12
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2302      	movs	r3, #2
 8000966:	21c4      	movs	r1, #196	; 0xc4
 8000968:	6978      	ldr	r0, [r7, #20]
 800096a:	f001 f8e3 	bl	8001b34 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 800096e:	2302      	movs	r3, #2
 8000970:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8000972:	797b      	ldrb	r3, [r7, #5]
 8000974:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8000976:	f107 0208 	add.w	r2, r7, #8
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2302      	movs	r3, #2
 8000982:	21c4      	movs	r1, #196	; 0xc4
 8000984:	6978      	ldr	r0, [r7, #20]
 8000986:	f001 f8d5 	bl	8001b34 <HAL_I2C_Master_Transmit>
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000a4 	.word	0x200000a4

08000998 <HAL_UART_RxCpltCallback>:
char old_input_string2[40];
char input_buffer[40];
int input_i = 0;
int flag=0; input_complete=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	input_raw[input_i] = (char*)rx_buffer[0];
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a20      	ldr	r2, [pc, #128]	; (8000a28 <HAL_UART_RxCpltCallback+0x90>)
 80009a6:	7811      	ldrb	r1, [r2, #0]
 80009a8:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <HAL_UART_RxCpltCallback+0x94>)
 80009aa:	54d1      	strb	r1, [r2, r3]

	input_buffer[input_i] = (char*)rx_buffer[0];
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_UART_RxCpltCallback+0x90>)
 80009b2:	7811      	ldrb	r1, [r2, #0]
 80009b4:	4a1e      	ldr	r2, [pc, #120]	; (8000a30 <HAL_UART_RxCpltCallback+0x98>)
 80009b6:	54d1      	strb	r1, [r2, r3]
	if(input_buffer[input_i] == '\n' ){
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <HAL_UART_RxCpltCallback+0x98>)
 80009be:	5cd3      	ldrb	r3, [r2, r3]
 80009c0:	2b0a      	cmp	r3, #10
 80009c2:	d122      	bne.n	8000a0a <HAL_UART_RxCpltCallback+0x72>
		input_complete = 1;//activa el flag 2
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <HAL_UART_RxCpltCallback+0x9c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
		input_i = 0;//reinicia el indice del input string
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < 40; i++){
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e010      	b.n	80009f8 <HAL_UART_RxCpltCallback+0x60>
			input_string[i] = input_buffer[i];
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <HAL_UART_RxCpltCallback+0x98>)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	7819      	ldrb	r1, [r3, #0]
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <HAL_UART_RxCpltCallback+0xa0>)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	701a      	strb	r2, [r3, #0]
			input_buffer[i]=0;//reinicia el input buffer
 80009e8:	4a11      	ldr	r2, [pc, #68]	; (8000a30 <HAL_UART_RxCpltCallback+0x98>)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	4413      	add	r3, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 40; i++){
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b27      	cmp	r3, #39	; 0x27
 80009fc:	ddeb      	ble.n	80009d6 <HAL_UART_RxCpltCallback+0x3e>
		}
		HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 80009fe:	2201      	movs	r2, #1
 8000a00:	4909      	ldr	r1, [pc, #36]	; (8000a28 <HAL_UART_RxCpltCallback+0x90>)
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <HAL_UART_RxCpltCallback+0xa4>)
 8000a04:	f002 fb70 	bl	80030e8 <HAL_UART_Receive_IT>
		return 0;
 8000a08:	e009      	b.n	8000a1e <HAL_UART_RxCpltCallback+0x86>
	}
	input_i++;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 8000a12:	6013      	str	r3, [r2, #0]
	//si el buffer no trae ni \n ni \r entonces guarda el elemento del  buffer en el indice de input string
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	4904      	ldr	r1, [pc, #16]	; (8000a28 <HAL_UART_RxCpltCallback+0x90>)
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <HAL_UART_RxCpltCallback+0xa4>)
 8000a1a:	f002 fb65 	bl	80030e8 <HAL_UART_Receive_IT>
}
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000090 	.word	0x20000090
 8000a28:	20000120 	.word	0x20000120
 8000a2c:	2000014c 	.word	0x2000014c
 8000a30:	20000124 	.word	0x20000124
 8000a34:	20000094 	.word	0x20000094
 8000a38:	200000f8 	.word	0x200000f8
 8000a3c:	20000200 	.word	0x20000200

08000a40 <print_lcd2>:
		  lcd_print(&hi2c1, "connected");
		  reglagecouleur(0,255,0);
	  }*/

}
void print_lcd2(char line_1[16], char line_2[16], int R, int G, int B){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]
	  clearlcd();
 8000a4e:	f7ff fefd 	bl	800084c <clearlcd>
	  lcd_position(&hi2c1,0,0);//cositas
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <print_lcd2+0x50>)
 8000a58:	f7ff ff3a 	bl	80008d0 <lcd_position>
	  lcd_print(&hi2c1, line_1);
 8000a5c:	68f9      	ldr	r1, [r7, #12]
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <print_lcd2+0x50>)
 8000a60:	f7ff ff0e 	bl	8000880 <lcd_print>
	  lcd_position(&hi2c1,0,1);//cositas
 8000a64:	2201      	movs	r2, #1
 8000a66:	2100      	movs	r1, #0
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <print_lcd2+0x50>)
 8000a6a:	f7ff ff31 	bl	80008d0 <lcd_position>
	  lcd_print(&hi2c1, line_2);
 8000a6e:	68b9      	ldr	r1, [r7, #8]
 8000a70:	4807      	ldr	r0, [pc, #28]	; (8000a90 <print_lcd2+0x50>)
 8000a72:	f7ff ff05 	bl	8000880 <lcd_print>
	  reglagecouleur(R, G, B);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	683a      	ldr	r2, [r7, #0]
 8000a7c:	b2d1      	uxtb	r1, r2
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff4c 	bl	8000920 <reglagecouleur>

}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000a4 	.word	0x200000a4

08000a94 <show_plate>:
void show_plate(char *input, char *commande){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b094      	sub	sp, #80	; 0x50
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	//find :
	int start, start2, length, new = 0; ;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
	char string[40];
	length = strlen((char*)input);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fb6a 	bl	800017c <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i = 0; i < length; i++){
 8000aac:	2300      	movs	r3, #0
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
 8000ab0:	e012      	b.n	8000ad8 <show_plate+0x44>
		if(input[i] == ':')
 8000ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b3a      	cmp	r3, #58	; 0x3a
 8000abc:	d101      	bne.n	8000ac2 <show_plate+0x2e>
			start = i;
 8000abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
		if(input[i] == ';')
 8000ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b3b      	cmp	r3, #59	; 0x3b
 8000acc:	d101      	bne.n	8000ad2 <show_plate+0x3e>
			start2 = i;
 8000ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ad0:	64bb      	str	r3, [r7, #72]	; 0x48
	for(int i = 0; i < length; i++){
 8000ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8000ad8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbe8      	blt.n	8000ab2 <show_plate+0x1e>
	}

	for(int i = start + 1; i < length - 10; i++){
 8000ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ae6:	e00f      	b.n	8000b08 <show_plate+0x74>
		string[new] = input[i];
 8000ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	7819      	ldrb	r1, [r3, #0]
 8000af0:	f107 020c 	add.w	r2, r7, #12
 8000af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000af6:	4413      	add	r3, r2
 8000af8:	460a      	mov	r2, r1
 8000afa:	701a      	strb	r2, [r3, #0]
		new++;
 8000afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000afe:	3301      	adds	r3, #1
 8000b00:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = start + 1; i < length - 10; i++){
 8000b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b04:	3301      	adds	r3, #1
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0a:	3b0a      	subs	r3, #10
 8000b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	dbea      	blt.n	8000ae8 <show_plate+0x54>
	}
	new = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = start2 + 1; i < length - 10; i++){
 8000b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b18:	3301      	adds	r3, #1
 8000b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b1c:	e00d      	b.n	8000b3a <show_plate+0xa6>
		commande[new] = input[i];
 8000b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	441a      	add	r2, r3
 8000b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b26:	6839      	ldr	r1, [r7, #0]
 8000b28:	440b      	add	r3, r1
 8000b2a:	7812      	ldrb	r2, [r2, #0]
 8000b2c:	701a      	strb	r2, [r3, #0]
		new++;
 8000b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b30:	3301      	adds	r3, #1
 8000b32:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = start2 + 1; i < length - 10; i++){
 8000b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b36:	3301      	adds	r3, #1
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b3c:	3b0a      	subs	r3, #10
 8000b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbec      	blt.n	8000b1e <show_plate+0x8a>
	}
	lcd_print(&hi2c1, string);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <show_plate+0xc4>)
 8000b4c:	f7ff fe98 	bl	8000880 <lcd_print>

}
 8000b50:	bf00      	nop
 8000b52:	3750      	adds	r7, #80	; 0x50
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200000a4 	.word	0x200000a4

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0a2      	sub	sp, #136	; 0x88
 8000b60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b62:	f000 fb12 	bl	800118a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b66:	f000 f903 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f7ff fc91 	bl	8000490 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b6e:	f7ff fd05 	bl	800057c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b72:	f000 fa15 	bl	8000fa0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b76:	f000 fa3d 	bl	8000ff4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	495e      	ldr	r1, [pc, #376]	; (8000cf8 <main+0x19c>)
 8000b7e:	485f      	ldr	r0, [pc, #380]	; (8000cfc <main+0x1a0>)
 8000b80:	f002 fab2 	bl	80030e8 <HAL_UART_Receive_IT>
  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 8000b84:	495e      	ldr	r1, [pc, #376]	; (8000d00 <main+0x1a4>)
 8000b86:	485f      	ldr	r0, [pc, #380]	; (8000d04 <main+0x1a8>)
 8000b88:	f7ff fd6a 	bl	8000660 <lcd_init>
  ATCommand("ATE1");
 8000b8c:	485e      	ldr	r0, [pc, #376]	; (8000d08 <main+0x1ac>)
 8000b8e:	f000 f93d 	bl	8000e0c <ATCommand>

  print_lcd2("system:", "Starting", 0,0,255);
 8000b92:	23ff      	movs	r3, #255	; 0xff
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2300      	movs	r3, #0
 8000b98:	2200      	movs	r2, #0
 8000b9a:	495c      	ldr	r1, [pc, #368]	; (8000d0c <main+0x1b0>)
 8000b9c:	485c      	ldr	r0, [pc, #368]	; (8000d10 <main+0x1b4>)
 8000b9e:	f7ff ff4f 	bl	8000a40 <print_lcd2>
  // --------------- wifi init ---------------
  //ATCommand("AT+RST");
  print_lcd2("WiFi state:", "connecting", 0, 255, 255);
 8000ba2:	23ff      	movs	r3, #255	; 0xff
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	23ff      	movs	r3, #255	; 0xff
 8000ba8:	2200      	movs	r2, #0
 8000baa:	495a      	ldr	r1, [pc, #360]	; (8000d14 <main+0x1b8>)
 8000bac:	485a      	ldr	r0, [pc, #360]	; (8000d18 <main+0x1bc>)
 8000bae:	f7ff ff47 	bl	8000a40 <print_lcd2>
  HAL_Delay(3000);
 8000bb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000bb6:	f000 fb57 	bl	8001268 <HAL_Delay>
  //input_string;
  print_lcd2("WiFi state:", "connected", 0, 255, 0);
 8000bba:	2300      	movs	r3, #0
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	23ff      	movs	r3, #255	; 0xff
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4956      	ldr	r1, [pc, #344]	; (8000d1c <main+0x1c0>)
 8000bc4:	4854      	ldr	r0, [pc, #336]	; (8000d18 <main+0x1bc>)
 8000bc6:	f7ff ff3b 	bl	8000a40 <print_lcd2>
  print_lcd2("Server state:", "starting", 0, 255, 255);
 8000bca:	23ff      	movs	r3, #255	; 0xff
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	23ff      	movs	r3, #255	; 0xff
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4953      	ldr	r1, [pc, #332]	; (8000d20 <main+0x1c4>)
 8000bd4:	4853      	ldr	r0, [pc, #332]	; (8000d24 <main+0x1c8>)
 8000bd6:	f7ff ff33 	bl	8000a40 <print_lcd2>
  ATCommand("AT+CWMODE=3");
 8000bda:	4853      	ldr	r0, [pc, #332]	; (8000d28 <main+0x1cc>)
 8000bdc:	f000 f916 	bl	8000e0c <ATCommand>
  ATCommand("AT+CIPMUX=1");
 8000be0:	4852      	ldr	r0, [pc, #328]	; (8000d2c <main+0x1d0>)
 8000be2:	f000 f913 	bl	8000e0c <ATCommand>
  ATCommand("AT+CIPSERVER=1");
 8000be6:	4852      	ldr	r0, [pc, #328]	; (8000d30 <main+0x1d4>)
 8000be8:	f000 f910 	bl	8000e0c <ATCommand>
  ATCommand("AT+CIPSTATUS");
 8000bec:	4851      	ldr	r0, [pc, #324]	; (8000d34 <main+0x1d8>)
 8000bee:	f000 f90d 	bl	8000e0c <ATCommand>

  print_lcd2("Server state:", "started", 0, 255, 255);
 8000bf2:	23ff      	movs	r3, #255	; 0xff
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	23ff      	movs	r3, #255	; 0xff
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	494f      	ldr	r1, [pc, #316]	; (8000d38 <main+0x1dc>)
 8000bfc:	4849      	ldr	r0, [pc, #292]	; (8000d24 <main+0x1c8>)
 8000bfe:	f7ff ff1f 	bl	8000a40 <print_lcd2>

  print_lcd2("Waiting for new", "commandes", 0, 255, 0);
 8000c02:	2300      	movs	r3, #0
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	23ff      	movs	r3, #255	; 0xff
 8000c08:	2200      	movs	r2, #0
 8000c0a:	494c      	ldr	r1, [pc, #304]	; (8000d3c <main+0x1e0>)
 8000c0c:	484c      	ldr	r0, [pc, #304]	; (8000d40 <main+0x1e4>)
 8000c0e:	f7ff ff17 	bl	8000a40 <print_lcd2>
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 8000c12:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <main+0x1a0>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
  {
	  char commande[2];

	  //HAL_Delay(2000);
	  //while(!input_complete);
	  if(input_complete){
 8000c18:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <main+0x1e8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d030      	beq.n	8000c82 <main+0x126>
		  strcpy((char*)screen_text, input_buffer);
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4948      	ldr	r1, [pc, #288]	; (8000d48 <main+0x1ec>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 fe70 	bl	800390c <strcpy>
		  clearlcd();
 8000c2c:	f7ff fe0e 	bl	800084c <clearlcd>
		  if(input_string == "waiting--------;00")
 8000c30:	4a46      	ldr	r2, [pc, #280]	; (8000d4c <main+0x1f0>)
 8000c32:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <main+0x1f4>)
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d105      	bne.n	8000c44 <main+0xe8>
			  reglagecouleur(0, 255, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	21ff      	movs	r1, #255	; 0xff
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fe6f 	bl	8000920 <reglagecouleur>
 8000c42:	e004      	b.n	8000c4e <main+0xf2>
		  else{
		  reglagecouleur(255, 0, 0);}
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	20ff      	movs	r0, #255	; 0xff
 8000c4a:	f7ff fe69 	bl	8000920 <reglagecouleur>
		  lcd_position(&hi2c1,0,0);//cositas
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	482c      	ldr	r0, [pc, #176]	; (8000d04 <main+0x1a8>)
 8000c54:	f7ff fe3c 	bl	80008d0 <lcd_position>
		  show_plate(input_string, commande);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	483b      	ldr	r0, [pc, #236]	; (8000d4c <main+0x1f0>)
 8000c5e:	f7ff ff19 	bl	8000a94 <show_plate>
		  lcd_position(&hi2c1,0,1);//cositas
 8000c62:	2201      	movs	r2, #1
 8000c64:	2100      	movs	r1, #0
 8000c66:	4827      	ldr	r0, [pc, #156]	; (8000d04 <main+0x1a8>)
 8000c68:	f7ff fe32 	bl	80008d0 <lcd_position>
		  lcd_print(&hi2c1, commande);
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4824      	ldr	r0, [pc, #144]	; (8000d04 <main+0x1a8>)
 8000c72:	f7ff fe05 	bl	8000880 <lcd_print>
		  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <main+0x1a0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
		  input_complete = 0;
 8000c7c:	4b31      	ldr	r3, [pc, #196]	; (8000d44 <main+0x1e8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
	  }
	  if(!HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)){
 8000c82:	2120      	movs	r1, #32
 8000c84:	4833      	ldr	r0, [pc, #204]	; (8000d54 <main+0x1f8>)
 8000c86:	f000 fded 	bl	8001864 <HAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1c3      	bne.n	8000c18 <main+0xbc>
		  ATCommand("AT+CIPSERVER=0");
 8000c90:	4831      	ldr	r0, [pc, #196]	; (8000d58 <main+0x1fc>)
 8000c92:	f000 f8bb 	bl	8000e0c <ATCommand>
		  ATCommand("AT+CIPMUX=0");
 8000c96:	4831      	ldr	r0, [pc, #196]	; (8000d5c <main+0x200>)
 8000c98:	f000 f8b8 	bl	8000e0c <ATCommand>
		  ATCommand("AT+CIPSTART=\"TCP\",\"debian\",8000");
 8000c9c:	4830      	ldr	r0, [pc, #192]	; (8000d60 <main+0x204>)
 8000c9e:	f000 f8b5 	bl	8000e0c <ATCommand>
		  //strcpy((char*)request, "GET /api/67 HTTP/1.1\r\nHost:debian");
		  sprintf((char*)request,
				  "GET /api/%c%c HTTP/1.1\r\nHost:debian",
				  commande[0],
 8000ca2:	793b      	ldrb	r3, [r7, #4]
		  sprintf((char*)request,
 8000ca4:	461a      	mov	r2, r3
				  commande[1]
 8000ca6:	797b      	ldrb	r3, [r7, #5]
		  sprintf((char*)request,
 8000ca8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000cac:	492d      	ldr	r1, [pc, #180]	; (8000d64 <main+0x208>)
 8000cae:	f002 fe0d 	bl	80038cc <siprintf>
				  );
		  sprintf((char*)cmd,
 8000cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fa60 	bl	800017c <strlen>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cc2:	4929      	ldr	r1, [pc, #164]	; (8000d68 <main+0x20c>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fe01 	bl	80038cc <siprintf>
				  "AT+CIPSEND=%i",
				  strlen((char*)request)
				  );

		  ATCommand(cmd);
 8000cca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f89c 	bl	8000e0c <ATCommand>
		  ATCommand(request);
 8000cd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f897 	bl	8000e0c <ATCommand>
		  ATCommand("AT+CIPCLOSE");
 8000cde:	4823      	ldr	r0, [pc, #140]	; (8000d6c <main+0x210>)
 8000ce0:	f000 f894 	bl	8000e0c <ATCommand>
		  ATCommand("AT+CIPMUX=1");
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <main+0x1d0>)
 8000ce6:	f000 f891 	bl	8000e0c <ATCommand>
		  ATCommand("AT+CIPSERVER=1");
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <main+0x1d4>)
 8000cec:	f000 f88e 	bl	8000e0c <ATCommand>
		  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 8000cf0:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <main+0x1a0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
  {
 8000cf6:	e78f      	b.n	8000c18 <main+0xbc>
 8000cf8:	20000120 	.word	0x20000120
 8000cfc:	20000200 	.word	0x20000200
 8000d00:	2000008c 	.word	0x2000008c
 8000d04:	200000a4 	.word	0x200000a4
 8000d08:	08004118 	.word	0x08004118
 8000d0c:	08004120 	.word	0x08004120
 8000d10:	0800412c 	.word	0x0800412c
 8000d14:	08004134 	.word	0x08004134
 8000d18:	08004140 	.word	0x08004140
 8000d1c:	0800414c 	.word	0x0800414c
 8000d20:	08004158 	.word	0x08004158
 8000d24:	08004164 	.word	0x08004164
 8000d28:	08004174 	.word	0x08004174
 8000d2c:	08004180 	.word	0x08004180
 8000d30:	0800418c 	.word	0x0800418c
 8000d34:	0800419c 	.word	0x0800419c
 8000d38:	080041ac 	.word	0x080041ac
 8000d3c:	080041b4 	.word	0x080041b4
 8000d40:	080041c0 	.word	0x080041c0
 8000d44:	20000094 	.word	0x20000094
 8000d48:	20000124 	.word	0x20000124
 8000d4c:	200000f8 	.word	0x200000f8
 8000d50:	080041d0 	.word	0x080041d0
 8000d54:	40020400 	.word	0x40020400
 8000d58:	080041e4 	.word	0x080041e4
 8000d5c:	080041f4 	.word	0x080041f4
 8000d60:	08004200 	.word	0x08004200
 8000d64:	08004220 	.word	0x08004220
 8000d68:	08004244 	.word	0x08004244
 8000d6c:	08004254 	.word	0x08004254

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b092      	sub	sp, #72	; 0x48
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	2234      	movs	r2, #52	; 0x34
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fd9b 	bl	80038ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <SystemClock_Config+0x98>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d9a:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <SystemClock_Config+0x98>)
 8000d9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000da0:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da2:	2302      	movs	r3, #2
 8000da4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000daa:	2310      	movs	r3, #16
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000db6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000dbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000dc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fae8 	bl	800239c <HAL_RCC_OscConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dd2:	f000 f83d 	bl	8000e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	2101      	movs	r1, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fe04 	bl	80029fc <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000dfa:	f000 f829 	bl	8000e50 <Error_Handler>
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3748      	adds	r7, #72	; 0x48
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40007000 	.word	0x40007000

08000e0c <ATCommand>:

/* USER CODE BEGIN 4 */
void ATCommand(uint8_t cmd[40]){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	//uint8_t cmd_;
	//strcpy((char*)cmd, command);
	HAL_UART_Transmit(&huart1, cmd, strlen((char*)cmd), 20000);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff f9b1 	bl	800017c <strlen>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <ATCommand+0x3c>)
 8000e26:	f002 f8c6 	bl	8002fb6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\r\n", 2, 20000);
 8000e2a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e2e:	2202      	movs	r2, #2
 8000e30:	4906      	ldr	r1, [pc, #24]	; (8000e4c <ATCommand+0x40>)
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <ATCommand+0x3c>)
 8000e34:	f002 f8bf 	bl	8002fb6 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000e38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e3c:	f000 fa14 	bl	8001268 <HAL_Delay>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000200 	.word	0x20000200
 8000e4c:	08004260 	.word	0x08004260

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <Error_Handler+0x6>

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e68:	6253      	str	r3, [r2, #36]	; 0x24
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6213      	str	r3, [r2, #32]
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	6253      	str	r3, [r2, #36]	; 0x24
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ea6:	2007      	movs	r0, #7
 8000ea8:	f000 facc 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efe:	f000 f997 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <USART1_IRQHandler+0x10>)
 8000f0e:	f002 f93f 	bl	8003190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	//USART_IrqHandler(&huart1, &hdma_usart1_rx);
  /* USER CODE END USART1_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000200 	.word	0x20000200

08000f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <_sbrk+0x5c>)
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <_sbrk+0x60>)
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <_sbrk+0x64>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <_sbrk+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d207      	bcs.n	8000f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f4c:	f002 fc80 	bl	8003850 <__errno>
 8000f50:	4602      	mov	r2, r0
 8000f52:	230c      	movs	r3, #12
 8000f54:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f5a:	e009      	b.n	8000f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <_sbrk+0x64>)
 8000f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20014000 	.word	0x20014000
 8000f7c:	00000400 	.word	0x00000400
 8000f80:	20000098 	.word	0x20000098
 8000f84:	20000288 	.word	0x20000288

08000f88 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <SystemInit+0x14>)
 8000f8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f92:	609a      	str	r2, [r3, #8]
#endif
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_USART1_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fd8:	f001 ffa0 	bl	8002f1c <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fe2:	f7ff ff35 	bl	8000e50 <Error_Handler>
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000200 	.word	0x20000200
 8000ff0:	40013800 	.word	0x40013800

08000ff4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_USART2_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800102c:	f001 ff76 	bl	8002f1c <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001036:	f7ff ff0b 	bl	8000e50 <Error_Handler>
  }

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000240 	.word	0x20000240
 8001044:	40004400 	.word	0x40004400

08001048 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a32      	ldr	r2, [pc, #200]	; (8001130 <HAL_UART_MspInit+0xe8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d131      	bne.n	80010ce <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <HAL_UART_MspInit+0xec>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a31      	ldr	r2, [pc, #196]	; (8001134 <HAL_UART_MspInit+0xec>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <HAL_UART_MspInit+0xec>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <HAL_UART_MspInit+0xec>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a2b      	ldr	r2, [pc, #172]	; (8001134 <HAL_UART_MspInit+0xec>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b29      	ldr	r3, [pc, #164]	; (8001134 <HAL_UART_MspInit+0xec>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800109a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ac:	2307      	movs	r3, #7
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4820      	ldr	r0, [pc, #128]	; (8001138 <HAL_UART_MspInit+0xf0>)
 80010b8:	f000 fa46 	bl	8001548 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	2025      	movs	r0, #37	; 0x25
 80010c2:	f000 f9ca 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010c6:	2025      	movs	r0, #37	; 0x25
 80010c8:	f000 f9e3 	bl	8001492 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010cc:	e02c      	b.n	8001128 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_UART_MspInit+0xf4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d127      	bne.n	8001128 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	4a15      	ldr	r2, [pc, #84]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e2:	6253      	str	r3, [r2, #36]	; 0x24
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	61d3      	str	r3, [r2, #28]
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001108:	230c      	movs	r3, #12
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001118:	2307      	movs	r3, #7
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <HAL_UART_MspInit+0xf0>)
 8001124:	f000 fa10 	bl	8001548 <HAL_GPIO_Init>
}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	; 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40013800 	.word	0x40013800
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000
 800113c:	40004400 	.word	0x40004400

08001140 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001140:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001142:	e003      	b.n	800114c <LoopCopyDataInit>

08001144 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001146:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001148:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800114a:	3104      	adds	r1, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800114c:	480a      	ldr	r0, [pc, #40]	; (8001178 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001150:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001152:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001154:	d3f6      	bcc.n	8001144 <CopyDataInit>
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001158:	e002      	b.n	8001160 <LoopFillZerobss>

0800115a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800115c:	f842 3b04 	str.w	r3, [r2], #4

08001160 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001162:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001164:	d3f9      	bcc.n	800115a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001166:	f7ff ff0f 	bl	8000f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f002 fb77 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116e:	f7ff fcf5 	bl	8000b5c <main>
  bx lr
 8001172:	4770      	bx	lr
  ldr r3, =_sidata
 8001174:	080042cc 	.word	0x080042cc
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800117c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001180:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001184:	20000288 	.word	0x20000288

08001188 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_IRQHandler>

0800118a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f955 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f80e 	bl	80011bc <HAL_InitTick>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	e001      	b.n	80011b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ac:	f7ff fe54 	bl	8000e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b0:	79fb      	ldrb	r3, [r7, #7]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_InitTick+0x68>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d022      	beq.n	8001216 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_InitTick+0x6c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_InitTick+0x68>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f962 	bl	80014ae <HAL_SYSTICK_Config>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10f      	bne.n	8001210 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	d809      	bhi.n	800120a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f6:	2200      	movs	r2, #0
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011fe:	f000 f92c 	bl	800145a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_InitTick+0x70>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e007      	b.n	800121a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e004      	b.n	800121a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e001      	b.n	800121a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000008 	.word	0x20000008
 8001228:	20000000 	.word	0x20000000
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x1c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x20>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4413      	add	r3, r2
 800123e:	4a03      	ldr	r2, [pc, #12]	; (800124c <HAL_IncTick+0x1c>)
 8001240:	6013      	str	r3, [r2, #0]
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000280 	.word	0x20000280
 8001250:	20000008 	.word	0x20000008

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b02      	ldr	r3, [pc, #8]	; (8001264 <HAL_GetTick+0x10>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000280 	.word	0x20000280

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff fff0 	bl	8001254 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001280:	d004      	beq.n	800128c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_Delay+0x40>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	4413      	add	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128c:	bf00      	nop
 800128e:	f7ff ffe1 	bl	8001254 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	429a      	cmp	r2, r3
 800129c:	d8f7      	bhi.n	800128e <HAL_Delay+0x26>
  {
  }
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000008 	.word	0x20000008

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4906      	ldr	r1, [pc, #24]	; (8001344 <__NVIC_EnableIRQ+0x34>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	; (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
         );
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001424:	f7ff ff90 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff2d 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff42 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff90 	bl	800139c <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5f 	bl	8001348 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff35 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa2 	bl	8001400 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d005      	beq.n	80014ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2204      	movs	r2, #4
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e029      	b.n	800153e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 020e 	bic.w	r2, r2, #14
 80014f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 021c 	and.w	r2, r3, #28
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001516:	2101      	movs	r1, #1
 8001518:	fa01 f202 	lsl.w	r2, r1, r2
 800151c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
    }
  }
  return status;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800155e:	e160      	b.n	8001822 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8152 	beq.w	800181c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d00b      	beq.n	8001598 <HAL_GPIO_Init+0x50>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800158c:	2b11      	cmp	r3, #17
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b12      	cmp	r3, #18
 8001596:	d130      	bne.n	80015fa <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80015ce:	2201      	movs	r2, #1
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	f003 0201 	and.w	r2, r3, #1
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0xf2>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b12      	cmp	r3, #18
 8001638:	d123      	bne.n	8001682 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001646:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	6939      	ldr	r1, [r7, #16]
 800167e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0203 	and.w	r2, r3, #3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80ac 	beq.w	800181c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c4:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_GPIO_Init+0x2f4>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a5c      	ldr	r2, [pc, #368]	; (800183c <HAL_GPIO_Init+0x2f4>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6213      	str	r3, [r2, #32]
 80016d0:	4b5a      	ldr	r3, [pc, #360]	; (800183c <HAL_GPIO_Init+0x2f4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80016dc:	4a58      	ldr	r2, [pc, #352]	; (8001840 <HAL_GPIO_Init+0x2f8>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a50      	ldr	r2, [pc, #320]	; (8001844 <HAL_GPIO_Init+0x2fc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d025      	beq.n	8001754 <HAL_GPIO_Init+0x20c>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a4f      	ldr	r2, [pc, #316]	; (8001848 <HAL_GPIO_Init+0x300>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d01f      	beq.n	8001750 <HAL_GPIO_Init+0x208>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a4e      	ldr	r2, [pc, #312]	; (800184c <HAL_GPIO_Init+0x304>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d019      	beq.n	800174c <HAL_GPIO_Init+0x204>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a4d      	ldr	r2, [pc, #308]	; (8001850 <HAL_GPIO_Init+0x308>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d013      	beq.n	8001748 <HAL_GPIO_Init+0x200>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a4c      	ldr	r2, [pc, #304]	; (8001854 <HAL_GPIO_Init+0x30c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d00d      	beq.n	8001744 <HAL_GPIO_Init+0x1fc>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a4b      	ldr	r2, [pc, #300]	; (8001858 <HAL_GPIO_Init+0x310>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d007      	beq.n	8001740 <HAL_GPIO_Init+0x1f8>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a4a      	ldr	r2, [pc, #296]	; (800185c <HAL_GPIO_Init+0x314>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d101      	bne.n	800173c <HAL_GPIO_Init+0x1f4>
 8001738:	2306      	movs	r3, #6
 800173a:	e00c      	b.n	8001756 <HAL_GPIO_Init+0x20e>
 800173c:	2307      	movs	r3, #7
 800173e:	e00a      	b.n	8001756 <HAL_GPIO_Init+0x20e>
 8001740:	2305      	movs	r3, #5
 8001742:	e008      	b.n	8001756 <HAL_GPIO_Init+0x20e>
 8001744:	2304      	movs	r3, #4
 8001746:	e006      	b.n	8001756 <HAL_GPIO_Init+0x20e>
 8001748:	2303      	movs	r3, #3
 800174a:	e004      	b.n	8001756 <HAL_GPIO_Init+0x20e>
 800174c:	2302      	movs	r3, #2
 800174e:	e002      	b.n	8001756 <HAL_GPIO_Init+0x20e>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_GPIO_Init+0x20e>
 8001754:	2300      	movs	r3, #0
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	f002 0203 	and.w	r2, r2, #3
 800175c:	0092      	lsls	r2, r2, #2
 800175e:	4093      	lsls	r3, r2
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001766:	4936      	ldr	r1, [pc, #216]	; (8001840 <HAL_GPIO_Init+0x2f8>)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001774:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <HAL_GPIO_Init+0x318>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001798:	4a31      	ldr	r2, [pc, #196]	; (8001860 <HAL_GPIO_Init+0x318>)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800179e:	4b30      	ldr	r3, [pc, #192]	; (8001860 <HAL_GPIO_Init+0x318>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017c2:	4a27      	ldr	r2, [pc, #156]	; (8001860 <HAL_GPIO_Init+0x318>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <HAL_GPIO_Init+0x318>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017ec:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <HAL_GPIO_Init+0x318>)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_GPIO_Init+0x318>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_GPIO_Init+0x318>)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	f47f ae97 	bne.w	8001560 <HAL_GPIO_Init+0x18>
  }
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40023800 	.word	0x40023800
 8001840:	40010000 	.word	0x40010000
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400
 800184c:	40020800 	.word	0x40020800
 8001850:	40020c00 	.word	0x40020c00
 8001854:	40021000 	.word	0x40021000
 8001858:	40021400 	.word	0x40021400
 800185c:	40021800 	.word	0x40021800
 8001860:	40010400 	.word	0x40010400

08001864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e001      	b.n	8001886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]
 800189e:	4613      	mov	r3, r2
 80018a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a2:	787b      	ldrb	r3, [r7, #1]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018a8:	887a      	ldrh	r2, [r7, #2]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80018ae:	e003      	b.n	80018b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	041a      	lsls	r2, r3, #16
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e11f      	b.n	8001b16 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7fe fe74 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2224      	movs	r2, #36	; 0x24
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001928:	f001 fa70 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 800192c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a7b      	ldr	r2, [pc, #492]	; (8001b20 <HAL_I2C_Init+0x25c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d807      	bhi.n	8001948 <HAL_I2C_Init+0x84>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a7a      	ldr	r2, [pc, #488]	; (8001b24 <HAL_I2C_Init+0x260>)
 800193c:	4293      	cmp	r3, r2
 800193e:	bf94      	ite	ls
 8001940:	2301      	movls	r3, #1
 8001942:	2300      	movhi	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e006      	b.n	8001956 <HAL_I2C_Init+0x92>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4a77      	ldr	r2, [pc, #476]	; (8001b28 <HAL_I2C_Init+0x264>)
 800194c:	4293      	cmp	r3, r2
 800194e:	bf94      	ite	ls
 8001950:	2301      	movls	r3, #1
 8001952:	2300      	movhi	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0db      	b.n	8001b16 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4a72      	ldr	r2, [pc, #456]	; (8001b2c <HAL_I2C_Init+0x268>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0c9b      	lsrs	r3, r3, #18
 8001968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a64      	ldr	r2, [pc, #400]	; (8001b20 <HAL_I2C_Init+0x25c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d802      	bhi.n	8001998 <HAL_I2C_Init+0xd4>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3301      	adds	r3, #1
 8001996:	e009      	b.n	80019ac <HAL_I2C_Init+0xe8>
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	4a63      	ldr	r2, [pc, #396]	; (8001b30 <HAL_I2C_Init+0x26c>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	3301      	adds	r3, #1
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	430b      	orrs	r3, r1
 80019b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4956      	ldr	r1, [pc, #344]	; (8001b20 <HAL_I2C_Init+0x25c>)
 80019c8:	428b      	cmp	r3, r1
 80019ca:	d80d      	bhi.n	80019e8 <HAL_I2C_Init+0x124>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1e59      	subs	r1, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	bf38      	it	cc
 80019e4:	2304      	movcc	r3, #4
 80019e6:	e04f      	b.n	8001a88 <HAL_I2C_Init+0x1c4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d111      	bne.n	8001a14 <HAL_I2C_Init+0x150>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1e58      	subs	r0, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	440b      	add	r3, r1
 80019fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a02:	3301      	adds	r3, #1
 8001a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	e012      	b.n	8001a3a <HAL_I2C_Init+0x176>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1e58      	subs	r0, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6859      	ldr	r1, [r3, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	0099      	lsls	r1, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Init+0x17e>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e022      	b.n	8001a88 <HAL_I2C_Init+0x1c4>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10e      	bne.n	8001a68 <HAL_I2C_Init+0x1a4>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1e58      	subs	r0, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6859      	ldr	r1, [r3, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	440b      	add	r3, r1
 8001a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a66:	e00f      	b.n	8001a88 <HAL_I2C_Init+0x1c4>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1e58      	subs	r0, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	0099      	lsls	r1, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	6809      	ldr	r1, [r1, #0]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69da      	ldr	r2, [r3, #28]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6911      	ldr	r1, [r2, #16]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68d2      	ldr	r2, [r2, #12]
 8001ac2:	4311      	orrs	r1, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	000186a0 	.word	0x000186a0
 8001b24:	001e847f 	.word	0x001e847f
 8001b28:	003d08ff 	.word	0x003d08ff
 8001b2c:	431bde83 	.word	0x431bde83
 8001b30:	10624dd3 	.word	0x10624dd3

08001b34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	460b      	mov	r3, r1
 8001b42:	817b      	strh	r3, [r7, #10]
 8001b44:	4613      	mov	r3, r2
 8001b46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b48:	f7ff fb84 	bl	8001254 <HAL_GetTick>
 8001b4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b20      	cmp	r3, #32
 8001b58:	f040 80e0 	bne.w	8001d1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2319      	movs	r3, #25
 8001b62:	2201      	movs	r2, #1
 8001b64:	4970      	ldr	r1, [pc, #448]	; (8001d28 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 fa92 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
 8001b74:	e0d3      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_I2C_Master_Transmit+0x50>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e0cc      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1ea>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d007      	beq.n	8001baa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2221      	movs	r2, #33	; 0x21
 8001bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	893a      	ldrh	r2, [r7, #8]
 8001bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4a50      	ldr	r2, [pc, #320]	; (8001d2c <HAL_I2C_Master_Transmit+0x1f8>)
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bec:	8979      	ldrh	r1, [r7, #10]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	6a3a      	ldr	r2, [r7, #32]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f9ca 	bl	8001f8c <I2C_MasterRequestWrite>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e08d      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c18:	e066      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	6a39      	ldr	r1, [r7, #32]
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 fb0c 	bl	800223c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00d      	beq.n	8001c46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d107      	bne.n	8001c42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e06b      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d11b      	bne.n	8001cbc <HAL_I2C_Master_Transmit+0x188>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d017      	beq.n	8001cbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	6a39      	ldr	r1, [r7, #32]
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fafc 	bl	80022be <I2C_WaitOnBTFFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00d      	beq.n	8001ce8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d107      	bne.n	8001ce4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ce2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e01a      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d194      	bne.n	8001c1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e000      	b.n	8001d1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
  }
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	00100002 	.word	0x00100002
 8001d2c:	ffff0000 	.word	0xffff0000

08001d30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff fa88 	bl	8001254 <HAL_GetTick>
 8001d44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	f040 8111 	bne.w	8001f7a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2319      	movs	r3, #25
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4988      	ldr	r1, [pc, #544]	; (8001f84 <HAL_I2C_IsDeviceReady+0x254>)
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f994 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e104      	b.n	8001f7c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_I2C_IsDeviceReady+0x50>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e0fd      	b.n	8001f7c <HAL_I2C_IsDeviceReady+0x24c>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d007      	beq.n	8001da6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2224      	movs	r2, #36	; 0x24
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a70      	ldr	r2, [pc, #448]	; (8001f88 <HAL_I2C_IsDeviceReady+0x258>)
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f952 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00d      	beq.n	8001e0e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e00:	d103      	bne.n	8001e0a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0b6      	b.n	8001f7c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e0e:	897b      	ldrh	r3, [r7, #10]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e1c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e1e:	f7ff fa19 	bl	8001254 <HAL_GetTick>
 8001e22:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e52:	e025      	b.n	8001ea0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e54:	f7ff f9fe 	bl	8001254 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d302      	bcc.n	8001e6a <HAL_I2C_IsDeviceReady+0x13a>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d103      	bne.n	8001e72 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	22a0      	movs	r2, #160	; 0xa0
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2ba0      	cmp	r3, #160	; 0xa0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_I2C_IsDeviceReady+0x188>
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_I2C_IsDeviceReady+0x188>
 8001eb2:	7dbb      	ldrb	r3, [r7, #22]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0cd      	beq.n	8001e54 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d129      	bne.n	8001f22 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001edc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2319      	movs	r3, #25
 8001efa:	2201      	movs	r2, #1
 8001efc:	4921      	ldr	r1, [pc, #132]	; (8001f84 <HAL_I2C_IsDeviceReady+0x254>)
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f8c6 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e036      	b.n	8001f7c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e02c      	b.n	8001f7c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f30:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f3a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2319      	movs	r3, #25
 8001f42:	2201      	movs	r2, #1
 8001f44:	490f      	ldr	r1, [pc, #60]	; (8001f84 <HAL_I2C_IsDeviceReady+0x254>)
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f8a2 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e012      	b.n	8001f7c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f4ff af32 	bcc.w	8001dca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
  }
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	00100002 	.word	0x00100002
 8001f88:	ffff0000 	.word	0xffff0000

08001f8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d006      	beq.n	8001fb6 <I2C_MasterRequestWrite+0x2a>
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d003      	beq.n	8001fb6 <I2C_MasterRequestWrite+0x2a>
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fb4:	d108      	bne.n	8001fc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e00b      	b.n	8001fe0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	2b12      	cmp	r3, #18
 8001fce:	d107      	bne.n	8001fe0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f84f 	bl	8002090 <I2C_WaitOnFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00d      	beq.n	8002014 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002006:	d103      	bne.n	8002010 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e035      	b.n	8002080 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800201c:	d108      	bne.n	8002030 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800201e:	897b      	ldrh	r3, [r7, #10]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800202c:	611a      	str	r2, [r3, #16]
 800202e:	e01b      	b.n	8002068 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002030:	897b      	ldrh	r3, [r7, #10]
 8002032:	11db      	asrs	r3, r3, #7
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f003 0306 	and.w	r3, r3, #6
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f063 030f 	orn	r3, r3, #15
 8002040:	b2da      	uxtb	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	490e      	ldr	r1, [pc, #56]	; (8002088 <I2C_MasterRequestWrite+0xfc>)
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f875 	bl	800213e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e010      	b.n	8002080 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800205e:	897b      	ldrh	r3, [r7, #10]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <I2C_MasterRequestWrite+0x100>)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f865 	bl	800213e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	00010008 	.word	0x00010008
 800208c:	00010002 	.word	0x00010002

08002090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020a0:	e025      	b.n	80020ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a8:	d021      	beq.n	80020ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020aa:	f7ff f8d3 	bl	8001254 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d302      	bcc.n	80020c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d116      	bne.n	80020ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f043 0220 	orr.w	r2, r3, #32
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e023      	b.n	8002136 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10d      	bne.n	8002114 <I2C_WaitOnFlagUntilTimeout+0x84>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4013      	ands	r3, r2
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	e00c      	b.n	800212e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4013      	ands	r3, r2
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	429a      	cmp	r2, r3
 8002132:	d0b6      	beq.n	80020a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800214c:	e051      	b.n	80021f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215c:	d123      	bne.n	80021a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002176:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2220      	movs	r2, #32
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f043 0204 	orr.w	r2, r3, #4
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e046      	b.n	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ac:	d021      	beq.n	80021f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7ff f851 	bl	8001254 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d116      	bne.n	80021f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f043 0220 	orr.w	r2, r3, #32
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e020      	b.n	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d10c      	bne.n	8002216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4013      	ands	r3, r2
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	bf14      	ite	ne
 800220e:	2301      	movne	r3, #1
 8002210:	2300      	moveq	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	e00b      	b.n	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	43da      	mvns	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4013      	ands	r3, r2
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d18d      	bne.n	800214e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002248:	e02d      	b.n	80022a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f878 	bl	8002340 <I2C_IsAcknowledgeFailed>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e02d      	b.n	80022b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002260:	d021      	beq.n	80022a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7fe fff7 	bl	8001254 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d116      	bne.n	80022a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f043 0220 	orr.w	r2, r3, #32
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e007      	b.n	80022b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b0:	2b80      	cmp	r3, #128	; 0x80
 80022b2:	d1ca      	bne.n	800224a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022ca:	e02d      	b.n	8002328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f837 	bl	8002340 <I2C_IsAcknowledgeFailed>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e02d      	b.n	8002338 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e2:	d021      	beq.n	8002328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e4:	f7fe ffb6 	bl	8001254 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d302      	bcc.n	80022fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e007      	b.n	8002338 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b04      	cmp	r3, #4
 8002334:	d1ca      	bne.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002356:	d11b      	bne.n	8002390 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002360:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f043 0204 	orr.w	r2, r3, #4
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e31d      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ae:	4b94      	ldr	r3, [pc, #592]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b8:	4b91      	ldr	r3, [pc, #580]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d07b      	beq.n	80024c6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d006      	beq.n	80023e2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	d10f      	bne.n	80023fa <HAL_RCC_OscConfig+0x5e>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d10b      	bne.n	80023fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e2:	4b87      	ldr	r3, [pc, #540]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d06a      	beq.n	80024c4 <HAL_RCC_OscConfig+0x128>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d166      	bne.n	80024c4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e2f7      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d106      	bne.n	8002410 <HAL_RCC_OscConfig+0x74>
 8002402:	4b7f      	ldr	r3, [pc, #508]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a7e      	ldr	r2, [pc, #504]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e02d      	b.n	800246c <HAL_RCC_OscConfig+0xd0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10c      	bne.n	8002432 <HAL_RCC_OscConfig+0x96>
 8002418:	4b79      	ldr	r3, [pc, #484]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a78      	ldr	r2, [pc, #480]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b76      	ldr	r3, [pc, #472]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a75      	ldr	r2, [pc, #468]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e01c      	b.n	800246c <HAL_RCC_OscConfig+0xd0>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b05      	cmp	r3, #5
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0xb8>
 800243a:	4b71      	ldr	r3, [pc, #452]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a70      	ldr	r2, [pc, #448]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b6e      	ldr	r3, [pc, #440]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a6d      	ldr	r2, [pc, #436]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e00b      	b.n	800246c <HAL_RCC_OscConfig+0xd0>
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a69      	ldr	r2, [pc, #420]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 800245a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a66      	ldr	r2, [pc, #408]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 8002466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7fe feee 	bl	8001254 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe feea 	bl	8001254 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e2ad      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800248e:	4b5c      	ldr	r3, [pc, #368]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0xe0>
 800249a:	e014      	b.n	80024c6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe feda 	bl	8001254 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe fed6 	bl	8001254 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e299      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024b6:	4b52      	ldr	r3, [pc, #328]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x108>
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d05a      	beq.n	8002588 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d119      	bne.n	8002512 <HAL_RCC_OscConfig+0x176>
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d116      	bne.n	8002512 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e4:	4b46      	ldr	r3, [pc, #280]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_OscConfig+0x160>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e276      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b40      	ldr	r3, [pc, #256]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	493d      	ldr	r1, [pc, #244]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002510:	e03a      	b.n	8002588 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d020      	beq.n	800255c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800251a:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_RCC_OscConfig+0x268>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fe98 	bl	8001254 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002528:	f7fe fe94 	bl	8001254 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e257      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	492a      	ldr	r1, [pc, #168]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
 800255a:	e015      	b.n	8002588 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255c:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_RCC_OscConfig+0x268>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7fe fe77 	bl	8001254 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256a:	f7fe fe73 	bl	8001254 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e236      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80b8 	beq.w	8002706 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d170      	bne.n	800267e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_OscConfig+0x218>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e21a      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1a      	ldr	r2, [r3, #32]
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d921      	bls.n	8002608 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fc47 	bl	8002e5c <RCC_SetFlashLatencyFromMSIRange>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e208      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4906      	ldr	r1, [pc, #24]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	061b      	lsls	r3, r3, #24
 80025f8:	4901      	ldr	r1, [pc, #4]	; (8002600 <HAL_RCC_OscConfig+0x264>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
 80025fe:	e020      	b.n	8002642 <HAL_RCC_OscConfig+0x2a6>
 8002600:	40023800 	.word	0x40023800
 8002604:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002608:	4ba4      	ldr	r3, [pc, #656]	; (800289c <HAL_RCC_OscConfig+0x500>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	49a1      	ldr	r1, [pc, #644]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800261a:	4ba0      	ldr	r3, [pc, #640]	; (800289c <HAL_RCC_OscConfig+0x500>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	499c      	ldr	r1, [pc, #624]	; (800289c <HAL_RCC_OscConfig+0x500>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fc12 	bl	8002e5c <RCC_SetFlashLatencyFromMSIRange>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e1d3      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	0b5b      	lsrs	r3, r3, #13
 8002648:	3301      	adds	r3, #1
 800264a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002652:	4a92      	ldr	r2, [pc, #584]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002654:	6892      	ldr	r2, [r2, #8]
 8002656:	0912      	lsrs	r2, r2, #4
 8002658:	f002 020f 	and.w	r2, r2, #15
 800265c:	4990      	ldr	r1, [pc, #576]	; (80028a0 <HAL_RCC_OscConfig+0x504>)
 800265e:	5c8a      	ldrb	r2, [r1, r2]
 8002660:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002662:	4a90      	ldr	r2, [pc, #576]	; (80028a4 <HAL_RCC_OscConfig+0x508>)
 8002664:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002666:	4b90      	ldr	r3, [pc, #576]	; (80028a8 <HAL_RCC_OscConfig+0x50c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fda6 	bl	80011bc <HAL_InitTick>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d045      	beq.n	8002706 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	e1b5      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d029      	beq.n	80026da <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002686:	4b89      	ldr	r3, [pc, #548]	; (80028ac <HAL_RCC_OscConfig+0x510>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fde2 	bl	8001254 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002694:	f7fe fdde 	bl	8001254 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1a1      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026a6:	4b7d      	ldr	r3, [pc, #500]	; (800289c <HAL_RCC_OscConfig+0x500>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b2:	4b7a      	ldr	r3, [pc, #488]	; (800289c <HAL_RCC_OscConfig+0x500>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4977      	ldr	r1, [pc, #476]	; (800289c <HAL_RCC_OscConfig+0x500>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c4:	4b75      	ldr	r3, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x500>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	4972      	ldr	r1, [pc, #456]	; (800289c <HAL_RCC_OscConfig+0x500>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
 80026d8:	e015      	b.n	8002706 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026da:	4b74      	ldr	r3, [pc, #464]	; (80028ac <HAL_RCC_OscConfig+0x510>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fdb8 	bl	8001254 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e8:	f7fe fdb4 	bl	8001254 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e177      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026fa:	4b68      	ldr	r3, [pc, #416]	; (800289c <HAL_RCC_OscConfig+0x500>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d030      	beq.n	8002774 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271a:	4b65      	ldr	r3, [pc, #404]	; (80028b0 <HAL_RCC_OscConfig+0x514>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7fe fd98 	bl	8001254 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002728:	f7fe fd94 	bl	8001254 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e157      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800273a:	4b58      	ldr	r3, [pc, #352]	; (800289c <HAL_RCC_OscConfig+0x500>)
 800273c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x38c>
 8002746:	e015      	b.n	8002774 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002748:	4b59      	ldr	r3, [pc, #356]	; (80028b0 <HAL_RCC_OscConfig+0x514>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7fe fd81 	bl	8001254 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002756:	f7fe fd7d 	bl	8001254 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e140      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002768:	4b4c      	ldr	r3, [pc, #304]	; (800289c <HAL_RCC_OscConfig+0x500>)
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80b5 	beq.w	80028ec <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b45      	ldr	r3, [pc, #276]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b42      	ldr	r3, [pc, #264]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	4a41      	ldr	r2, [pc, #260]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	6253      	str	r3, [r2, #36]	; 0x24
 800279e:	4b3f      	ldr	r3, [pc, #252]	; (800289c <HAL_RCC_OscConfig+0x500>)
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027aa:	2301      	movs	r3, #1
 80027ac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	4b41      	ldr	r3, [pc, #260]	; (80028b4 <HAL_RCC_OscConfig+0x518>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d118      	bne.n	80027ec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ba:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <HAL_RCC_OscConfig+0x518>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a3d      	ldr	r2, [pc, #244]	; (80028b4 <HAL_RCC_OscConfig+0x518>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fd45 	bl	8001254 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe fd41 	bl	8001254 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	; 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e104      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HAL_RCC_OscConfig+0x518>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x466>
 80027f4:	4b29      	ldr	r3, [pc, #164]	; (800289c <HAL_RCC_OscConfig+0x500>)
 80027f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f8:	4a28      	ldr	r2, [pc, #160]	; (800289c <HAL_RCC_OscConfig+0x500>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fe:	6353      	str	r3, [r2, #52]	; 0x34
 8002800:	e02d      	b.n	800285e <HAL_RCC_OscConfig+0x4c2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x488>
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCC_OscConfig+0x500>)
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	4a23      	ldr	r2, [pc, #140]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002814:	6353      	str	r3, [r2, #52]	; 0x34
 8002816:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	4a20      	ldr	r2, [pc, #128]	; (800289c <HAL_RCC_OscConfig+0x500>)
 800281c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002820:	6353      	str	r3, [r2, #52]	; 0x34
 8002822:	e01c      	b.n	800285e <HAL_RCC_OscConfig+0x4c2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d10c      	bne.n	8002846 <HAL_RCC_OscConfig+0x4aa>
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x500>)
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	4a1a      	ldr	r2, [pc, #104]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002836:	6353      	str	r3, [r2, #52]	; 0x34
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_RCC_OscConfig+0x500>)
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	4a17      	ldr	r2, [pc, #92]	; (800289c <HAL_RCC_OscConfig+0x500>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002842:	6353      	str	r3, [r2, #52]	; 0x34
 8002844:	e00b      	b.n	800285e <HAL_RCC_OscConfig+0x4c2>
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284a:	4a14      	ldr	r2, [pc, #80]	; (800289c <HAL_RCC_OscConfig+0x500>)
 800284c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002850:	6353      	str	r3, [r2, #52]	; 0x34
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	4a11      	ldr	r2, [pc, #68]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800285c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d015      	beq.n	8002892 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7fe fcf5 	bl	8001254 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fcf1 	bl	8001254 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0b2      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_OscConfig+0x500>)
 8002886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ee      	beq.n	800286e <HAL_RCC_OscConfig+0x4d2>
 8002890:	e023      	b.n	80028da <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe fcdf 	bl	8001254 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002898:	e019      	b.n	80028ce <HAL_RCC_OscConfig+0x532>
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	08004270 	.word	0x08004270
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000004 	.word	0x20000004
 80028ac:	42470020 	.word	0x42470020
 80028b0:	42470680 	.word	0x42470680
 80028b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe fccc 	bl	8001254 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e08d      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028ce:	4b49      	ldr	r3, [pc, #292]	; (80029f4 <HAL_RCC_OscConfig+0x658>)
 80028d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ee      	bne.n	80028b8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028da:	7ffb      	ldrb	r3, [r7, #31]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b44      	ldr	r3, [pc, #272]	; (80029f4 <HAL_RCC_OscConfig+0x658>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	4a43      	ldr	r2, [pc, #268]	; (80029f4 <HAL_RCC_OscConfig+0x658>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d079      	beq.n	80029e8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d056      	beq.n	80029a8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d13b      	bne.n	800297a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002902:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <HAL_RCC_OscConfig+0x65c>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fe fca4 	bl	8001254 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fca0 	bl	8001254 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e063      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002922:	4b34      	ldr	r3, [pc, #208]	; (80029f4 <HAL_RCC_OscConfig+0x658>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_RCC_OscConfig+0x658>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	4319      	orrs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	430b      	orrs	r3, r1
 8002946:	492b      	ldr	r1, [pc, #172]	; (80029f4 <HAL_RCC_OscConfig+0x658>)
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_RCC_OscConfig+0x65c>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7fe fc7f 	bl	8001254 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe fc7b 	bl	8001254 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e03e      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800296c:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <HAL_RCC_OscConfig+0x658>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x5be>
 8002978:	e036      	b.n	80029e8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <HAL_RCC_OscConfig+0x65c>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7fe fc68 	bl	8001254 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe fc64 	bl	8001254 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e027      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_RCC_OscConfig+0x658>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x5ec>
 80029a6:	e01f      	b.n	80029e8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e01a      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <HAL_RCC_OscConfig+0x658>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d106      	bne.n	80029e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	42470060 	.word	0x42470060

080029fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e11a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b8f      	ldr	r3, [pc, #572]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d919      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x34>
 8002a24:	4b8a      	ldr	r3, [pc, #552]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a89      	ldr	r2, [pc, #548]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b87      	ldr	r3, [pc, #540]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 0201 	bic.w	r2, r3, #1
 8002a38:	4985      	ldr	r1, [pc, #532]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a40:	4b83      	ldr	r3, [pc, #524]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0f9      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	497a      	ldr	r1, [pc, #488]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 808e 	beq.w	8002b9a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a86:	4b73      	ldr	r3, [pc, #460]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d121      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0d7      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a9e:	4b6d      	ldr	r3, [pc, #436]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d115      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0cb      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ab6:	4b67      	ldr	r3, [pc, #412]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e0bf      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ac6:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e0b7      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	495c      	ldr	r1, [pc, #368]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fbb4 	bl	8001254 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d112      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af8:	f7fe fbac 	bl	8001254 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e09b      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b0e:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d1ee      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xfc>
 8002b1a:	e03e      	b.n	8002b9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d112      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b26:	f7fe fb95 	bl	8001254 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e084      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b3c:	4b45      	ldr	r3, [pc, #276]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d1ee      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x12a>
 8002b48:	e027      	b.n	8002b9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d11d      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fe fb7e 	bl	8001254 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e06d      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b6a:	4b3a      	ldr	r3, [pc, #232]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d1ee      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x158>
 8002b76:	e010      	b.n	8002b9a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7fe fb6c 	bl	8001254 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e05b      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1ee      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9a:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d219      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <HAL_RCC_ClockConfig+0x1be>
 8002bae:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a27      	ldr	r2, [pc, #156]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	4923      	ldr	r1, [pc, #140]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <HAL_RCC_ClockConfig+0x254>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e034      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be8:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4917      	ldr	r1, [pc, #92]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c06:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	490f      	ldr	r1, [pc, #60]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c1a:	f000 f823 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002c1e:	4601      	mov	r1, r0
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_RCC_ClockConfig+0x258>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <HAL_RCC_ClockConfig+0x25c>)
 8002c2c:	5cd3      	ldrb	r3, [r2, r3]
 8002c2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fabe 	bl	80011bc <HAL_InitTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c44:	7afb      	ldrb	r3, [r7, #11]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023c00 	.word	0x40023c00
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08004270 	.word	0x08004270
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	20000004 	.word	0x20000004

08002c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d007      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0x26>
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d008      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x2c>
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	f040 809f 	bne.w	8002dc2 <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c84:	4b59      	ldr	r3, [pc, #356]	; (8002dec <HAL_RCC_GetSysClockFreq+0x188>)
 8002c86:	613b      	str	r3, [r7, #16]
      break;
 8002c88:	e0a9      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c8a:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002c8c:	613b      	str	r3, [r7, #16]
      break;
 8002c8e:	e0a6      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	0c9b      	lsrs	r3, r3, #18
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	4a56      	ldr	r2, [pc, #344]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x190>)
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
 8002c9c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	0d9b      	lsrs	r3, r3, #22
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002caa:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d041      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	461d      	mov	r5, r3
 8002cba:	f04f 0600 	mov.w	r6, #0
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	4632      	mov	r2, r6
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	f04f 0400 	mov.w	r4, #0
 8002cca:	0154      	lsls	r4, r2, #5
 8002ccc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cd0:	014b      	lsls	r3, r1, #5
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4622      	mov	r2, r4
 8002cd6:	1b49      	subs	r1, r1, r5
 8002cd8:	eb62 0206 	sbc.w	r2, r2, r6
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	f04f 0400 	mov.w	r4, #0
 8002ce4:	0194      	lsls	r4, r2, #6
 8002ce6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cea:	018b      	lsls	r3, r1, #6
 8002cec:	1a5b      	subs	r3, r3, r1
 8002cee:	eb64 0402 	sbc.w	r4, r4, r2
 8002cf2:	f04f 0100 	mov.w	r1, #0
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	00e2      	lsls	r2, r4, #3
 8002cfc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d00:	00d9      	lsls	r1, r3, #3
 8002d02:	460b      	mov	r3, r1
 8002d04:	4614      	mov	r4, r2
 8002d06:	195b      	adds	r3, r3, r5
 8002d08:	eb44 0406 	adc.w	r4, r4, r6
 8002d0c:	f04f 0100 	mov.w	r1, #0
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	0262      	lsls	r2, r4, #9
 8002d16:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d1a:	0259      	lsls	r1, r3, #9
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4614      	mov	r4, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	4621      	mov	r1, r4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f04f 0400 	mov.w	r4, #0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	f7fd fa2d 	bl	800018c <__aeabi_uldivmod>
 8002d32:	4603      	mov	r3, r0
 8002d34:	460c      	mov	r4, r1
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e040      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	461d      	mov	r5, r3
 8002d3e:	f04f 0600 	mov.w	r6, #0
 8002d42:	4629      	mov	r1, r5
 8002d44:	4632      	mov	r2, r6
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	f04f 0400 	mov.w	r4, #0
 8002d4e:	0154      	lsls	r4, r2, #5
 8002d50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d54:	014b      	lsls	r3, r1, #5
 8002d56:	4619      	mov	r1, r3
 8002d58:	4622      	mov	r2, r4
 8002d5a:	1b49      	subs	r1, r1, r5
 8002d5c:	eb62 0206 	sbc.w	r2, r2, r6
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	f04f 0400 	mov.w	r4, #0
 8002d68:	0194      	lsls	r4, r2, #6
 8002d6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	1a5b      	subs	r3, r3, r1
 8002d72:	eb64 0402 	sbc.w	r4, r4, r2
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	00e2      	lsls	r2, r4, #3
 8002d80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d84:	00d9      	lsls	r1, r3, #3
 8002d86:	460b      	mov	r3, r1
 8002d88:	4614      	mov	r4, r2
 8002d8a:	195b      	adds	r3, r3, r5
 8002d8c:	eb44 0406 	adc.w	r4, r4, r6
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	02a2      	lsls	r2, r4, #10
 8002d9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d9e:	0299      	lsls	r1, r3, #10
 8002da0:	460b      	mov	r3, r1
 8002da2:	4614      	mov	r4, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	4621      	mov	r1, r4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f04f 0400 	mov.w	r4, #0
 8002dae:	461a      	mov	r2, r3
 8002db0:	4623      	mov	r3, r4
 8002db2:	f7fd f9eb 	bl	800018c <__aeabi_uldivmod>
 8002db6:	4603      	mov	r3, r0
 8002db8:	460c      	mov	r4, r1
 8002dba:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	613b      	str	r3, [r7, #16]
      break;
 8002dc0:	e00d      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	0b5b      	lsrs	r3, r3, #13
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	613b      	str	r3, [r7, #16]
      break;
 8002ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dde:	693b      	ldr	r3, [r7, #16]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	007a1200 	.word	0x007a1200
 8002df4:	08004264 	.word	0x08004264

08002df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dfc:	4b02      	ldr	r3, [pc, #8]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	20000000 	.word	0x20000000

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e10:	f7ff fff2 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e14:	4601      	mov	r1, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e22:	5cd3      	ldrb	r3, [r2, r3]
 8002e24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	08004280 	.word	0x08004280

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e38:	f7ff ffde 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4601      	mov	r1, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0adb      	lsrs	r3, r3, #11
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4a03      	ldr	r2, [pc, #12]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	08004280 	.word	0x08004280

08002e5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e68:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d12c      	bne.n	8002ece <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e74:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e016      	b.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6253      	str	r3, [r2, #36]	; 0x24
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002eac:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ec0:	d105      	bne.n	8002ece <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ec8:	d101      	bne.n	8002ece <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002eca:	2301      	movs	r3, #1
 8002ecc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002ed4:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 0201 	bic.w	r2, r3, #1
 8002ee8:	490b      	ldr	r1, [pc, #44]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40007000 	.word	0x40007000
 8002f18:	40023c00 	.word	0x40023c00

08002f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e03f      	b.n	8002fae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe f880 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2224      	movs	r2, #36	; 0x24
 8002f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fb91 	bl	8003688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b088      	sub	sp, #32
 8002fba:	af02      	add	r7, sp, #8
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	f040 8083 	bne.w	80030de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_UART_Transmit+0x2e>
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e07b      	b.n	80030e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Transmit+0x40>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e074      	b.n	80030e0 <HAL_UART_Transmit+0x12a>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2221      	movs	r2, #33	; 0x21
 8003008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800300c:	f7fe f922 	bl	8001254 <HAL_GetTick>
 8003010:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003026:	e042      	b.n	80030ae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303e:	d122      	bne.n	8003086 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2200      	movs	r2, #0
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f9b2 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e042      	b.n	80030e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800306c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	3302      	adds	r3, #2
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	e017      	b.n	80030ae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	e013      	b.n	80030ae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f98f 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e01f      	b.n	80030e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	60ba      	str	r2, [r7, #8]
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1b7      	bne.n	8003028 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2200      	movs	r2, #0
 80030c0:	2140      	movs	r1, #64	; 0x40
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f976 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e006      	b.n	80030e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
  }
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d140      	bne.n	8003184 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_UART_Receive_IT+0x26>
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e039      	b.n	8003186 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_UART_Receive_IT+0x38>
 800311c:	2302      	movs	r3, #2
 800311e:	e032      	b.n	8003186 <HAL_UART_Receive_IT+0x9e>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2222      	movs	r2, #34	; 0x22
 8003144:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0220 	orr.w	r2, r2, #32
 800317e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e000      	b.n	8003186 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003184:	2302      	movs	r3, #2
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10d      	bne.n	80031e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_UART_IRQHandler+0x52>
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9d2 	bl	8003584 <UART_Receive_IT>
      return;
 80031e0:	e0d1      	b.n	8003386 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80b0 	beq.w	800334a <HAL_UART_IRQHandler+0x1ba>
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_UART_IRQHandler+0x70>
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80a5 	beq.w	800334a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_UART_IRQHandler+0x90>
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_UART_IRQHandler+0xb0>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	f043 0202 	orr.w	r2, r3, #2
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_UART_IRQHandler+0xd0>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003258:	f043 0204 	orr.w	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00f      	beq.n	800328a <HAL_UART_IRQHandler+0xfa>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <HAL_UART_IRQHandler+0xee>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	f043 0208 	orr.w	r2, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d078      	beq.n	8003384 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <HAL_UART_IRQHandler+0x11c>
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f96c 	bl	8003584 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	bf0c      	ite	eq
 80032ba:	2301      	moveq	r3, #1
 80032bc:	2300      	movne	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <HAL_UART_IRQHandler+0x144>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d031      	beq.n	8003338 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f8b7 	bl	8003448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d123      	bne.n	8003330 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003304:	4a21      	ldr	r2, [pc, #132]	; (800338c <HAL_UART_IRQHandler+0x1fc>)
 8003306:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe f8da 	bl	80014c6 <HAL_DMA_Abort_IT>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d016      	beq.n	8003346 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003322:	4610      	mov	r0, r2
 8003324:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003326:	e00e      	b.n	8003346 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f83a 	bl	80033a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332e:	e00a      	b.n	8003346 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f836 	bl	80033a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003336:	e006      	b.n	8003346 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f832 	bl	80033a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003344:	e01e      	b.n	8003384 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003346:	bf00      	nop
    return;
 8003348:	e01c      	b.n	8003384 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_UART_IRQHandler+0x1d6>
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f8a3 	bl	80034aa <UART_Transmit_IT>
    return;
 8003364:	e00f      	b.n	8003386 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_UART_IRQHandler+0x1f6>
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f8ea 	bl	8003554 <UART_EndTransmit_IT>
    return;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003384:	bf00      	nop
  }
}
 8003386:	3720      	adds	r7, #32
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	08003483 	.word	0x08003483

08003390 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c4:	e02c      	b.n	8003420 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033cc:	d028      	beq.n	8003420 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80033d4:	f7fd ff3e 	bl	8001254 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d21d      	bcs.n	8003420 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e00f      	b.n	8003440 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	429a      	cmp	r2, r3
 800343c:	d0c3      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800345e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff ff80 	bl	80033a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b21      	cmp	r3, #33	; 0x21
 80034bc:	d144      	bne.n	8003548 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	d11a      	bne.n	80034fe <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034dc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d105      	bne.n	80034f2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	1c9a      	adds	r2, r3, #2
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	621a      	str	r2, [r3, #32]
 80034f0:	e00e      	b.n	8003510 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	621a      	str	r2, [r3, #32]
 80034fc:	e008      	b.n	8003510 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	1c59      	adds	r1, r3, #1
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6211      	str	r1, [r2, #32]
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29b      	uxth	r3, r3
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	4619      	mov	r1, r3
 800351e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10f      	bne.n	8003544 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003532:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003542:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff0b 	bl	8003390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b22      	cmp	r3, #34	; 0x22
 8003596:	d171      	bne.n	800367c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	d123      	bne.n	80035ea <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10e      	bne.n	80035ce <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	1c9a      	adds	r2, r3, #2
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
 80035cc:	e029      	b.n	8003622 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
 80035e8:	e01b      	b.n	8003622 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6858      	ldr	r0, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	1c59      	adds	r1, r3, #1
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6291      	str	r1, [r2, #40]	; 0x28
 8003602:	b2c2      	uxtb	r2, r0
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	e00c      	b.n	8003622 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	1c58      	adds	r0, r3, #1
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	6288      	str	r0, [r1, #40]	; 0x28
 800361a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29b      	uxth	r3, r3
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4619      	mov	r1, r3
 8003630:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003632:	2b00      	cmp	r3, #0
 8003634:	d120      	bne.n	8003678 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0220 	bic.w	r2, r2, #32
 8003644:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003654:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd f992 	bl	8000998 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	e002      	b.n	800367e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e000      	b.n	800367e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036c8:	f023 030c 	bic.w	r3, r3, #12
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	430b      	orrs	r3, r1
 80036d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a55      	ldr	r2, [pc, #340]	; (8003848 <UART_SetConfig+0x1c0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d103      	bne.n	80036fe <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036f6:	f7ff fb9d 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	e002      	b.n	8003704 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036fe:	f7ff fb85 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8003702:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370c:	d14c      	bne.n	80037a8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009a      	lsls	r2, r3, #2
 8003718:	441a      	add	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	4a49      	ldr	r2, [pc, #292]	; (800384c <UART_SetConfig+0x1c4>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	0119      	lsls	r1, r3, #4
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009a      	lsls	r2, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fbb2 f2f3 	udiv	r2, r2, r3
 8003744:	4b41      	ldr	r3, [pc, #260]	; (800384c <UART_SetConfig+0x1c4>)
 8003746:	fba3 0302 	umull	r0, r3, r3, r2
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2064      	movs	r0, #100	; 0x64
 800374e:	fb00 f303 	mul.w	r3, r0, r3
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	3332      	adds	r3, #50	; 0x32
 8003758:	4a3c      	ldr	r2, [pc, #240]	; (800384c <UART_SetConfig+0x1c4>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003766:	4419      	add	r1, r3
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009a      	lsls	r2, r3, #2
 8003772:	441a      	add	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fbb2 f2f3 	udiv	r2, r2, r3
 800377e:	4b33      	ldr	r3, [pc, #204]	; (800384c <UART_SetConfig+0x1c4>)
 8003780:	fba3 0302 	umull	r0, r3, r3, r2
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	2064      	movs	r0, #100	; 0x64
 8003788:	fb00 f303 	mul.w	r3, r0, r3
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	3332      	adds	r3, #50	; 0x32
 8003792:	4a2e      	ldr	r2, [pc, #184]	; (800384c <UART_SetConfig+0x1c4>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	f003 0207 	and.w	r2, r3, #7
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	440a      	add	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037a6:	e04a      	b.n	800383e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009a      	lsls	r2, r3, #2
 80037b2:	441a      	add	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	4a23      	ldr	r2, [pc, #140]	; (800384c <UART_SetConfig+0x1c4>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	0119      	lsls	r1, r3, #4
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	009a      	lsls	r2, r3, #2
 80037d2:	441a      	add	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	fbb2 f2f3 	udiv	r2, r2, r3
 80037de:	4b1b      	ldr	r3, [pc, #108]	; (800384c <UART_SetConfig+0x1c4>)
 80037e0:	fba3 0302 	umull	r0, r3, r3, r2
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	2064      	movs	r0, #100	; 0x64
 80037e8:	fb00 f303 	mul.w	r3, r0, r3
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	3332      	adds	r3, #50	; 0x32
 80037f2:	4a16      	ldr	r2, [pc, #88]	; (800384c <UART_SetConfig+0x1c4>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fe:	4419      	add	r1, r3
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009a      	lsls	r2, r3, #2
 800380a:	441a      	add	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	fbb2 f2f3 	udiv	r2, r2, r3
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <UART_SetConfig+0x1c4>)
 8003818:	fba3 0302 	umull	r0, r3, r3, r2
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	2064      	movs	r0, #100	; 0x64
 8003820:	fb00 f303 	mul.w	r3, r0, r3
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	3332      	adds	r3, #50	; 0x32
 800382a:	4a08      	ldr	r2, [pc, #32]	; (800384c <UART_SetConfig+0x1c4>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	f003 020f 	and.w	r2, r3, #15
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	440a      	add	r2, r1
 800383c:	609a      	str	r2, [r3, #8]
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40013800 	.word	0x40013800
 800384c:	51eb851f 	.word	0x51eb851f

08003850 <__errno>:
 8003850:	4b01      	ldr	r3, [pc, #4]	; (8003858 <__errno+0x8>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	2000000c 	.word	0x2000000c

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	2500      	movs	r5, #0
 8003860:	4e0c      	ldr	r6, [pc, #48]	; (8003894 <__libc_init_array+0x38>)
 8003862:	4c0d      	ldr	r4, [pc, #52]	; (8003898 <__libc_init_array+0x3c>)
 8003864:	1ba4      	subs	r4, r4, r6
 8003866:	10a4      	asrs	r4, r4, #2
 8003868:	42a5      	cmp	r5, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	f000 fc3e 	bl	80040ec <_init>
 8003870:	2500      	movs	r5, #0
 8003872:	4e0a      	ldr	r6, [pc, #40]	; (800389c <__libc_init_array+0x40>)
 8003874:	4c0a      	ldr	r4, [pc, #40]	; (80038a0 <__libc_init_array+0x44>)
 8003876:	1ba4      	subs	r4, r4, r6
 8003878:	10a4      	asrs	r4, r4, #2
 800387a:	42a5      	cmp	r5, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003884:	4798      	blx	r3
 8003886:	3501      	adds	r5, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800388e:	4798      	blx	r3
 8003890:	3501      	adds	r5, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	080042c4 	.word	0x080042c4
 8003898:	080042c4 	.word	0x080042c4
 800389c:	080042c4 	.word	0x080042c4
 80038a0:	080042c8 	.word	0x080042c8

080038a4 <memcpy>:
 80038a4:	b510      	push	{r4, lr}
 80038a6:	1e43      	subs	r3, r0, #1
 80038a8:	440a      	add	r2, r1
 80038aa:	4291      	cmp	r1, r2
 80038ac:	d100      	bne.n	80038b0 <memcpy+0xc>
 80038ae:	bd10      	pop	{r4, pc}
 80038b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038b8:	e7f7      	b.n	80038aa <memcpy+0x6>

080038ba <memset>:
 80038ba:	4603      	mov	r3, r0
 80038bc:	4402      	add	r2, r0
 80038be:	4293      	cmp	r3, r2
 80038c0:	d100      	bne.n	80038c4 <memset+0xa>
 80038c2:	4770      	bx	lr
 80038c4:	f803 1b01 	strb.w	r1, [r3], #1
 80038c8:	e7f9      	b.n	80038be <memset+0x4>
	...

080038cc <siprintf>:
 80038cc:	b40e      	push	{r1, r2, r3}
 80038ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038d2:	b500      	push	{lr}
 80038d4:	b09c      	sub	sp, #112	; 0x70
 80038d6:	ab1d      	add	r3, sp, #116	; 0x74
 80038d8:	9002      	str	r0, [sp, #8]
 80038da:	9006      	str	r0, [sp, #24]
 80038dc:	9107      	str	r1, [sp, #28]
 80038de:	9104      	str	r1, [sp, #16]
 80038e0:	4808      	ldr	r0, [pc, #32]	; (8003904 <siprintf+0x38>)
 80038e2:	4909      	ldr	r1, [pc, #36]	; (8003908 <siprintf+0x3c>)
 80038e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038e8:	9105      	str	r1, [sp, #20]
 80038ea:	6800      	ldr	r0, [r0, #0]
 80038ec:	a902      	add	r1, sp, #8
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	f000 f86e 	bl	80039d0 <_svfiprintf_r>
 80038f4:	2200      	movs	r2, #0
 80038f6:	9b02      	ldr	r3, [sp, #8]
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	b01c      	add	sp, #112	; 0x70
 80038fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003900:	b003      	add	sp, #12
 8003902:	4770      	bx	lr
 8003904:	2000000c 	.word	0x2000000c
 8003908:	ffff0208 	.word	0xffff0208

0800390c <strcpy>:
 800390c:	4603      	mov	r3, r0
 800390e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003912:	f803 2b01 	strb.w	r2, [r3], #1
 8003916:	2a00      	cmp	r2, #0
 8003918:	d1f9      	bne.n	800390e <strcpy+0x2>
 800391a:	4770      	bx	lr

0800391c <__ssputs_r>:
 800391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	688e      	ldr	r6, [r1, #8]
 8003922:	4682      	mov	sl, r0
 8003924:	429e      	cmp	r6, r3
 8003926:	460c      	mov	r4, r1
 8003928:	4690      	mov	r8, r2
 800392a:	4699      	mov	r9, r3
 800392c:	d837      	bhi.n	800399e <__ssputs_r+0x82>
 800392e:	898a      	ldrh	r2, [r1, #12]
 8003930:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003934:	d031      	beq.n	800399a <__ssputs_r+0x7e>
 8003936:	2302      	movs	r3, #2
 8003938:	6825      	ldr	r5, [r4, #0]
 800393a:	6909      	ldr	r1, [r1, #16]
 800393c:	1a6f      	subs	r7, r5, r1
 800393e:	6965      	ldr	r5, [r4, #20]
 8003940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003944:	fb95 f5f3 	sdiv	r5, r5, r3
 8003948:	f109 0301 	add.w	r3, r9, #1
 800394c:	443b      	add	r3, r7
 800394e:	429d      	cmp	r5, r3
 8003950:	bf38      	it	cc
 8003952:	461d      	movcc	r5, r3
 8003954:	0553      	lsls	r3, r2, #21
 8003956:	d530      	bpl.n	80039ba <__ssputs_r+0x9e>
 8003958:	4629      	mov	r1, r5
 800395a:	f000 fb2d 	bl	8003fb8 <_malloc_r>
 800395e:	4606      	mov	r6, r0
 8003960:	b950      	cbnz	r0, 8003978 <__ssputs_r+0x5c>
 8003962:	230c      	movs	r3, #12
 8003964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003968:	f8ca 3000 	str.w	r3, [sl]
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003978:	463a      	mov	r2, r7
 800397a:	6921      	ldr	r1, [r4, #16]
 800397c:	f7ff ff92 	bl	80038a4 <memcpy>
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	6126      	str	r6, [r4, #16]
 800398e:	443e      	add	r6, r7
 8003990:	6026      	str	r6, [r4, #0]
 8003992:	464e      	mov	r6, r9
 8003994:	6165      	str	r5, [r4, #20]
 8003996:	1bed      	subs	r5, r5, r7
 8003998:	60a5      	str	r5, [r4, #8]
 800399a:	454e      	cmp	r6, r9
 800399c:	d900      	bls.n	80039a0 <__ssputs_r+0x84>
 800399e:	464e      	mov	r6, r9
 80039a0:	4632      	mov	r2, r6
 80039a2:	4641      	mov	r1, r8
 80039a4:	6820      	ldr	r0, [r4, #0]
 80039a6:	f000 faa1 	bl	8003eec <memmove>
 80039aa:	68a3      	ldr	r3, [r4, #8]
 80039ac:	2000      	movs	r0, #0
 80039ae:	1b9b      	subs	r3, r3, r6
 80039b0:	60a3      	str	r3, [r4, #8]
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	441e      	add	r6, r3
 80039b6:	6026      	str	r6, [r4, #0]
 80039b8:	e7dc      	b.n	8003974 <__ssputs_r+0x58>
 80039ba:	462a      	mov	r2, r5
 80039bc:	f000 fb56 	bl	800406c <_realloc_r>
 80039c0:	4606      	mov	r6, r0
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d1e2      	bne.n	800398c <__ssputs_r+0x70>
 80039c6:	6921      	ldr	r1, [r4, #16]
 80039c8:	4650      	mov	r0, sl
 80039ca:	f000 faa9 	bl	8003f20 <_free_r>
 80039ce:	e7c8      	b.n	8003962 <__ssputs_r+0x46>

080039d0 <_svfiprintf_r>:
 80039d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d4:	461d      	mov	r5, r3
 80039d6:	898b      	ldrh	r3, [r1, #12]
 80039d8:	b09d      	sub	sp, #116	; 0x74
 80039da:	061f      	lsls	r7, r3, #24
 80039dc:	4680      	mov	r8, r0
 80039de:	460c      	mov	r4, r1
 80039e0:	4616      	mov	r6, r2
 80039e2:	d50f      	bpl.n	8003a04 <_svfiprintf_r+0x34>
 80039e4:	690b      	ldr	r3, [r1, #16]
 80039e6:	b96b      	cbnz	r3, 8003a04 <_svfiprintf_r+0x34>
 80039e8:	2140      	movs	r1, #64	; 0x40
 80039ea:	f000 fae5 	bl	8003fb8 <_malloc_r>
 80039ee:	6020      	str	r0, [r4, #0]
 80039f0:	6120      	str	r0, [r4, #16]
 80039f2:	b928      	cbnz	r0, 8003a00 <_svfiprintf_r+0x30>
 80039f4:	230c      	movs	r3, #12
 80039f6:	f8c8 3000 	str.w	r3, [r8]
 80039fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039fe:	e0c8      	b.n	8003b92 <_svfiprintf_r+0x1c2>
 8003a00:	2340      	movs	r3, #64	; 0x40
 8003a02:	6163      	str	r3, [r4, #20]
 8003a04:	2300      	movs	r3, #0
 8003a06:	9309      	str	r3, [sp, #36]	; 0x24
 8003a08:	2320      	movs	r3, #32
 8003a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a0e:	2330      	movs	r3, #48	; 0x30
 8003a10:	f04f 0b01 	mov.w	fp, #1
 8003a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a18:	9503      	str	r5, [sp, #12]
 8003a1a:	4637      	mov	r7, r6
 8003a1c:	463d      	mov	r5, r7
 8003a1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a22:	b10b      	cbz	r3, 8003a28 <_svfiprintf_r+0x58>
 8003a24:	2b25      	cmp	r3, #37	; 0x25
 8003a26:	d13e      	bne.n	8003aa6 <_svfiprintf_r+0xd6>
 8003a28:	ebb7 0a06 	subs.w	sl, r7, r6
 8003a2c:	d00b      	beq.n	8003a46 <_svfiprintf_r+0x76>
 8003a2e:	4653      	mov	r3, sl
 8003a30:	4632      	mov	r2, r6
 8003a32:	4621      	mov	r1, r4
 8003a34:	4640      	mov	r0, r8
 8003a36:	f7ff ff71 	bl	800391c <__ssputs_r>
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	f000 80a4 	beq.w	8003b88 <_svfiprintf_r+0x1b8>
 8003a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a42:	4453      	add	r3, sl
 8003a44:	9309      	str	r3, [sp, #36]	; 0x24
 8003a46:	783b      	ldrb	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 809d 	beq.w	8003b88 <_svfiprintf_r+0x1b8>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a58:	9304      	str	r3, [sp, #16]
 8003a5a:	9307      	str	r3, [sp, #28]
 8003a5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a60:	931a      	str	r3, [sp, #104]	; 0x68
 8003a62:	462f      	mov	r7, r5
 8003a64:	2205      	movs	r2, #5
 8003a66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003a6a:	4850      	ldr	r0, [pc, #320]	; (8003bac <_svfiprintf_r+0x1dc>)
 8003a6c:	f000 fa30 	bl	8003ed0 <memchr>
 8003a70:	9b04      	ldr	r3, [sp, #16]
 8003a72:	b9d0      	cbnz	r0, 8003aaa <_svfiprintf_r+0xda>
 8003a74:	06d9      	lsls	r1, r3, #27
 8003a76:	bf44      	itt	mi
 8003a78:	2220      	movmi	r2, #32
 8003a7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a7e:	071a      	lsls	r2, r3, #28
 8003a80:	bf44      	itt	mi
 8003a82:	222b      	movmi	r2, #43	; 0x2b
 8003a84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a88:	782a      	ldrb	r2, [r5, #0]
 8003a8a:	2a2a      	cmp	r2, #42	; 0x2a
 8003a8c:	d015      	beq.n	8003aba <_svfiprintf_r+0xea>
 8003a8e:	462f      	mov	r7, r5
 8003a90:	2000      	movs	r0, #0
 8003a92:	250a      	movs	r5, #10
 8003a94:	9a07      	ldr	r2, [sp, #28]
 8003a96:	4639      	mov	r1, r7
 8003a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a9c:	3b30      	subs	r3, #48	; 0x30
 8003a9e:	2b09      	cmp	r3, #9
 8003aa0:	d94d      	bls.n	8003b3e <_svfiprintf_r+0x16e>
 8003aa2:	b1b8      	cbz	r0, 8003ad4 <_svfiprintf_r+0x104>
 8003aa4:	e00f      	b.n	8003ac6 <_svfiprintf_r+0xf6>
 8003aa6:	462f      	mov	r7, r5
 8003aa8:	e7b8      	b.n	8003a1c <_svfiprintf_r+0x4c>
 8003aaa:	4a40      	ldr	r2, [pc, #256]	; (8003bac <_svfiprintf_r+0x1dc>)
 8003aac:	463d      	mov	r5, r7
 8003aae:	1a80      	subs	r0, r0, r2
 8003ab0:	fa0b f000 	lsl.w	r0, fp, r0
 8003ab4:	4318      	orrs	r0, r3
 8003ab6:	9004      	str	r0, [sp, #16]
 8003ab8:	e7d3      	b.n	8003a62 <_svfiprintf_r+0x92>
 8003aba:	9a03      	ldr	r2, [sp, #12]
 8003abc:	1d11      	adds	r1, r2, #4
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	9103      	str	r1, [sp, #12]
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	db01      	blt.n	8003aca <_svfiprintf_r+0xfa>
 8003ac6:	9207      	str	r2, [sp, #28]
 8003ac8:	e004      	b.n	8003ad4 <_svfiprintf_r+0x104>
 8003aca:	4252      	negs	r2, r2
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	9207      	str	r2, [sp, #28]
 8003ad2:	9304      	str	r3, [sp, #16]
 8003ad4:	783b      	ldrb	r3, [r7, #0]
 8003ad6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ad8:	d10c      	bne.n	8003af4 <_svfiprintf_r+0x124>
 8003ada:	787b      	ldrb	r3, [r7, #1]
 8003adc:	2b2a      	cmp	r3, #42	; 0x2a
 8003ade:	d133      	bne.n	8003b48 <_svfiprintf_r+0x178>
 8003ae0:	9b03      	ldr	r3, [sp, #12]
 8003ae2:	3702      	adds	r7, #2
 8003ae4:	1d1a      	adds	r2, r3, #4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	9203      	str	r2, [sp, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bfb8      	it	lt
 8003aee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003af2:	9305      	str	r3, [sp, #20]
 8003af4:	4d2e      	ldr	r5, [pc, #184]	; (8003bb0 <_svfiprintf_r+0x1e0>)
 8003af6:	2203      	movs	r2, #3
 8003af8:	7839      	ldrb	r1, [r7, #0]
 8003afa:	4628      	mov	r0, r5
 8003afc:	f000 f9e8 	bl	8003ed0 <memchr>
 8003b00:	b138      	cbz	r0, 8003b12 <_svfiprintf_r+0x142>
 8003b02:	2340      	movs	r3, #64	; 0x40
 8003b04:	1b40      	subs	r0, r0, r5
 8003b06:	fa03 f000 	lsl.w	r0, r3, r0
 8003b0a:	9b04      	ldr	r3, [sp, #16]
 8003b0c:	3701      	adds	r7, #1
 8003b0e:	4303      	orrs	r3, r0
 8003b10:	9304      	str	r3, [sp, #16]
 8003b12:	7839      	ldrb	r1, [r7, #0]
 8003b14:	2206      	movs	r2, #6
 8003b16:	4827      	ldr	r0, [pc, #156]	; (8003bb4 <_svfiprintf_r+0x1e4>)
 8003b18:	1c7e      	adds	r6, r7, #1
 8003b1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b1e:	f000 f9d7 	bl	8003ed0 <memchr>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d038      	beq.n	8003b98 <_svfiprintf_r+0x1c8>
 8003b26:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <_svfiprintf_r+0x1e8>)
 8003b28:	bb13      	cbnz	r3, 8003b70 <_svfiprintf_r+0x1a0>
 8003b2a:	9b03      	ldr	r3, [sp, #12]
 8003b2c:	3307      	adds	r3, #7
 8003b2e:	f023 0307 	bic.w	r3, r3, #7
 8003b32:	3308      	adds	r3, #8
 8003b34:	9303      	str	r3, [sp, #12]
 8003b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b38:	444b      	add	r3, r9
 8003b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3c:	e76d      	b.n	8003a1a <_svfiprintf_r+0x4a>
 8003b3e:	fb05 3202 	mla	r2, r5, r2, r3
 8003b42:	2001      	movs	r0, #1
 8003b44:	460f      	mov	r7, r1
 8003b46:	e7a6      	b.n	8003a96 <_svfiprintf_r+0xc6>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	250a      	movs	r5, #10
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	3701      	adds	r7, #1
 8003b50:	9305      	str	r3, [sp, #20]
 8003b52:	4638      	mov	r0, r7
 8003b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b58:	3a30      	subs	r2, #48	; 0x30
 8003b5a:	2a09      	cmp	r2, #9
 8003b5c:	d903      	bls.n	8003b66 <_svfiprintf_r+0x196>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0c8      	beq.n	8003af4 <_svfiprintf_r+0x124>
 8003b62:	9105      	str	r1, [sp, #20]
 8003b64:	e7c6      	b.n	8003af4 <_svfiprintf_r+0x124>
 8003b66:	fb05 2101 	mla	r1, r5, r1, r2
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	4607      	mov	r7, r0
 8003b6e:	e7f0      	b.n	8003b52 <_svfiprintf_r+0x182>
 8003b70:	ab03      	add	r3, sp, #12
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	4622      	mov	r2, r4
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <_svfiprintf_r+0x1ec>)
 8003b78:	a904      	add	r1, sp, #16
 8003b7a:	4640      	mov	r0, r8
 8003b7c:	f3af 8000 	nop.w
 8003b80:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003b84:	4681      	mov	r9, r0
 8003b86:	d1d6      	bne.n	8003b36 <_svfiprintf_r+0x166>
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	065b      	lsls	r3, r3, #25
 8003b8c:	f53f af35 	bmi.w	80039fa <_svfiprintf_r+0x2a>
 8003b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b92:	b01d      	add	sp, #116	; 0x74
 8003b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b98:	ab03      	add	r3, sp, #12
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <_svfiprintf_r+0x1ec>)
 8003ba0:	a904      	add	r1, sp, #16
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	f000 f882 	bl	8003cac <_printf_i>
 8003ba8:	e7ea      	b.n	8003b80 <_svfiprintf_r+0x1b0>
 8003baa:	bf00      	nop
 8003bac:	08004288 	.word	0x08004288
 8003bb0:	0800428e 	.word	0x0800428e
 8003bb4:	08004292 	.word	0x08004292
 8003bb8:	00000000 	.word	0x00000000
 8003bbc:	0800391d 	.word	0x0800391d

08003bc0 <_printf_common>:
 8003bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc4:	4691      	mov	r9, r2
 8003bc6:	461f      	mov	r7, r3
 8003bc8:	688a      	ldr	r2, [r1, #8]
 8003bca:	690b      	ldr	r3, [r1, #16]
 8003bcc:	4606      	mov	r6, r0
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	bfb8      	it	lt
 8003bd2:	4613      	movlt	r3, r2
 8003bd4:	f8c9 3000 	str.w	r3, [r9]
 8003bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bdc:	460c      	mov	r4, r1
 8003bde:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003be2:	b112      	cbz	r2, 8003bea <_printf_common+0x2a>
 8003be4:	3301      	adds	r3, #1
 8003be6:	f8c9 3000 	str.w	r3, [r9]
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	0699      	lsls	r1, r3, #26
 8003bee:	bf42      	ittt	mi
 8003bf0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003bf4:	3302      	addmi	r3, #2
 8003bf6:	f8c9 3000 	strmi.w	r3, [r9]
 8003bfa:	6825      	ldr	r5, [r4, #0]
 8003bfc:	f015 0506 	ands.w	r5, r5, #6
 8003c00:	d107      	bne.n	8003c12 <_printf_common+0x52>
 8003c02:	f104 0a19 	add.w	sl, r4, #25
 8003c06:	68e3      	ldr	r3, [r4, #12]
 8003c08:	f8d9 2000 	ldr.w	r2, [r9]
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	42ab      	cmp	r3, r5
 8003c10:	dc29      	bgt.n	8003c66 <_printf_common+0xa6>
 8003c12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c16:	6822      	ldr	r2, [r4, #0]
 8003c18:	3300      	adds	r3, #0
 8003c1a:	bf18      	it	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	0692      	lsls	r2, r2, #26
 8003c20:	d42e      	bmi.n	8003c80 <_printf_common+0xc0>
 8003c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c26:	4639      	mov	r1, r7
 8003c28:	4630      	mov	r0, r6
 8003c2a:	47c0      	blx	r8
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d021      	beq.n	8003c74 <_printf_common+0xb4>
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	68e5      	ldr	r5, [r4, #12]
 8003c34:	f003 0306 	and.w	r3, r3, #6
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	bf18      	it	ne
 8003c3c:	2500      	movne	r5, #0
 8003c3e:	f8d9 2000 	ldr.w	r2, [r9]
 8003c42:	f04f 0900 	mov.w	r9, #0
 8003c46:	bf08      	it	eq
 8003c48:	1aad      	subeq	r5, r5, r2
 8003c4a:	68a3      	ldr	r3, [r4, #8]
 8003c4c:	6922      	ldr	r2, [r4, #16]
 8003c4e:	bf08      	it	eq
 8003c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c54:	4293      	cmp	r3, r2
 8003c56:	bfc4      	itt	gt
 8003c58:	1a9b      	subgt	r3, r3, r2
 8003c5a:	18ed      	addgt	r5, r5, r3
 8003c5c:	341a      	adds	r4, #26
 8003c5e:	454d      	cmp	r5, r9
 8003c60:	d11a      	bne.n	8003c98 <_printf_common+0xd8>
 8003c62:	2000      	movs	r0, #0
 8003c64:	e008      	b.n	8003c78 <_printf_common+0xb8>
 8003c66:	2301      	movs	r3, #1
 8003c68:	4652      	mov	r2, sl
 8003c6a:	4639      	mov	r1, r7
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	47c0      	blx	r8
 8003c70:	3001      	adds	r0, #1
 8003c72:	d103      	bne.n	8003c7c <_printf_common+0xbc>
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7c:	3501      	adds	r5, #1
 8003c7e:	e7c2      	b.n	8003c06 <_printf_common+0x46>
 8003c80:	2030      	movs	r0, #48	; 0x30
 8003c82:	18e1      	adds	r1, r4, r3
 8003c84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c8e:	4422      	add	r2, r4
 8003c90:	3302      	adds	r3, #2
 8003c92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c96:	e7c4      	b.n	8003c22 <_printf_common+0x62>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	4622      	mov	r2, r4
 8003c9c:	4639      	mov	r1, r7
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	47c0      	blx	r8
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d0e6      	beq.n	8003c74 <_printf_common+0xb4>
 8003ca6:	f109 0901 	add.w	r9, r9, #1
 8003caa:	e7d8      	b.n	8003c5e <_printf_common+0x9e>

08003cac <_printf_i>:
 8003cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	7e09      	ldrb	r1, [r1, #24]
 8003cb8:	b085      	sub	sp, #20
 8003cba:	296e      	cmp	r1, #110	; 0x6e
 8003cbc:	4617      	mov	r7, r2
 8003cbe:	4606      	mov	r6, r0
 8003cc0:	4698      	mov	r8, r3
 8003cc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cc4:	f000 80b3 	beq.w	8003e2e <_printf_i+0x182>
 8003cc8:	d822      	bhi.n	8003d10 <_printf_i+0x64>
 8003cca:	2963      	cmp	r1, #99	; 0x63
 8003ccc:	d036      	beq.n	8003d3c <_printf_i+0x90>
 8003cce:	d80a      	bhi.n	8003ce6 <_printf_i+0x3a>
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	f000 80b9 	beq.w	8003e48 <_printf_i+0x19c>
 8003cd6:	2958      	cmp	r1, #88	; 0x58
 8003cd8:	f000 8083 	beq.w	8003de2 <_printf_i+0x136>
 8003cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ce0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ce4:	e032      	b.n	8003d4c <_printf_i+0xa0>
 8003ce6:	2964      	cmp	r1, #100	; 0x64
 8003ce8:	d001      	beq.n	8003cee <_printf_i+0x42>
 8003cea:	2969      	cmp	r1, #105	; 0x69
 8003cec:	d1f6      	bne.n	8003cdc <_printf_i+0x30>
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	6813      	ldr	r3, [r2, #0]
 8003cf2:	0605      	lsls	r5, r0, #24
 8003cf4:	f103 0104 	add.w	r1, r3, #4
 8003cf8:	d52a      	bpl.n	8003d50 <_printf_i+0xa4>
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6011      	str	r1, [r2, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	da03      	bge.n	8003d0a <_printf_i+0x5e>
 8003d02:	222d      	movs	r2, #45	; 0x2d
 8003d04:	425b      	negs	r3, r3
 8003d06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d0a:	486f      	ldr	r0, [pc, #444]	; (8003ec8 <_printf_i+0x21c>)
 8003d0c:	220a      	movs	r2, #10
 8003d0e:	e039      	b.n	8003d84 <_printf_i+0xd8>
 8003d10:	2973      	cmp	r1, #115	; 0x73
 8003d12:	f000 809d 	beq.w	8003e50 <_printf_i+0x1a4>
 8003d16:	d808      	bhi.n	8003d2a <_printf_i+0x7e>
 8003d18:	296f      	cmp	r1, #111	; 0x6f
 8003d1a:	d020      	beq.n	8003d5e <_printf_i+0xb2>
 8003d1c:	2970      	cmp	r1, #112	; 0x70
 8003d1e:	d1dd      	bne.n	8003cdc <_printf_i+0x30>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	f043 0320 	orr.w	r3, r3, #32
 8003d26:	6023      	str	r3, [r4, #0]
 8003d28:	e003      	b.n	8003d32 <_printf_i+0x86>
 8003d2a:	2975      	cmp	r1, #117	; 0x75
 8003d2c:	d017      	beq.n	8003d5e <_printf_i+0xb2>
 8003d2e:	2978      	cmp	r1, #120	; 0x78
 8003d30:	d1d4      	bne.n	8003cdc <_printf_i+0x30>
 8003d32:	2378      	movs	r3, #120	; 0x78
 8003d34:	4865      	ldr	r0, [pc, #404]	; (8003ecc <_printf_i+0x220>)
 8003d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d3a:	e055      	b.n	8003de8 <_printf_i+0x13c>
 8003d3c:	6813      	ldr	r3, [r2, #0]
 8003d3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d42:	1d19      	adds	r1, r3, #4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6011      	str	r1, [r2, #0]
 8003d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e08c      	b.n	8003e6a <_printf_i+0x1be>
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d56:	6011      	str	r1, [r2, #0]
 8003d58:	bf18      	it	ne
 8003d5a:	b21b      	sxthne	r3, r3
 8003d5c:	e7cf      	b.n	8003cfe <_printf_i+0x52>
 8003d5e:	6813      	ldr	r3, [r2, #0]
 8003d60:	6825      	ldr	r5, [r4, #0]
 8003d62:	1d18      	adds	r0, r3, #4
 8003d64:	6010      	str	r0, [r2, #0]
 8003d66:	0628      	lsls	r0, r5, #24
 8003d68:	d501      	bpl.n	8003d6e <_printf_i+0xc2>
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	e002      	b.n	8003d74 <_printf_i+0xc8>
 8003d6e:	0668      	lsls	r0, r5, #25
 8003d70:	d5fb      	bpl.n	8003d6a <_printf_i+0xbe>
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	296f      	cmp	r1, #111	; 0x6f
 8003d76:	bf14      	ite	ne
 8003d78:	220a      	movne	r2, #10
 8003d7a:	2208      	moveq	r2, #8
 8003d7c:	4852      	ldr	r0, [pc, #328]	; (8003ec8 <_printf_i+0x21c>)
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d84:	6865      	ldr	r5, [r4, #4]
 8003d86:	2d00      	cmp	r5, #0
 8003d88:	60a5      	str	r5, [r4, #8]
 8003d8a:	f2c0 8095 	blt.w	8003eb8 <_printf_i+0x20c>
 8003d8e:	6821      	ldr	r1, [r4, #0]
 8003d90:	f021 0104 	bic.w	r1, r1, #4
 8003d94:	6021      	str	r1, [r4, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d13d      	bne.n	8003e16 <_printf_i+0x16a>
 8003d9a:	2d00      	cmp	r5, #0
 8003d9c:	f040 808e 	bne.w	8003ebc <_printf_i+0x210>
 8003da0:	4665      	mov	r5, ip
 8003da2:	2a08      	cmp	r2, #8
 8003da4:	d10b      	bne.n	8003dbe <_printf_i+0x112>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	07db      	lsls	r3, r3, #31
 8003daa:	d508      	bpl.n	8003dbe <_printf_i+0x112>
 8003dac:	6923      	ldr	r3, [r4, #16]
 8003dae:	6862      	ldr	r2, [r4, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	bfde      	ittt	le
 8003db4:	2330      	movle	r3, #48	; 0x30
 8003db6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003dbe:	ebac 0305 	sub.w	r3, ip, r5
 8003dc2:	6123      	str	r3, [r4, #16]
 8003dc4:	f8cd 8000 	str.w	r8, [sp]
 8003dc8:	463b      	mov	r3, r7
 8003dca:	aa03      	add	r2, sp, #12
 8003dcc:	4621      	mov	r1, r4
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f7ff fef6 	bl	8003bc0 <_printf_common>
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	d14d      	bne.n	8003e74 <_printf_i+0x1c8>
 8003dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ddc:	b005      	add	sp, #20
 8003dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003de2:	4839      	ldr	r0, [pc, #228]	; (8003ec8 <_printf_i+0x21c>)
 8003de4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003de8:	6813      	ldr	r3, [r2, #0]
 8003dea:	6821      	ldr	r1, [r4, #0]
 8003dec:	1d1d      	adds	r5, r3, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6015      	str	r5, [r2, #0]
 8003df2:	060a      	lsls	r2, r1, #24
 8003df4:	d50b      	bpl.n	8003e0e <_printf_i+0x162>
 8003df6:	07ca      	lsls	r2, r1, #31
 8003df8:	bf44      	itt	mi
 8003dfa:	f041 0120 	orrmi.w	r1, r1, #32
 8003dfe:	6021      	strmi	r1, [r4, #0]
 8003e00:	b91b      	cbnz	r3, 8003e0a <_printf_i+0x15e>
 8003e02:	6822      	ldr	r2, [r4, #0]
 8003e04:	f022 0220 	bic.w	r2, r2, #32
 8003e08:	6022      	str	r2, [r4, #0]
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	e7b7      	b.n	8003d7e <_printf_i+0xd2>
 8003e0e:	064d      	lsls	r5, r1, #25
 8003e10:	bf48      	it	mi
 8003e12:	b29b      	uxthmi	r3, r3
 8003e14:	e7ef      	b.n	8003df6 <_printf_i+0x14a>
 8003e16:	4665      	mov	r5, ip
 8003e18:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e1c:	fb02 3311 	mls	r3, r2, r1, r3
 8003e20:	5cc3      	ldrb	r3, [r0, r3]
 8003e22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e26:	460b      	mov	r3, r1
 8003e28:	2900      	cmp	r1, #0
 8003e2a:	d1f5      	bne.n	8003e18 <_printf_i+0x16c>
 8003e2c:	e7b9      	b.n	8003da2 <_printf_i+0xf6>
 8003e2e:	6813      	ldr	r3, [r2, #0]
 8003e30:	6825      	ldr	r5, [r4, #0]
 8003e32:	1d18      	adds	r0, r3, #4
 8003e34:	6961      	ldr	r1, [r4, #20]
 8003e36:	6010      	str	r0, [r2, #0]
 8003e38:	0628      	lsls	r0, r5, #24
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	d501      	bpl.n	8003e42 <_printf_i+0x196>
 8003e3e:	6019      	str	r1, [r3, #0]
 8003e40:	e002      	b.n	8003e48 <_printf_i+0x19c>
 8003e42:	066a      	lsls	r2, r5, #25
 8003e44:	d5fb      	bpl.n	8003e3e <_printf_i+0x192>
 8003e46:	8019      	strh	r1, [r3, #0]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	4665      	mov	r5, ip
 8003e4c:	6123      	str	r3, [r4, #16]
 8003e4e:	e7b9      	b.n	8003dc4 <_printf_i+0x118>
 8003e50:	6813      	ldr	r3, [r2, #0]
 8003e52:	1d19      	adds	r1, r3, #4
 8003e54:	6011      	str	r1, [r2, #0]
 8003e56:	681d      	ldr	r5, [r3, #0]
 8003e58:	6862      	ldr	r2, [r4, #4]
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 f837 	bl	8003ed0 <memchr>
 8003e62:	b108      	cbz	r0, 8003e68 <_printf_i+0x1bc>
 8003e64:	1b40      	subs	r0, r0, r5
 8003e66:	6060      	str	r0, [r4, #4]
 8003e68:	6863      	ldr	r3, [r4, #4]
 8003e6a:	6123      	str	r3, [r4, #16]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e72:	e7a7      	b.n	8003dc4 <_printf_i+0x118>
 8003e74:	6923      	ldr	r3, [r4, #16]
 8003e76:	462a      	mov	r2, r5
 8003e78:	4639      	mov	r1, r7
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	47c0      	blx	r8
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d0aa      	beq.n	8003dd8 <_printf_i+0x12c>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	079b      	lsls	r3, r3, #30
 8003e86:	d413      	bmi.n	8003eb0 <_printf_i+0x204>
 8003e88:	68e0      	ldr	r0, [r4, #12]
 8003e8a:	9b03      	ldr	r3, [sp, #12]
 8003e8c:	4298      	cmp	r0, r3
 8003e8e:	bfb8      	it	lt
 8003e90:	4618      	movlt	r0, r3
 8003e92:	e7a3      	b.n	8003ddc <_printf_i+0x130>
 8003e94:	2301      	movs	r3, #1
 8003e96:	464a      	mov	r2, r9
 8003e98:	4639      	mov	r1, r7
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	47c0      	blx	r8
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d09a      	beq.n	8003dd8 <_printf_i+0x12c>
 8003ea2:	3501      	adds	r5, #1
 8003ea4:	68e3      	ldr	r3, [r4, #12]
 8003ea6:	9a03      	ldr	r2, [sp, #12]
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	42ab      	cmp	r3, r5
 8003eac:	dcf2      	bgt.n	8003e94 <_printf_i+0x1e8>
 8003eae:	e7eb      	b.n	8003e88 <_printf_i+0x1dc>
 8003eb0:	2500      	movs	r5, #0
 8003eb2:	f104 0919 	add.w	r9, r4, #25
 8003eb6:	e7f5      	b.n	8003ea4 <_printf_i+0x1f8>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1ac      	bne.n	8003e16 <_printf_i+0x16a>
 8003ebc:	7803      	ldrb	r3, [r0, #0]
 8003ebe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ec2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ec6:	e76c      	b.n	8003da2 <_printf_i+0xf6>
 8003ec8:	08004299 	.word	0x08004299
 8003ecc:	080042aa 	.word	0x080042aa

08003ed0 <memchr>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	b2c9      	uxtb	r1, r1
 8003ed4:	4402      	add	r2, r0
 8003ed6:	4290      	cmp	r0, r2
 8003ed8:	4603      	mov	r3, r0
 8003eda:	d101      	bne.n	8003ee0 <memchr+0x10>
 8003edc:	2300      	movs	r3, #0
 8003ede:	e003      	b.n	8003ee8 <memchr+0x18>
 8003ee0:	781c      	ldrb	r4, [r3, #0]
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	428c      	cmp	r4, r1
 8003ee6:	d1f6      	bne.n	8003ed6 <memchr+0x6>
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd10      	pop	{r4, pc}

08003eec <memmove>:
 8003eec:	4288      	cmp	r0, r1
 8003eee:	b510      	push	{r4, lr}
 8003ef0:	eb01 0302 	add.w	r3, r1, r2
 8003ef4:	d807      	bhi.n	8003f06 <memmove+0x1a>
 8003ef6:	1e42      	subs	r2, r0, #1
 8003ef8:	4299      	cmp	r1, r3
 8003efa:	d00a      	beq.n	8003f12 <memmove+0x26>
 8003efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f00:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003f04:	e7f8      	b.n	8003ef8 <memmove+0xc>
 8003f06:	4283      	cmp	r3, r0
 8003f08:	d9f5      	bls.n	8003ef6 <memmove+0xa>
 8003f0a:	1881      	adds	r1, r0, r2
 8003f0c:	1ad2      	subs	r2, r2, r3
 8003f0e:	42d3      	cmn	r3, r2
 8003f10:	d100      	bne.n	8003f14 <memmove+0x28>
 8003f12:	bd10      	pop	{r4, pc}
 8003f14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003f1c:	e7f7      	b.n	8003f0e <memmove+0x22>
	...

08003f20 <_free_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4605      	mov	r5, r0
 8003f24:	2900      	cmp	r1, #0
 8003f26:	d043      	beq.n	8003fb0 <_free_r+0x90>
 8003f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f2c:	1f0c      	subs	r4, r1, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bfb8      	it	lt
 8003f32:	18e4      	addlt	r4, r4, r3
 8003f34:	f000 f8d0 	bl	80040d8 <__malloc_lock>
 8003f38:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <_free_r+0x94>)
 8003f3a:	6813      	ldr	r3, [r2, #0]
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	b933      	cbnz	r3, 8003f4e <_free_r+0x2e>
 8003f40:	6063      	str	r3, [r4, #4]
 8003f42:	6014      	str	r4, [r2, #0]
 8003f44:	4628      	mov	r0, r5
 8003f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f4a:	f000 b8c6 	b.w	80040da <__malloc_unlock>
 8003f4e:	42a3      	cmp	r3, r4
 8003f50:	d90b      	bls.n	8003f6a <_free_r+0x4a>
 8003f52:	6821      	ldr	r1, [r4, #0]
 8003f54:	1862      	adds	r2, r4, r1
 8003f56:	4293      	cmp	r3, r2
 8003f58:	bf01      	itttt	eq
 8003f5a:	681a      	ldreq	r2, [r3, #0]
 8003f5c:	685b      	ldreq	r3, [r3, #4]
 8003f5e:	1852      	addeq	r2, r2, r1
 8003f60:	6022      	streq	r2, [r4, #0]
 8003f62:	6063      	str	r3, [r4, #4]
 8003f64:	6004      	str	r4, [r0, #0]
 8003f66:	e7ed      	b.n	8003f44 <_free_r+0x24>
 8003f68:	4613      	mov	r3, r2
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	b10a      	cbz	r2, 8003f72 <_free_r+0x52>
 8003f6e:	42a2      	cmp	r2, r4
 8003f70:	d9fa      	bls.n	8003f68 <_free_r+0x48>
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	1858      	adds	r0, r3, r1
 8003f76:	42a0      	cmp	r0, r4
 8003f78:	d10b      	bne.n	8003f92 <_free_r+0x72>
 8003f7a:	6820      	ldr	r0, [r4, #0]
 8003f7c:	4401      	add	r1, r0
 8003f7e:	1858      	adds	r0, r3, r1
 8003f80:	4282      	cmp	r2, r0
 8003f82:	6019      	str	r1, [r3, #0]
 8003f84:	d1de      	bne.n	8003f44 <_free_r+0x24>
 8003f86:	6810      	ldr	r0, [r2, #0]
 8003f88:	6852      	ldr	r2, [r2, #4]
 8003f8a:	4401      	add	r1, r0
 8003f8c:	6019      	str	r1, [r3, #0]
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	e7d8      	b.n	8003f44 <_free_r+0x24>
 8003f92:	d902      	bls.n	8003f9a <_free_r+0x7a>
 8003f94:	230c      	movs	r3, #12
 8003f96:	602b      	str	r3, [r5, #0]
 8003f98:	e7d4      	b.n	8003f44 <_free_r+0x24>
 8003f9a:	6820      	ldr	r0, [r4, #0]
 8003f9c:	1821      	adds	r1, r4, r0
 8003f9e:	428a      	cmp	r2, r1
 8003fa0:	bf01      	itttt	eq
 8003fa2:	6811      	ldreq	r1, [r2, #0]
 8003fa4:	6852      	ldreq	r2, [r2, #4]
 8003fa6:	1809      	addeq	r1, r1, r0
 8003fa8:	6021      	streq	r1, [r4, #0]
 8003faa:	6062      	str	r2, [r4, #4]
 8003fac:	605c      	str	r4, [r3, #4]
 8003fae:	e7c9      	b.n	8003f44 <_free_r+0x24>
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
 8003fb2:	bf00      	nop
 8003fb4:	2000009c 	.word	0x2000009c

08003fb8 <_malloc_r>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	1ccd      	adds	r5, r1, #3
 8003fbc:	f025 0503 	bic.w	r5, r5, #3
 8003fc0:	3508      	adds	r5, #8
 8003fc2:	2d0c      	cmp	r5, #12
 8003fc4:	bf38      	it	cc
 8003fc6:	250c      	movcc	r5, #12
 8003fc8:	2d00      	cmp	r5, #0
 8003fca:	4606      	mov	r6, r0
 8003fcc:	db01      	blt.n	8003fd2 <_malloc_r+0x1a>
 8003fce:	42a9      	cmp	r1, r5
 8003fd0:	d903      	bls.n	8003fda <_malloc_r+0x22>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	6033      	str	r3, [r6, #0]
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
 8003fda:	f000 f87d 	bl	80040d8 <__malloc_lock>
 8003fde:	4a21      	ldr	r2, [pc, #132]	; (8004064 <_malloc_r+0xac>)
 8003fe0:	6814      	ldr	r4, [r2, #0]
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	b991      	cbnz	r1, 800400c <_malloc_r+0x54>
 8003fe6:	4c20      	ldr	r4, [pc, #128]	; (8004068 <_malloc_r+0xb0>)
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	b91b      	cbnz	r3, 8003ff4 <_malloc_r+0x3c>
 8003fec:	4630      	mov	r0, r6
 8003fee:	f000 f863 	bl	80040b8 <_sbrk_r>
 8003ff2:	6020      	str	r0, [r4, #0]
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f000 f85e 	bl	80040b8 <_sbrk_r>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	d124      	bne.n	800404a <_malloc_r+0x92>
 8004000:	230c      	movs	r3, #12
 8004002:	4630      	mov	r0, r6
 8004004:	6033      	str	r3, [r6, #0]
 8004006:	f000 f868 	bl	80040da <__malloc_unlock>
 800400a:	e7e4      	b.n	8003fd6 <_malloc_r+0x1e>
 800400c:	680b      	ldr	r3, [r1, #0]
 800400e:	1b5b      	subs	r3, r3, r5
 8004010:	d418      	bmi.n	8004044 <_malloc_r+0x8c>
 8004012:	2b0b      	cmp	r3, #11
 8004014:	d90f      	bls.n	8004036 <_malloc_r+0x7e>
 8004016:	600b      	str	r3, [r1, #0]
 8004018:	18cc      	adds	r4, r1, r3
 800401a:	50cd      	str	r5, [r1, r3]
 800401c:	4630      	mov	r0, r6
 800401e:	f000 f85c 	bl	80040da <__malloc_unlock>
 8004022:	f104 000b 	add.w	r0, r4, #11
 8004026:	1d23      	adds	r3, r4, #4
 8004028:	f020 0007 	bic.w	r0, r0, #7
 800402c:	1ac3      	subs	r3, r0, r3
 800402e:	d0d3      	beq.n	8003fd8 <_malloc_r+0x20>
 8004030:	425a      	negs	r2, r3
 8004032:	50e2      	str	r2, [r4, r3]
 8004034:	e7d0      	b.n	8003fd8 <_malloc_r+0x20>
 8004036:	684b      	ldr	r3, [r1, #4]
 8004038:	428c      	cmp	r4, r1
 800403a:	bf16      	itet	ne
 800403c:	6063      	strne	r3, [r4, #4]
 800403e:	6013      	streq	r3, [r2, #0]
 8004040:	460c      	movne	r4, r1
 8004042:	e7eb      	b.n	800401c <_malloc_r+0x64>
 8004044:	460c      	mov	r4, r1
 8004046:	6849      	ldr	r1, [r1, #4]
 8004048:	e7cc      	b.n	8003fe4 <_malloc_r+0x2c>
 800404a:	1cc4      	adds	r4, r0, #3
 800404c:	f024 0403 	bic.w	r4, r4, #3
 8004050:	42a0      	cmp	r0, r4
 8004052:	d005      	beq.n	8004060 <_malloc_r+0xa8>
 8004054:	1a21      	subs	r1, r4, r0
 8004056:	4630      	mov	r0, r6
 8004058:	f000 f82e 	bl	80040b8 <_sbrk_r>
 800405c:	3001      	adds	r0, #1
 800405e:	d0cf      	beq.n	8004000 <_malloc_r+0x48>
 8004060:	6025      	str	r5, [r4, #0]
 8004062:	e7db      	b.n	800401c <_malloc_r+0x64>
 8004064:	2000009c 	.word	0x2000009c
 8004068:	200000a0 	.word	0x200000a0

0800406c <_realloc_r>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	4607      	mov	r7, r0
 8004070:	4614      	mov	r4, r2
 8004072:	460e      	mov	r6, r1
 8004074:	b921      	cbnz	r1, 8004080 <_realloc_r+0x14>
 8004076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800407a:	4611      	mov	r1, r2
 800407c:	f7ff bf9c 	b.w	8003fb8 <_malloc_r>
 8004080:	b922      	cbnz	r2, 800408c <_realloc_r+0x20>
 8004082:	f7ff ff4d 	bl	8003f20 <_free_r>
 8004086:	4625      	mov	r5, r4
 8004088:	4628      	mov	r0, r5
 800408a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800408c:	f000 f826 	bl	80040dc <_malloc_usable_size_r>
 8004090:	42a0      	cmp	r0, r4
 8004092:	d20f      	bcs.n	80040b4 <_realloc_r+0x48>
 8004094:	4621      	mov	r1, r4
 8004096:	4638      	mov	r0, r7
 8004098:	f7ff ff8e 	bl	8003fb8 <_malloc_r>
 800409c:	4605      	mov	r5, r0
 800409e:	2800      	cmp	r0, #0
 80040a0:	d0f2      	beq.n	8004088 <_realloc_r+0x1c>
 80040a2:	4631      	mov	r1, r6
 80040a4:	4622      	mov	r2, r4
 80040a6:	f7ff fbfd 	bl	80038a4 <memcpy>
 80040aa:	4631      	mov	r1, r6
 80040ac:	4638      	mov	r0, r7
 80040ae:	f7ff ff37 	bl	8003f20 <_free_r>
 80040b2:	e7e9      	b.n	8004088 <_realloc_r+0x1c>
 80040b4:	4635      	mov	r5, r6
 80040b6:	e7e7      	b.n	8004088 <_realloc_r+0x1c>

080040b8 <_sbrk_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	2300      	movs	r3, #0
 80040bc:	4c05      	ldr	r4, [pc, #20]	; (80040d4 <_sbrk_r+0x1c>)
 80040be:	4605      	mov	r5, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	f7fc ff2a 	bl	8000f1c <_sbrk>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_sbrk_r+0x1a>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_sbrk_r+0x1a>
 80040d0:	602b      	str	r3, [r5, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	20000284 	.word	0x20000284

080040d8 <__malloc_lock>:
 80040d8:	4770      	bx	lr

080040da <__malloc_unlock>:
 80040da:	4770      	bx	lr

080040dc <_malloc_usable_size_r>:
 80040dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e0:	1f18      	subs	r0, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bfbc      	itt	lt
 80040e6:	580b      	ldrlt	r3, [r1, r0]
 80040e8:	18c0      	addlt	r0, r0, r3
 80040ea:	4770      	bx	lr

080040ec <_init>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr

080040f8 <_fini>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	bf00      	nop
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr
