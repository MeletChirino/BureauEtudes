
WifiModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035dc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f0  080037f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037f8  080037f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f8  080037f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000000c  0800380c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  0800380c  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae0b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c11  00000000  00000000  0002ae40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d8  00000000  00000000  0002ca58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002d430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000253e  00000000  00000000  0002dd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000901b  00000000  00000000  00030276  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008580a  00000000  00000000  00039291  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bea9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a0  00000000  00000000  000beb18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003700 	.word	0x08003700

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08003700 	.word	0x08003700

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800019c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a0:	f000 b974 	b.w	800048c <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	468c      	mov	ip, r1
 80001c2:	4604      	mov	r4, r0
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d14b      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4615      	mov	r5, r2
 80001ce:	d967      	bls.n	80002a0 <__udivmoddi4+0xe4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0720 	rsb	r7, r2, #32
 80001da:	fa01 f302 	lsl.w	r3, r1, r2
 80001de:	fa20 f707 	lsr.w	r7, r0, r7
 80001e2:	4095      	lsls	r5, r2
 80001e4:	ea47 0c03 	orr.w	ip, r7, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001ee:	fbbc f7fe 	udiv	r7, ip, lr
 80001f2:	fa1f f885 	uxth.w	r8, r5
 80001f6:	fb0e c317 	mls	r3, lr, r7, ip
 80001fa:	fb07 f908 	mul.w	r9, r7, r8
 80001fe:	0c21      	lsrs	r1, r4, #16
 8000200:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000204:	4599      	cmp	r9, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18eb      	adds	r3, r5, r3
 800020a:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 800020e:	f080 811c 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000212:	4599      	cmp	r9, r3
 8000214:	f240 8119 	bls.w	800044a <__udivmoddi4+0x28e>
 8000218:	3f02      	subs	r7, #2
 800021a:	442b      	add	r3, r5
 800021c:	eba3 0309 	sub.w	r3, r3, r9
 8000220:	fbb3 f0fe 	udiv	r0, r3, lr
 8000224:	fb0e 3310 	mls	r3, lr, r0, r3
 8000228:	fb00 f108 	mul.w	r1, r0, r8
 800022c:	b2a4      	uxth	r4, r4
 800022e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000232:	42a1      	cmp	r1, r4
 8000234:	d909      	bls.n	800024a <__udivmoddi4+0x8e>
 8000236:	192c      	adds	r4, r5, r4
 8000238:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023c:	f080 8107 	bcs.w	800044e <__udivmoddi4+0x292>
 8000240:	42a1      	cmp	r1, r4
 8000242:	f240 8104 	bls.w	800044e <__udivmoddi4+0x292>
 8000246:	3802      	subs	r0, #2
 8000248:	442c      	add	r4, r5
 800024a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024e:	2700      	movs	r7, #0
 8000250:	1a64      	subs	r4, r4, r1
 8000252:	b11e      	cbz	r6, 800025c <__udivmoddi4+0xa0>
 8000254:	2300      	movs	r3, #0
 8000256:	40d4      	lsrs	r4, r2
 8000258:	e9c6 4300 	strd	r4, r3, [r6]
 800025c:	4639      	mov	r1, r7
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0xbe>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80ec 	beq.w	8000444 <__udivmoddi4+0x288>
 800026c:	2700      	movs	r7, #0
 800026e:	e9c6 0100 	strd	r0, r1, [r6]
 8000272:	4638      	mov	r0, r7
 8000274:	4639      	mov	r1, r7
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f783 	clz	r7, r3
 800027e:	2f00      	cmp	r7, #0
 8000280:	d148      	bne.n	8000314 <__udivmoddi4+0x158>
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd0>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80fb 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb61 0303 	sbc.w	r3, r1, r3
 8000292:	2001      	movs	r0, #1
 8000294:	469c      	mov	ip, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e0      	beq.n	800025c <__udivmoddi4+0xa0>
 800029a:	e9c6 4c00 	strd	r4, ip, [r6]
 800029e:	e7dd      	b.n	800025c <__udivmoddi4+0xa0>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xe8>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 808f 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ae:	2701      	movs	r7, #1
 80002b0:	1b49      	subs	r1, r1, r5
 80002b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002b6:	fa1f f985 	uxth.w	r9, r5
 80002ba:	fbb1 fef8 	udiv	lr, r1, r8
 80002be:	fb08 111e 	mls	r1, r8, lr, r1
 80002c2:	fb09 f00e 	mul.w	r0, r9, lr
 80002c6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ca:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002ce:	4298      	cmp	r0, r3
 80002d0:	d907      	bls.n	80002e2 <__udivmoddi4+0x126>
 80002d2:	18eb      	adds	r3, r5, r3
 80002d4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x124>
 80002da:	4298      	cmp	r0, r3
 80002dc:	f200 80cd 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002e0:	468e      	mov	lr, r1
 80002e2:	1a1b      	subs	r3, r3, r0
 80002e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ec:	fb09 f900 	mul.w	r9, r9, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	d907      	bls.n	800030a <__udivmoddi4+0x14e>
 80002fa:	192c      	adds	r4, r5, r4
 80002fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x14c>
 8000302:	45a1      	cmp	r9, r4
 8000304:	f200 80b6 	bhi.w	8000474 <__udivmoddi4+0x2b8>
 8000308:	4618      	mov	r0, r3
 800030a:	eba4 0409 	sub.w	r4, r4, r9
 800030e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000312:	e79e      	b.n	8000252 <__udivmoddi4+0x96>
 8000314:	f1c7 0520 	rsb	r5, r7, #32
 8000318:	40bb      	lsls	r3, r7
 800031a:	fa22 fc05 	lsr.w	ip, r2, r5
 800031e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000322:	fa21 f405 	lsr.w	r4, r1, r5
 8000326:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800032a:	fbb4 f9fe 	udiv	r9, r4, lr
 800032e:	fa1f f88c 	uxth.w	r8, ip
 8000332:	fb0e 4419 	mls	r4, lr, r9, r4
 8000336:	fa20 f305 	lsr.w	r3, r0, r5
 800033a:	40b9      	lsls	r1, r7
 800033c:	fb09 fa08 	mul.w	sl, r9, r8
 8000340:	4319      	orrs	r1, r3
 8000342:	0c0b      	lsrs	r3, r1, #16
 8000344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000348:	45a2      	cmp	sl, r4
 800034a:	fa02 f207 	lsl.w	r2, r2, r7
 800034e:	fa00 f307 	lsl.w	r3, r0, r7
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800035c:	f080 8088 	bcs.w	8000470 <__udivmoddi4+0x2b4>
 8000360:	45a2      	cmp	sl, r4
 8000362:	f240 8085 	bls.w	8000470 <__udivmoddi4+0x2b4>
 8000366:	f1a9 0902 	sub.w	r9, r9, #2
 800036a:	4464      	add	r4, ip
 800036c:	eba4 040a 	sub.w	r4, r4, sl
 8000370:	fbb4 f0fe 	udiv	r0, r4, lr
 8000374:	fb0e 4410 	mls	r4, lr, r0, r4
 8000378:	fb00 fa08 	mul.w	sl, r0, r8
 800037c:	b289      	uxth	r1, r1
 800037e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000382:	45a2      	cmp	sl, r4
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x1dc>
 8000386:	eb1c 0404 	adds.w	r4, ip, r4
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038e:	d26b      	bcs.n	8000468 <__udivmoddi4+0x2ac>
 8000390:	45a2      	cmp	sl, r4
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0x2ac>
 8000394:	3802      	subs	r0, #2
 8000396:	4464      	add	r4, ip
 8000398:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039c:	fba0 8902 	umull	r8, r9, r0, r2
 80003a0:	eba4 040a 	sub.w	r4, r4, sl
 80003a4:	454c      	cmp	r4, r9
 80003a6:	4641      	mov	r1, r8
 80003a8:	46ce      	mov	lr, r9
 80003aa:	d354      	bcc.n	8000456 <__udivmoddi4+0x29a>
 80003ac:	d051      	beq.n	8000452 <__udivmoddi4+0x296>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d069      	beq.n	8000486 <__udivmoddi4+0x2ca>
 80003b2:	1a5a      	subs	r2, r3, r1
 80003b4:	eb64 040e 	sbc.w	r4, r4, lr
 80003b8:	fa04 f505 	lsl.w	r5, r4, r5
 80003bc:	fa22 f307 	lsr.w	r3, r2, r7
 80003c0:	40fc      	lsrs	r4, r7
 80003c2:	431d      	orrs	r5, r3
 80003c4:	e9c6 5400 	strd	r5, r4, [r6]
 80003c8:	2700      	movs	r7, #0
 80003ca:	e747      	b.n	800025c <__udivmoddi4+0xa0>
 80003cc:	4095      	lsls	r5, r2
 80003ce:	f1c2 0320 	rsb	r3, r2, #32
 80003d2:	fa21 f003 	lsr.w	r0, r1, r3
 80003d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003da:	fbb0 f7f8 	udiv	r7, r0, r8
 80003de:	fa1f f985 	uxth.w	r9, r5
 80003e2:	fb08 0017 	mls	r0, r8, r7, r0
 80003e6:	fa24 f303 	lsr.w	r3, r4, r3
 80003ea:	4091      	lsls	r1, r2
 80003ec:	fb07 fc09 	mul.w	ip, r7, r9
 80003f0:	430b      	orrs	r3, r1
 80003f2:	0c19      	lsrs	r1, r3, #16
 80003f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f8:	458c      	cmp	ip, r1
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d907      	bls.n	8000410 <__udivmoddi4+0x254>
 8000400:	1869      	adds	r1, r5, r1
 8000402:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000406:	d231      	bcs.n	800046c <__udivmoddi4+0x2b0>
 8000408:	458c      	cmp	ip, r1
 800040a:	d92f      	bls.n	800046c <__udivmoddi4+0x2b0>
 800040c:	3f02      	subs	r7, #2
 800040e:	4429      	add	r1, r5
 8000410:	eba1 010c 	sub.w	r1, r1, ip
 8000414:	fbb1 f0f8 	udiv	r0, r1, r8
 8000418:	fb08 1c10 	mls	ip, r8, r0, r1
 800041c:	fb00 fe09 	mul.w	lr, r0, r9
 8000420:	b299      	uxth	r1, r3
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	458e      	cmp	lr, r1
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x27e>
 800042a:	1869      	adds	r1, r5, r1
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000430:	d218      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 8000432:	458e      	cmp	lr, r1
 8000434:	d916      	bls.n	8000464 <__udivmoddi4+0x2a8>
 8000436:	3802      	subs	r0, #2
 8000438:	4429      	add	r1, r5
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000442:	e73a      	b.n	80002ba <__udivmoddi4+0xfe>
 8000444:	4637      	mov	r7, r6
 8000446:	4630      	mov	r0, r6
 8000448:	e708      	b.n	800025c <__udivmoddi4+0xa0>
 800044a:	460f      	mov	r7, r1
 800044c:	e6e6      	b.n	800021c <__udivmoddi4+0x60>
 800044e:	4618      	mov	r0, r3
 8000450:	e6fb      	b.n	800024a <__udivmoddi4+0x8e>
 8000452:	4543      	cmp	r3, r8
 8000454:	d2ab      	bcs.n	80003ae <__udivmoddi4+0x1f2>
 8000456:	ebb8 0102 	subs.w	r1, r8, r2
 800045a:	eb69 020c 	sbc.w	r2, r9, ip
 800045e:	3801      	subs	r0, #1
 8000460:	4696      	mov	lr, r2
 8000462:	e7a4      	b.n	80003ae <__udivmoddi4+0x1f2>
 8000464:	4618      	mov	r0, r3
 8000466:	e7e8      	b.n	800043a <__udivmoddi4+0x27e>
 8000468:	4608      	mov	r0, r1
 800046a:	e795      	b.n	8000398 <__udivmoddi4+0x1dc>
 800046c:	4607      	mov	r7, r0
 800046e:	e7cf      	b.n	8000410 <__udivmoddi4+0x254>
 8000470:	4681      	mov	r9, r0
 8000472:	e77b      	b.n	800036c <__udivmoddi4+0x1b0>
 8000474:	3802      	subs	r0, #2
 8000476:	442c      	add	r4, r5
 8000478:	e747      	b.n	800030a <__udivmoddi4+0x14e>
 800047a:	f1ae 0e02 	sub.w	lr, lr, #2
 800047e:	442b      	add	r3, r5
 8000480:	e72f      	b.n	80002e2 <__udivmoddi4+0x126>
 8000482:	4638      	mov	r0, r7
 8000484:	e707      	b.n	8000296 <__udivmoddi4+0xda>
 8000486:	4637      	mov	r7, r6
 8000488:	e6e8      	b.n	800025c <__udivmoddi4+0xa0>
 800048a:	bf00      	nop

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08a      	sub	sp, #40	; 0x28
 8000494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b30      	ldr	r3, [pc, #192]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a2f      	ldr	r2, [pc, #188]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 0304 	and.w	r3, r3, #4
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a29      	ldr	r2, [pc, #164]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004c4:	f043 0320 	orr.w	r3, r3, #32
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b27      	ldr	r3, [pc, #156]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 0320 	and.w	r3, r3, #32
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b24      	ldr	r3, [pc, #144]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a23      	ldr	r2, [pc, #140]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b21      	ldr	r3, [pc, #132]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a1d      	ldr	r2, [pc, #116]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_GPIO_Init+0xd8>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	4818      	ldr	r0, [pc, #96]	; (800056c <MX_GPIO_Init+0xdc>)
 800050c:	f001 f8e6 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_GPIO_Init+0xe0>)
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	4619      	mov	r1, r3
 8000524:	4813      	ldr	r0, [pc, #76]	; (8000574 <MX_GPIO_Init+0xe4>)
 8000526:	f000 ff4b 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800052a:	2320      	movs	r3, #32
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4619      	mov	r1, r3
 8000540:	480a      	ldr	r0, [pc, #40]	; (800056c <MX_GPIO_Init+0xdc>)
 8000542:	f000 ff3d 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000546:	2320      	movs	r3, #32
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	4807      	ldr	r0, [pc, #28]	; (8000578 <MX_GPIO_Init+0xe8>)
 800055a:	f000 ff31 	bl	80013c0 <HAL_GPIO_Init>

}
 800055e:	bf00      	nop
 8000560:	3728      	adds	r7, #40	; 0x28
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800
 800056c:	40020000 	.word	0x40020000
 8000570:	10110000 	.word	0x10110000
 8000574:	40020800 	.word	0x40020800
 8000578:	40020400 	.word	0x40020400

0800057c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2C1_Init+0x50>)
 8000582:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <MX_I2C1_Init+0x54>)
 8000584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2C1_Init+0x50>)
 8000588:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <MX_I2C1_Init+0x58>)
 800058a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2C1_Init+0x50>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_I2C1_Init+0x50>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_I2C1_Init+0x50>)
 800059a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800059e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_I2C1_Init+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_I2C1_Init+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_I2C1_Init+0x50>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_I2C1_Init+0x50>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_I2C1_Init+0x50>)
 80005ba:	f001 f8a7 	bl	800170c <HAL_I2C_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005c4:	f000 fbb6 	bl	8000d34 <Error_Handler>
  }

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000034 	.word	0x20000034
 80005d0:	40005400 	.word	0x40005400
 80005d4:	000186a0 	.word	0x000186a0

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a17      	ldr	r2, [pc, #92]	; (8000654 <HAL_I2C_MspInit+0x7c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d128      	bne.n	800064c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_I2C_MspInit+0x80>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a16      	ldr	r2, [pc, #88]	; (8000658 <HAL_I2C_MspInit+0x80>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <HAL_I2C_MspInit+0x80>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000612:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000618:	2312      	movs	r3, #18
 800061a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000624:	2304      	movs	r3, #4
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000630:	f000 fec6 	bl	80013c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_I2C_MspInit+0x80>)
 8000636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <HAL_I2C_MspInit+0x80>)
 800063a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800063e:	6253      	str	r3, [r2, #36]	; 0x24
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_I2C_MspInit+0x80>)
 8000642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40005400 	.word	0x40005400
 8000658:	40023800 	.word	0x40023800
 800065c:	40020400 	.word	0x40020400

08000660 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af02      	add	r7, sp, #8
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	f043 030c 	orr.w	r3, r3, #12
 8000676:	b2da      	uxtb	r2, r3
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	f043 0320 	orr.w	r3, r3, #32
 8000688:	b2db      	uxtb	r3, r3
 800068a:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 800068c:	f107 0118 	add.w	r1, r7, #24
 8000690:	230a      	movs	r3, #10
 8000692:	2202      	movs	r2, #2
 8000694:	486c      	ldr	r0, [pc, #432]	; (8000848 <lcd_init+0x1e8>)
 8000696:	f002 fbb2 	bl	8002dfe <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800069a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800069e:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80006a0:	f107 0114 	add.w	r1, r7, #20
 80006a4:	230a      	movs	r3, #10
 80006a6:	2202      	movs	r2, #2
 80006a8:	4867      	ldr	r0, [pc, #412]	; (8000848 <lcd_init+0x1e8>)
 80006aa:	f002 fba8 	bl	8002dfe <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80006ae:	2364      	movs	r3, #100	; 0x64
 80006b0:	2205      	movs	r2, #5
 80006b2:	217c      	movs	r1, #124	; 0x7c
 80006b4:	69f8      	ldr	r0, [r7, #28]
 80006b6:	f001 fa5f 	bl	8001b78 <HAL_I2C_IsDeviceReady>
 80006ba:	4603      	mov	r3, r0
 80006bc:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80006be:	f107 0113 	add.w	r1, r7, #19
 80006c2:	230a      	movs	r3, #10
 80006c4:	2201      	movs	r2, #1
 80006c6:	4860      	ldr	r0, [pc, #384]	; (8000848 <lcd_init+0x1e8>)
 80006c8:	f002 fb99 	bl	8002dfe <HAL_UART_Transmit>
	HAL_Delay(50);
 80006cc:	2032      	movs	r0, #50	; 0x32
 80006ce:	f000 fd07 	bl	80010e0 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80006d2:	f107 0218 	add.w	r2, r7, #24
 80006d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	217c      	movs	r1, #124	; 0x7c
 80006e0:	69f8      	ldr	r0, [r7, #28]
 80006e2:	f001 f94b 	bl	800197c <HAL_I2C_Master_Transmit>
 80006e6:	4603      	mov	r3, r0
 80006e8:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80006ea:	f107 0112 	add.w	r1, r7, #18
 80006ee:	230a      	movs	r3, #10
 80006f0:	2201      	movs	r2, #1
 80006f2:	4855      	ldr	r0, [pc, #340]	; (8000848 <lcd_init+0x1e8>)
 80006f4:	f002 fb83 	bl	8002dfe <HAL_UART_Transmit>
	HAL_Delay(50);
 80006f8:	2032      	movs	r0, #50	; 0x32
 80006fa:	f000 fcf1 	bl	80010e0 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80006fe:	f107 0218 	add.w	r2, r7, #24
 8000702:	f241 3388 	movw	r3, #5000	; 0x1388
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2302      	movs	r3, #2
 800070a:	217c      	movs	r1, #124	; 0x7c
 800070c:	69f8      	ldr	r0, [r7, #28]
 800070e:	f001 f935 	bl	800197c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000712:	2005      	movs	r0, #5
 8000714:	f000 fce4 	bl	80010e0 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000718:	f107 0218 	add.w	r2, r7, #24
 800071c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2302      	movs	r3, #2
 8000724:	217c      	movs	r1, #124	; 0x7c
 8000726:	69f8      	ldr	r0, [r7, #28]
 8000728:	f001 f928 	bl	800197c <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	2204      	movs	r2, #4
 8000730:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	785b      	ldrb	r3, [r3, #1]
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	b2db      	uxtb	r3, r3
 800073c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800073e:	f107 0218 	add.w	r2, r7, #24
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2302      	movs	r3, #2
 800074a:	217c      	movs	r1, #124	; 0x7c
 800074c:	69f8      	ldr	r0, [r7, #28]
 800074e:	f001 f915 	bl	800197c <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8000752:	2301      	movs	r3, #1
 8000754:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000756:	f107 0218 	add.w	r2, r7, #24
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2302      	movs	r3, #2
 8000762:	217c      	movs	r1, #124	; 0x7c
 8000764:	69f8      	ldr	r0, [r7, #28]
 8000766:	f001 f909 	bl	800197c <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800076a:	2002      	movs	r0, #2
 800076c:	f000 fcb8 	bl	80010e0 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2202      	movs	r2, #2
 8000774:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	789b      	ldrb	r3, [r3, #2]
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	b2db      	uxtb	r3, r3
 8000780:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000782:	f107 0218 	add.w	r2, r7, #24
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2302      	movs	r3, #2
 800078e:	217c      	movs	r1, #124	; 0x7c
 8000790:	69f8      	ldr	r0, [r7, #28]
 8000792:	f001 f8f3 	bl	800197c <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8000796:	2300      	movs	r3, #0
 8000798:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800079e:	f107 0210 	add.w	r2, r7, #16
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2302      	movs	r3, #2
 80007aa:	21c4      	movs	r1, #196	; 0xc4
 80007ac:	69f8      	ldr	r0, [r7, #28]
 80007ae:	f001 f8e5 	bl	800197c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80007b2:	2308      	movs	r3, #8
 80007b4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80007b6:	23ff      	movs	r3, #255	; 0xff
 80007b8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80007ba:	f107 0210 	add.w	r2, r7, #16
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2302      	movs	r3, #2
 80007c6:	21c4      	movs	r1, #196	; 0xc4
 80007c8:	69f8      	ldr	r0, [r7, #28]
 80007ca:	f001 f8d7 	bl	800197c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80007ce:	2301      	movs	r3, #1
 80007d0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80007d2:	2320      	movs	r3, #32
 80007d4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80007d6:	f107 0210 	add.w	r2, r7, #16
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2302      	movs	r3, #2
 80007e2:	21c4      	movs	r1, #196	; 0xc4
 80007e4:	69f8      	ldr	r0, [r7, #28]
 80007e6:	f001 f8c9 	bl	800197c <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80007ea:	2304      	movs	r3, #4
 80007ec:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80007ee:	23ff      	movs	r3, #255	; 0xff
 80007f0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80007f2:	f107 020c 	add.w	r2, r7, #12
 80007f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	21c4      	movs	r1, #196	; 0xc4
 8000800:	69f8      	ldr	r0, [r7, #28]
 8000802:	f001 f8bb 	bl	800197c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000806:	2303      	movs	r3, #3
 8000808:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800080a:	23ff      	movs	r3, #255	; 0xff
 800080c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800080e:	f107 020c 	add.w	r2, r7, #12
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2302      	movs	r3, #2
 800081a:	21c4      	movs	r1, #196	; 0xc4
 800081c:	69f8      	ldr	r0, [r7, #28]
 800081e:	f001 f8ad 	bl	800197c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000822:	2302      	movs	r3, #2
 8000824:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000826:	23ff      	movs	r3, #255	; 0xff
 8000828:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800082a:	f107 020c 	add.w	r2, r7, #12
 800082e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2302      	movs	r3, #2
 8000836:	21c4      	movs	r1, #196	; 0xc4
 8000838:	69f8      	ldr	r0, [r7, #28]
 800083a:	f001 f89f 	bl	800197c <HAL_I2C_Master_Transmit>


}
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200001d0 	.word	0x200001d0

0800084c <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <clearlcd+0x2c>)
 8000856:	f000 f83b 	bl	80008d0 <lcd_position>
	lcd_print(&hi2c1,"                ");
 800085a:	4908      	ldr	r1, [pc, #32]	; (800087c <clearlcd+0x30>)
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <clearlcd+0x2c>)
 800085e:	f000 f80f 	bl	8000880 <lcd_print>
	lcd_position(&hi2c1,0,1);
 8000862:	2201      	movs	r2, #1
 8000864:	2100      	movs	r1, #0
 8000866:	4804      	ldr	r0, [pc, #16]	; (8000878 <clearlcd+0x2c>)
 8000868:	f000 f832 	bl	80008d0 <lcd_position>
	lcd_print(&hi2c1,"                ");
 800086c:	4903      	ldr	r1, [pc, #12]	; (800087c <clearlcd+0x30>)
 800086e:	4802      	ldr	r0, [pc, #8]	; (8000878 <clearlcd+0x2c>)
 8000870:	f000 f806 	bl	8000880 <lcd_print>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000034 	.word	0x20000034
 800087c:	08003718 	.word	0x08003718

08000880 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 800088e:	2340      	movs	r3, #64	; 0x40
 8000890:	733b      	strb	r3, [r7, #12]
    int i=0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000896:	e011      	b.n	80008bc <lcd_print+0x3c>
    {
            data[1] = str[i];
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80008a2:	f107 020c 	add.w	r2, r7, #12
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2302      	movs	r3, #2
 80008ae:	217c      	movs	r1, #124	; 0x7c
 80008b0:	6938      	ldr	r0, [r7, #16]
 80008b2:	f001 f863 	bl	800197c <HAL_I2C_Master_Transmit>
            i++;
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3301      	adds	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	4413      	add	r3, r2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1e7      	bne.n	8000898 <lcd_print+0x18>
   }
}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
 80008dc:	4613      	mov	r3, r2
 80008de:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d104      	bne.n	80008f4 <lcd_position+0x24>
    {
        col = col | 0x80;
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f0:	70fb      	strb	r3, [r7, #3]
 80008f2:	e003      	b.n	80008fc <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80008fa:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000904:	f107 0208 	add.w	r2, r7, #8
 8000908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2302      	movs	r3, #2
 8000910:	217c      	movs	r1, #124	; 0x7c
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f001 f832 	bl	800197c <HAL_I2C_Master_Transmit>
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af02      	add	r7, sp, #8
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
 800092a:	460b      	mov	r3, r1
 800092c:	71bb      	strb	r3, [r7, #6]
 800092e:	4613      	mov	r3, r2
 8000930:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <reglagecouleur+0x74>)
 8000934:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8000936:	2304      	movs	r3, #4
 8000938:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 800093e:	f107 0210 	add.w	r2, r7, #16
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2302      	movs	r3, #2
 800094a:	21c4      	movs	r1, #196	; 0xc4
 800094c:	6978      	ldr	r0, [r7, #20]
 800094e:	f001 f815 	bl	800197c <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8000952:	2303      	movs	r3, #3
 8000954:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8000956:	79bb      	ldrb	r3, [r7, #6]
 8000958:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 800095a:	f107 020c 	add.w	r2, r7, #12
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2302      	movs	r3, #2
 8000966:	21c4      	movs	r1, #196	; 0xc4
 8000968:	6978      	ldr	r0, [r7, #20]
 800096a:	f001 f807 	bl	800197c <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 800096e:	2302      	movs	r3, #2
 8000970:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8000972:	797b      	ldrb	r3, [r7, #5]
 8000974:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8000976:	f107 0208 	add.w	r2, r7, #8
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2302      	movs	r3, #2
 8000982:	21c4      	movs	r1, #196	; 0xc4
 8000984:	6978      	ldr	r0, [r7, #20]
 8000986:	f000 fff9 	bl	800197c <HAL_I2C_Master_Transmit>
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000034 	.word	0x20000034

08000998 <HAL_UART_RxCpltCallback>:
char old_input_string2[40];
char input_buffer[40];
int input_i = 0;
int flag=0; input_complete=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	input_raw[input_i] = (char*)rx_buffer[0];
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a20      	ldr	r2, [pc, #128]	; (8000a28 <HAL_UART_RxCpltCallback+0x90>)
 80009a6:	7811      	ldrb	r1, [r2, #0]
 80009a8:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <HAL_UART_RxCpltCallback+0x94>)
 80009aa:	54d1      	strb	r1, [r2, r3]

	input_buffer[input_i] = (char*)rx_buffer[0];
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_UART_RxCpltCallback+0x90>)
 80009b2:	7811      	ldrb	r1, [r2, #0]
 80009b4:	4a1e      	ldr	r2, [pc, #120]	; (8000a30 <HAL_UART_RxCpltCallback+0x98>)
 80009b6:	54d1      	strb	r1, [r2, r3]
	if(input_buffer[input_i] == '\n' ){
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <HAL_UART_RxCpltCallback+0x98>)
 80009be:	5cd3      	ldrb	r3, [r2, r3]
 80009c0:	2b0a      	cmp	r3, #10
 80009c2:	d122      	bne.n	8000a0a <HAL_UART_RxCpltCallback+0x72>
		input_complete = 1;//activa el flag 2
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <HAL_UART_RxCpltCallback+0x9c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
		input_i = 0;//reinicia el indice del input string
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < 40; i++){
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e010      	b.n	80009f8 <HAL_UART_RxCpltCallback+0x60>
			input_string[i] = input_buffer[i];
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <HAL_UART_RxCpltCallback+0x98>)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	7819      	ldrb	r1, [r3, #0]
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <HAL_UART_RxCpltCallback+0xa0>)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	701a      	strb	r2, [r3, #0]
			input_buffer[i]=0;//reinicia el input buffer
 80009e8:	4a11      	ldr	r2, [pc, #68]	; (8000a30 <HAL_UART_RxCpltCallback+0x98>)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	4413      	add	r3, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 40; i++){
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b27      	cmp	r3, #39	; 0x27
 80009fc:	ddeb      	ble.n	80009d6 <HAL_UART_RxCpltCallback+0x3e>
		}
		HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 80009fe:	2201      	movs	r2, #1
 8000a00:	4909      	ldr	r1, [pc, #36]	; (8000a28 <HAL_UART_RxCpltCallback+0x90>)
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <HAL_UART_RxCpltCallback+0xa4>)
 8000a04:	f002 fa94 	bl	8002f30 <HAL_UART_Receive_IT>
		return 0;
 8000a08:	e009      	b.n	8000a1e <HAL_UART_RxCpltCallback+0x86>
	}
	input_i++;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_UART_RxCpltCallback+0x8c>)
 8000a12:	6013      	str	r3, [r2, #0]
	//si el buffer no trae ni \n ni \r entonces guarda el elemento del  buffer en el indice de input string
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	4904      	ldr	r1, [pc, #16]	; (8000a28 <HAL_UART_RxCpltCallback+0x90>)
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <HAL_UART_RxCpltCallback+0xa4>)
 8000a1a:	f002 fa89 	bl	8002f30 <HAL_UART_Receive_IT>
}
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000002c 	.word	0x2000002c
 8000a28:	200000b0 	.word	0x200000b0
 8000a2c:	200000dc 	.word	0x200000dc
 8000a30:	200000b4 	.word	0x200000b4
 8000a34:	20000030 	.word	0x20000030
 8000a38:	20000088 	.word	0x20000088
 8000a3c:	20000190 	.word	0x20000190

08000a40 <print_lcd2>:
		  lcd_print(&hi2c1, "connected");
		  reglagecouleur(0,255,0);
	  }*/

}
void print_lcd2(char line_1[16], char line_2[16], int R, int G, int B){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]
	  clearlcd();
 8000a4e:	f7ff fefd 	bl	800084c <clearlcd>
	  lcd_position(&hi2c1,0,0);//cositas
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <print_lcd2+0x50>)
 8000a58:	f7ff ff3a 	bl	80008d0 <lcd_position>
	  lcd_print(&hi2c1, line_1);
 8000a5c:	68f9      	ldr	r1, [r7, #12]
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <print_lcd2+0x50>)
 8000a60:	f7ff ff0e 	bl	8000880 <lcd_print>
	  lcd_position(&hi2c1,0,1);//cositas
 8000a64:	2201      	movs	r2, #1
 8000a66:	2100      	movs	r1, #0
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <print_lcd2+0x50>)
 8000a6a:	f7ff ff31 	bl	80008d0 <lcd_position>
	  lcd_print(&hi2c1, line_2);
 8000a6e:	68b9      	ldr	r1, [r7, #8]
 8000a70:	4807      	ldr	r0, [pc, #28]	; (8000a90 <print_lcd2+0x50>)
 8000a72:	f7ff ff05 	bl	8000880 <lcd_print>
	  reglagecouleur(R, G, B);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	683a      	ldr	r2, [r7, #0]
 8000a7c:	b2d1      	uxtb	r1, r2
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff4c 	bl	8000920 <reglagecouleur>

}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000034 	.word	0x20000034

08000a94 <show_plate>:
void show_plate(char *input){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b092      	sub	sp, #72	; 0x48
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	//find :
	int start, length;
	char string[40];
	length = strlen((char*)input);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff fb6d 	bl	800017c <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i = 0; i < length; i++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8000aaa:	e00a      	b.n	8000ac2 <show_plate+0x2e>
		if(input[i] == ':')
 8000aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b3a      	cmp	r3, #58	; 0x3a
 8000ab6:	d101      	bne.n	8000abc <show_plate+0x28>
			start = i;
 8000ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aba:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i < length; i++){
 8000abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000abe:	3301      	adds	r3, #1
 8000ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8000ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	dbf0      	blt.n	8000aac <show_plate+0x18>
	}
	int new = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i = start + 1; i < length - 10; i++){
 8000ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ad4:	e00f      	b.n	8000af6 <show_plate+0x62>
		string[new] = input[i];
 8000ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	7819      	ldrb	r1, [r3, #0]
 8000ade:	f107 020c 	add.w	r2, r7, #12
 8000ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae4:	4413      	add	r3, r2
 8000ae6:	460a      	mov	r2, r1
 8000ae8:	701a      	strb	r2, [r3, #0]
		new++;
 8000aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aec:	3301      	adds	r3, #1
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i = start + 1; i < length - 10; i++){
 8000af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000af2:	3301      	adds	r3, #1
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af8:	3b0a      	subs	r3, #10
 8000afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbea      	blt.n	8000ad6 <show_plate+0x42>
	}
	lcd_print(&hi2c1, string);
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4619      	mov	r1, r3
 8000b06:	4803      	ldr	r0, [pc, #12]	; (8000b14 <show_plate+0x80>)
 8000b08:	f7ff feba 	bl	8000880 <lcd_print>

}
 8000b0c:	bf00      	nop
 8000b0e:	3748      	adds	r7, #72	; 0x48
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000034 	.word	0x20000034

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0a0      	sub	sp, #128	; 0x80
 8000b1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b1e:	f000 fa70 	bl	8001002 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b22:	f000 f897 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b26:	f7ff fcb3 	bl	8000490 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b2a:	f7ff fd27 	bl	800057c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b2e:	f000 f973 	bl	8000e18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b32:	f000 f99b 	bl	8000e6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	4932      	ldr	r1, [pc, #200]	; (8000c04 <main+0xec>)
 8000b3a:	4833      	ldr	r0, [pc, #204]	; (8000c08 <main+0xf0>)
 8000b3c:	f002 f9f8 	bl	8002f30 <HAL_UART_Receive_IT>
  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 8000b40:	4932      	ldr	r1, [pc, #200]	; (8000c0c <main+0xf4>)
 8000b42:	4833      	ldr	r0, [pc, #204]	; (8000c10 <main+0xf8>)
 8000b44:	f7ff fd8c 	bl	8000660 <lcd_init>

  print_lcd2("system:", "Starting", 0,0,255);
 8000b48:	23ff      	movs	r3, #255	; 0xff
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4930      	ldr	r1, [pc, #192]	; (8000c14 <main+0xfc>)
 8000b52:	4831      	ldr	r0, [pc, #196]	; (8000c18 <main+0x100>)
 8000b54:	f7ff ff74 	bl	8000a40 <print_lcd2>
  // --------------- wifi init ---------------
  //ATCommand("AT+RST");
  print_lcd2("WiFi state:", "connecting", 0, 255, 255);
 8000b58:	23ff      	movs	r3, #255	; 0xff
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	23ff      	movs	r3, #255	; 0xff
 8000b5e:	2200      	movs	r2, #0
 8000b60:	492e      	ldr	r1, [pc, #184]	; (8000c1c <main+0x104>)
 8000b62:	482f      	ldr	r0, [pc, #188]	; (8000c20 <main+0x108>)
 8000b64:	f7ff ff6c 	bl	8000a40 <print_lcd2>
  HAL_Delay(3000);
 8000b68:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b6c:	f000 fab8 	bl	80010e0 <HAL_Delay>
  //input_string;
  print_lcd2("WiFi state:", "connected", 0, 255, 0);
 8000b70:	2300      	movs	r3, #0
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	23ff      	movs	r3, #255	; 0xff
 8000b76:	2200      	movs	r2, #0
 8000b78:	492a      	ldr	r1, [pc, #168]	; (8000c24 <main+0x10c>)
 8000b7a:	4829      	ldr	r0, [pc, #164]	; (8000c20 <main+0x108>)
 8000b7c:	f7ff ff60 	bl	8000a40 <print_lcd2>
  print_lcd2("Server state:", "starting", 0, 255, 255);
 8000b80:	23ff      	movs	r3, #255	; 0xff
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	23ff      	movs	r3, #255	; 0xff
 8000b86:	2200      	movs	r2, #0
 8000b88:	4927      	ldr	r1, [pc, #156]	; (8000c28 <main+0x110>)
 8000b8a:	4828      	ldr	r0, [pc, #160]	; (8000c2c <main+0x114>)
 8000b8c:	f7ff ff58 	bl	8000a40 <print_lcd2>
  //ATCommand("AT+CIPMODE=3");
  ATCommand("AT+CIPMUX=1");
 8000b90:	4827      	ldr	r0, [pc, #156]	; (8000c30 <main+0x118>)
 8000b92:	f000 f8ad 	bl	8000cf0 <ATCommand>
  ATCommand("AT+CIPSERVER=1");
 8000b96:	4827      	ldr	r0, [pc, #156]	; (8000c34 <main+0x11c>)
 8000b98:	f000 f8aa 	bl	8000cf0 <ATCommand>

  print_lcd2("Server state:", "started", 0, 255, 255);
 8000b9c:	23ff      	movs	r3, #255	; 0xff
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	23ff      	movs	r3, #255	; 0xff
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4924      	ldr	r1, [pc, #144]	; (8000c38 <main+0x120>)
 8000ba6:	4821      	ldr	r0, [pc, #132]	; (8000c2c <main+0x114>)
 8000ba8:	f7ff ff4a 	bl	8000a40 <print_lcd2>
  ATCommand("ATE0");
 8000bac:	4823      	ldr	r0, [pc, #140]	; (8000c3c <main+0x124>)
 8000bae:	f000 f89f 	bl	8000cf0 <ATCommand>
  print_lcd2("Waiting for new", " commandes", 0, 255, 0);
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	23ff      	movs	r3, #255	; 0xff
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4921      	ldr	r1, [pc, #132]	; (8000c40 <main+0x128>)
 8000bbc:	4821      	ldr	r0, [pc, #132]	; (8000c44 <main+0x12c>)
 8000bbe:	f7ff ff3f 	bl	8000a40 <print_lcd2>
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <main+0xf0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
  input_complete = 0;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <main+0x130>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(input_complete){
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <main+0x130>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0fb      	beq.n	8000bce <main+0xb6>
		  strcpy((char*)screen_text, input_buffer);
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	491c      	ldr	r1, [pc, #112]	; (8000c4c <main+0x134>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fd88 	bl	80036f0 <strcpy>
		  clearlcd();
 8000be0:	f7ff fe34 	bl	800084c <clearlcd>
		  lcd_position(&hi2c1,0,0);//cositas
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <main+0xf8>)
 8000bea:	f7ff fe71 	bl	80008d0 <lcd_position>
		  show_plate(input_string);
 8000bee:	4818      	ldr	r0, [pc, #96]	; (8000c50 <main+0x138>)
 8000bf0:	f7ff ff50 	bl	8000a94 <show_plate>
		  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <main+0xf0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
		  input_complete = 0;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <main+0x130>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
	  if(input_complete){
 8000c00:	e7e5      	b.n	8000bce <main+0xb6>
 8000c02:	bf00      	nop
 8000c04:	200000b0 	.word	0x200000b0
 8000c08:	20000190 	.word	0x20000190
 8000c0c:	20000028 	.word	0x20000028
 8000c10:	20000034 	.word	0x20000034
 8000c14:	0800372c 	.word	0x0800372c
 8000c18:	08003738 	.word	0x08003738
 8000c1c:	08003740 	.word	0x08003740
 8000c20:	0800374c 	.word	0x0800374c
 8000c24:	08003758 	.word	0x08003758
 8000c28:	08003764 	.word	0x08003764
 8000c2c:	08003770 	.word	0x08003770
 8000c30:	08003780 	.word	0x08003780
 8000c34:	0800378c 	.word	0x0800378c
 8000c38:	0800379c 	.word	0x0800379c
 8000c3c:	080037a4 	.word	0x080037a4
 8000c40:	080037ac 	.word	0x080037ac
 8000c44:	080037b8 	.word	0x080037b8
 8000c48:	20000030 	.word	0x20000030
 8000c4c:	200000b4 	.word	0x200000b4
 8000c50:	20000088 	.word	0x20000088

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b092      	sub	sp, #72	; 0x48
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2234      	movs	r2, #52	; 0x34
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 fd3c 	bl	80036e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <SystemClock_Config+0x98>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000c7e:	4a1b      	ldr	r2, [pc, #108]	; (8000cec <SystemClock_Config+0x98>)
 8000c80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c84:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c86:	2302      	movs	r3, #2
 8000c88:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c92:	2302      	movs	r3, #2
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c96:	2300      	movs	r3, #0
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000ca0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000ca4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fa9a 	bl	80021e4 <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cb6:	f000 f83d 	bl	8000d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fdb6 	bl	8002844 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cde:	f000 f829 	bl	8000d34 <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3748      	adds	r7, #72	; 0x48
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40007000 	.word	0x40007000

08000cf0 <ATCommand>:

/* USER CODE BEGIN 4 */
void ATCommand(uint8_t cmd[40]){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	//uint8_t cmd_;
	//strcpy((char*)cmd, command);
	HAL_UART_Transmit(&huart1, cmd, strlen((char*)cmd), 20000);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fa3f 	bl	800017c <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <ATCommand+0x3c>)
 8000d0a:	f002 f878 	bl	8002dfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\r\n", 2, 20000);
 8000d0e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000d12:	2202      	movs	r2, #2
 8000d14:	4906      	ldr	r1, [pc, #24]	; (8000d30 <ATCommand+0x40>)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <ATCommand+0x3c>)
 8000d18:	f002 f871 	bl	8002dfe <HAL_UART_Transmit>
	HAL_Delay(500);
 8000d1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d20:	f000 f9de 	bl	80010e0 <HAL_Delay>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000190 	.word	0x20000190
 8000d30:	080037c8 	.word	0x080037c8

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <Error_Handler+0x6>

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d46:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d4c:	6253      	str	r3, [r2, #36]	; 0x24
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d5c:	6a1b      	ldr	r3, [r3, #32]
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6213      	str	r3, [r2, #32]
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d68:	6a1b      	ldr	r3, [r3, #32]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6253      	str	r3, [r2, #36]	; 0x24
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d8a:	2007      	movs	r0, #7
 8000d8c:	f000 fa96 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr

08000dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de2:	f000 f961 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <USART1_IRQHandler+0x10>)
 8000df2:	f002 f8f1 	bl	8002fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	//USART_IrqHandler(&huart1, &hdma_usart1_rx);
  /* USER CODE END USART1_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000190 	.word	0x20000190

08000e00 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <SystemInit+0x14>)
 8000e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <MX_USART1_UART_Init+0x50>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e50:	f001 ff88 	bl	8002d64 <HAL_UART_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e5a:	f7ff ff6b 	bl	8000d34 <Error_Handler>
  }

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000190 	.word	0x20000190
 8000e68:	40013800 	.word	0x40013800

08000e6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <MX_USART2_UART_Init+0x50>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	f001 ff5e 	bl	8002d64 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eae:	f7ff ff41 	bl	8000d34 <Error_Handler>
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200001d0 	.word	0x200001d0
 8000ebc:	40004400 	.word	0x40004400

08000ec0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a32      	ldr	r2, [pc, #200]	; (8000fa8 <HAL_UART_MspInit+0xe8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d131      	bne.n	8000f46 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ee2:	4b32      	ldr	r3, [pc, #200]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4a31      	ldr	r2, [pc, #196]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eec:	6213      	str	r3, [r2, #32]
 8000eee:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a2b      	ldr	r2, [pc, #172]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f24:	2307      	movs	r3, #7
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4820      	ldr	r0, [pc, #128]	; (8000fb0 <HAL_UART_MspInit+0xf0>)
 8000f30:	f000 fa46 	bl	80013c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	2025      	movs	r0, #37	; 0x25
 8000f3a:	f000 f9ca 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f3e:	2025      	movs	r0, #37	; 0x25
 8000f40:	f000 f9e3 	bl	800130a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f44:	e02c      	b.n	8000fa0 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1a      	ldr	r2, [pc, #104]	; (8000fb4 <HAL_UART_MspInit+0xf4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d127      	bne.n	8000fa0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	4a15      	ldr	r2, [pc, #84]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5a:	6253      	str	r3, [r2, #36]	; 0x24
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	61d3      	str	r3, [r2, #28]
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f80:	230c      	movs	r3, #12
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f90:	2307      	movs	r3, #7
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <HAL_UART_MspInit+0xf0>)
 8000f9c:	f000 fa10 	bl	80013c0 <HAL_GPIO_Init>
}
 8000fa0:	bf00      	nop
 8000fa2:	3730      	adds	r7, #48	; 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40013800 	.word	0x40013800
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40004400 	.word	0x40004400

08000fb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fb8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fba:	e003      	b.n	8000fc4 <LoopCopyDataInit>

08000fbc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fbe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fc0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fc2:	3104      	adds	r1, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fc4:	480a      	ldr	r0, [pc, #40]	; (8000ff0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fc8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fcc:	d3f6      	bcc.n	8000fbc <CopyDataInit>
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fd0:	e002      	b.n	8000fd8 <LoopFillZerobss>

08000fd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fd4:	f842 3b04 	str.w	r3, [r2], #4

08000fd8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fda:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fdc:	d3f9      	bcc.n	8000fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fde:	f7ff ff0f 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f002 fb59 	bl	8003698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe6:	f7ff fd97 	bl	8000b18 <main>
  bx lr
 8000fea:	4770      	bx	lr
  ldr r3, =_sidata
 8000fec:	08003800 	.word	0x08003800
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ff4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000ff8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000ffc:	20000214 	.word	0x20000214

08001000 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_IRQHandler>

08001002 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f955 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f80e 	bl	8001034 <HAL_InitTick>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	e001      	b.n	8001028 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001024:	f7ff fe8a 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001028:	79fb      	ldrb	r3, [r7, #7]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_InitTick+0x68>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d022      	beq.n	800108e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_InitTick+0x6c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_InitTick+0x68>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001054:	fbb1 f3f3 	udiv	r3, r1, r3
 8001058:	fbb2 f3f3 	udiv	r3, r2, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f962 	bl	8001326 <HAL_SYSTICK_Config>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10f      	bne.n	8001088 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	d809      	bhi.n	8001082 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106e:	2200      	movs	r2, #0
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001076:	f000 f92c 	bl	80012d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_InitTick+0x70>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	e007      	b.n	8001092 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e004      	b.n	8001092 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e001      	b.n	8001092 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000004 	.word	0x20000004

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_IncTick+0x1c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_IncTick+0x20>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <HAL_IncTick+0x1c>)
 80010b8:	6013      	str	r3, [r2, #0]
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000210 	.word	0x20000210
 80010c8:	20000008 	.word	0x20000008

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b02      	ldr	r3, [pc, #8]	; (80010dc <HAL_GetTick+0x10>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	20000210 	.word	0x20000210

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff fff0 	bl	80010cc <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010f8:	d004      	beq.n	8001104 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_Delay+0x40>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001104:	bf00      	nop
 8001106:	f7ff ffe1 	bl	80010cc <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	429a      	cmp	r2, r3
 8001114:	d8f7      	bhi.n	8001106 <HAL_Delay+0x26>
  {
  }
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4906      	ldr	r1, [pc, #24]	; (80011bc <__NVIC_EnableIRQ+0x34>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129c:	f7ff ff90 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff2d 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff42 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff90 	bl	8001214 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5f 	bl	80011c0 <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff35 	bl	8001188 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa2 	bl	8001278 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d005      	beq.n	8001362 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2204      	movs	r2, #4
 800135a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e029      	b.n	80013b6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 020e 	bic.w	r2, r2, #14
 8001370:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 021c 	and.w	r2, r3, #28
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138e:	2101      	movs	r1, #1
 8001390:	fa01 f202 	lsl.w	r2, r1, r2
 8001394:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	4798      	blx	r3
    }
  }
  return status;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80013d6:	e160      	b.n	800169a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	4013      	ands	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8152 	beq.w	8001694 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d00b      	beq.n	8001410 <HAL_GPIO_Init+0x50>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d007      	beq.n	8001410 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001404:	2b11      	cmp	r3, #17
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b12      	cmp	r3, #18
 800140e:	d130      	bne.n	8001472 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001446:	2201      	movs	r2, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 0201 	and.w	r2, r3, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0xf2>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b12      	cmp	r3, #18
 80014b0:	d123      	bne.n	80014fa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	6939      	ldr	r1, [r7, #16]
 80014f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0203 	and.w	r2, r3, #3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 80ac 	beq.w	8001694 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153c:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <HAL_GPIO_Init+0x2f4>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4a5c      	ldr	r2, [pc, #368]	; (80016b4 <HAL_GPIO_Init+0x2f4>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6213      	str	r3, [r2, #32]
 8001548:	4b5a      	ldr	r3, [pc, #360]	; (80016b4 <HAL_GPIO_Init+0x2f4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001554:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_GPIO_Init+0x2f8>)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a50      	ldr	r2, [pc, #320]	; (80016bc <HAL_GPIO_Init+0x2fc>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d025      	beq.n	80015cc <HAL_GPIO_Init+0x20c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a4f      	ldr	r2, [pc, #316]	; (80016c0 <HAL_GPIO_Init+0x300>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d01f      	beq.n	80015c8 <HAL_GPIO_Init+0x208>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a4e      	ldr	r2, [pc, #312]	; (80016c4 <HAL_GPIO_Init+0x304>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d019      	beq.n	80015c4 <HAL_GPIO_Init+0x204>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a4d      	ldr	r2, [pc, #308]	; (80016c8 <HAL_GPIO_Init+0x308>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d013      	beq.n	80015c0 <HAL_GPIO_Init+0x200>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a4c      	ldr	r2, [pc, #304]	; (80016cc <HAL_GPIO_Init+0x30c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00d      	beq.n	80015bc <HAL_GPIO_Init+0x1fc>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a4b      	ldr	r2, [pc, #300]	; (80016d0 <HAL_GPIO_Init+0x310>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d007      	beq.n	80015b8 <HAL_GPIO_Init+0x1f8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <HAL_GPIO_Init+0x314>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d101      	bne.n	80015b4 <HAL_GPIO_Init+0x1f4>
 80015b0:	2306      	movs	r3, #6
 80015b2:	e00c      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015b4:	2307      	movs	r3, #7
 80015b6:	e00a      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015b8:	2305      	movs	r3, #5
 80015ba:	e008      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015bc:	2304      	movs	r3, #4
 80015be:	e006      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015c0:	2303      	movs	r3, #3
 80015c2:	e004      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015cc:	2300      	movs	r3, #0
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	4093      	lsls	r3, r2
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015de:	4936      	ldr	r1, [pc, #216]	; (80016b8 <HAL_GPIO_Init+0x2f8>)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <HAL_GPIO_Init+0x318>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001610:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <HAL_GPIO_Init+0x318>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_GPIO_Init+0x318>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800163a:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <HAL_GPIO_Init+0x318>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_GPIO_Init+0x318>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001664:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <HAL_GPIO_Init+0x318>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_GPIO_Init+0x318>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <HAL_GPIO_Init+0x318>)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3301      	adds	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f47f ae97 	bne.w	80013d8 <HAL_GPIO_Init+0x18>
  }
}
 80016aa:	bf00      	nop
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40020400 	.word	0x40020400
 80016c4:	40020800 	.word	0x40020800
 80016c8:	40020c00 	.word	0x40020c00
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40021400 	.word	0x40021400
 80016d4:	40021800 	.word	0x40021800
 80016d8:	40010400 	.word	0x40010400

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	619a      	str	r2, [r3, #24]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e11f      	b.n	800195e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe ff50 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2224      	movs	r2, #36	; 0x24
 800173c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800175e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800176e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001770:	f001 fa70 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8001774:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4a7b      	ldr	r2, [pc, #492]	; (8001968 <HAL_I2C_Init+0x25c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d807      	bhi.n	8001790 <HAL_I2C_Init+0x84>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4a7a      	ldr	r2, [pc, #488]	; (800196c <HAL_I2C_Init+0x260>)
 8001784:	4293      	cmp	r3, r2
 8001786:	bf94      	ite	ls
 8001788:	2301      	movls	r3, #1
 800178a:	2300      	movhi	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	e006      	b.n	800179e <HAL_I2C_Init+0x92>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4a77      	ldr	r2, [pc, #476]	; (8001970 <HAL_I2C_Init+0x264>)
 8001794:	4293      	cmp	r3, r2
 8001796:	bf94      	ite	ls
 8001798:	2301      	movls	r3, #1
 800179a:	2300      	movhi	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0db      	b.n	800195e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4a72      	ldr	r2, [pc, #456]	; (8001974 <HAL_I2C_Init+0x268>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0c9b      	lsrs	r3, r3, #18
 80017b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4a64      	ldr	r2, [pc, #400]	; (8001968 <HAL_I2C_Init+0x25c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d802      	bhi.n	80017e0 <HAL_I2C_Init+0xd4>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3301      	adds	r3, #1
 80017de:	e009      	b.n	80017f4 <HAL_I2C_Init+0xe8>
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	4a63      	ldr	r2, [pc, #396]	; (8001978 <HAL_I2C_Init+0x26c>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	3301      	adds	r3, #1
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	430b      	orrs	r3, r1
 80017fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001806:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4956      	ldr	r1, [pc, #344]	; (8001968 <HAL_I2C_Init+0x25c>)
 8001810:	428b      	cmp	r3, r1
 8001812:	d80d      	bhi.n	8001830 <HAL_I2C_Init+0x124>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1e59      	subs	r1, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	bf38      	it	cc
 800182c:	2304      	movcc	r3, #4
 800182e:	e04f      	b.n	80018d0 <HAL_I2C_Init+0x1c4>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d111      	bne.n	800185c <HAL_I2C_Init+0x150>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	440b      	add	r3, r1
 8001846:	fbb0 f3f3 	udiv	r3, r0, r3
 800184a:	3301      	adds	r3, #1
 800184c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	e012      	b.n	8001882 <HAL_I2C_Init+0x176>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	0099      	lsls	r1, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001872:	3301      	adds	r3, #1
 8001874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Init+0x17e>
 8001886:	2301      	movs	r3, #1
 8001888:	e022      	b.n	80018d0 <HAL_I2C_Init+0x1c4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10e      	bne.n	80018b0 <HAL_I2C_Init+0x1a4>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1e58      	subs	r0, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	440b      	add	r3, r1
 80018a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a4:	3301      	adds	r3, #1
 80018a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ae:	e00f      	b.n	80018d0 <HAL_I2C_Init+0x1c4>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	0099      	lsls	r1, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	6809      	ldr	r1, [r1, #0]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6911      	ldr	r1, [r2, #16]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68d2      	ldr	r2, [r2, #12]
 800190a:	4311      	orrs	r1, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	430b      	orrs	r3, r1
 8001912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	000186a0 	.word	0x000186a0
 800196c:	001e847f 	.word	0x001e847f
 8001970:	003d08ff 	.word	0x003d08ff
 8001974:	431bde83 	.word	0x431bde83
 8001978:	10624dd3 	.word	0x10624dd3

0800197c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	461a      	mov	r2, r3
 8001988:	460b      	mov	r3, r1
 800198a:	817b      	strh	r3, [r7, #10]
 800198c:	4613      	mov	r3, r2
 800198e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff fb9c 	bl	80010cc <HAL_GetTick>
 8001994:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b20      	cmp	r3, #32
 80019a0:	f040 80e0 	bne.w	8001b64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2319      	movs	r3, #25
 80019aa:	2201      	movs	r2, #1
 80019ac:	4970      	ldr	r1, [pc, #448]	; (8001b70 <HAL_I2C_Master_Transmit+0x1f4>)
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fa92 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019ba:	2302      	movs	r3, #2
 80019bc:	e0d3      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_I2C_Master_Transmit+0x50>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e0cc      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d007      	beq.n	80019f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0201 	orr.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2221      	movs	r2, #33	; 0x21
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	893a      	ldrh	r2, [r7, #8]
 8001a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a34:	8979      	ldrh	r1, [r7, #10]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	6a3a      	ldr	r2, [r7, #32]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f9ca 	bl	8001dd4 <I2C_MasterRequestWrite>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e08d      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a60:	e066      	b.n	8001b30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	6a39      	ldr	r1, [r7, #32]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 fb0c 	bl	8002084 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d107      	bne.n	8001a8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06b      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d11b      	bne.n	8001b04 <HAL_I2C_Master_Transmit+0x188>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d017      	beq.n	8001b04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	6a39      	ldr	r1, [r7, #32]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 fafc 	bl	8002106 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00d      	beq.n	8001b30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d107      	bne.n	8001b2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e01a      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d194      	bne.n	8001a62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e000      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b64:	2302      	movs	r3, #2
  }
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	00100002 	.word	0x00100002
 8001b74:	ffff0000 	.word	0xffff0000

08001b78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	460b      	mov	r3, r1
 8001b86:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff faa0 	bl	80010cc <HAL_GetTick>
 8001b8c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	f040 8111 	bne.w	8001dc2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2319      	movs	r3, #25
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4988      	ldr	r1, [pc, #544]	; (8001dcc <HAL_I2C_IsDeviceReady+0x254>)
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f994 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e104      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_I2C_IsDeviceReady+0x50>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e0fd      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d007      	beq.n	8001bee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2224      	movs	r2, #36	; 0x24
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4a70      	ldr	r2, [pc, #448]	; (8001dd0 <HAL_I2C_IsDeviceReady+0x258>)
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c20:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f952 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00d      	beq.n	8001c56 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c48:	d103      	bne.n	8001c52 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e0b6      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001c66:	f7ff fa31 	bl	80010cc <HAL_GetTick>
 8001c6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c90:	bf0c      	ite	eq
 8001c92:	2301      	moveq	r3, #1
 8001c94:	2300      	movne	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c9a:	e025      	b.n	8001ce8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c9c:	f7ff fa16 	bl	80010cc <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d302      	bcc.n	8001cb2 <HAL_I2C_IsDeviceReady+0x13a>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	22a0      	movs	r2, #160	; 0xa0
 8001cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2ba0      	cmp	r3, #160	; 0xa0
 8001cf2:	d005      	beq.n	8001d00 <HAL_I2C_IsDeviceReady+0x188>
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <HAL_I2C_IsDeviceReady+0x188>
 8001cfa:	7dbb      	ldrb	r3, [r7, #22]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0cd      	beq.n	8001c9c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d129      	bne.n	8001d6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2319      	movs	r3, #25
 8001d42:	2201      	movs	r2, #1
 8001d44:	4921      	ldr	r1, [pc, #132]	; (8001dcc <HAL_I2C_IsDeviceReady+0x254>)
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f8c6 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e036      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e02c      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2319      	movs	r3, #25
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	490f      	ldr	r1, [pc, #60]	; (8001dcc <HAL_I2C_IsDeviceReady+0x254>)
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f8a2 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e012      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f4ff af32 	bcc.w	8001c12 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	00100002 	.word	0x00100002
 8001dd0:	ffff0000 	.word	0xffff0000

08001dd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	460b      	mov	r3, r1
 8001de2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d006      	beq.n	8001dfe <I2C_MasterRequestWrite+0x2a>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d003      	beq.n	8001dfe <I2C_MasterRequestWrite+0x2a>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dfc:	d108      	bne.n	8001e10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e00b      	b.n	8001e28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	2b12      	cmp	r3, #18
 8001e16:	d107      	bne.n	8001e28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f84f 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00d      	beq.n	8001e5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4e:	d103      	bne.n	8001e58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e035      	b.n	8001ec8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e64:	d108      	bne.n	8001e78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e66:	897b      	ldrh	r3, [r7, #10]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	e01b      	b.n	8001eb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e78:	897b      	ldrh	r3, [r7, #10]
 8001e7a:	11db      	asrs	r3, r3, #7
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f003 0306 	and.w	r3, r3, #6
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f063 030f 	orn	r3, r3, #15
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <I2C_MasterRequestWrite+0xfc>)
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f875 	bl	8001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e010      	b.n	8001ec8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ea6:	897b      	ldrh	r3, [r7, #10]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <I2C_MasterRequestWrite+0x100>)
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f865 	bl	8001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	00010008 	.word	0x00010008
 8001ed4:	00010002 	.word	0x00010002

08001ed8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee8:	e025      	b.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ef0:	d021      	beq.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef2:	f7ff f8eb 	bl	80010cc <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d302      	bcc.n	8001f08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d116      	bne.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f043 0220 	orr.w	r2, r3, #32
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e023      	b.n	8001f7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d10d      	bne.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	bf0c      	ite	eq
 8001f52:	2301      	moveq	r3, #1
 8001f54:	2300      	movne	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	e00c      	b.n	8001f76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4013      	ands	r3, r2
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf0c      	ite	eq
 8001f6e:	2301      	moveq	r3, #1
 8001f70:	2300      	movne	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d0b6      	beq.n	8001eea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f94:	e051      	b.n	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa4:	d123      	bne.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f043 0204 	orr.w	r2, r3, #4
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e046      	b.n	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff4:	d021      	beq.n	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7ff f869 	bl	80010cc <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	429a      	cmp	r2, r3
 8002004:	d302      	bcc.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d116      	bne.n	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f043 0220 	orr.w	r2, r3, #32
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e020      	b.n	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10c      	bne.n	800205e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4013      	ands	r3, r2
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	e00b      	b.n	8002076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	43da      	mvns	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	4013      	ands	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d18d      	bne.n	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002090:	e02d      	b.n	80020ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f878 	bl	8002188 <I2C_IsAcknowledgeFailed>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e02d      	b.n	80020fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a8:	d021      	beq.n	80020ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020aa:	f7ff f80f 	bl	80010cc <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d302      	bcc.n	80020c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d116      	bne.n	80020ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f043 0220 	orr.w	r2, r3, #32
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e007      	b.n	80020fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f8:	2b80      	cmp	r3, #128	; 0x80
 80020fa:	d1ca      	bne.n	8002092 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002112:	e02d      	b.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f837 	bl	8002188 <I2C_IsAcknowledgeFailed>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e02d      	b.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800212a:	d021      	beq.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212c:	f7fe ffce 	bl	80010cc <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	d302      	bcc.n	8002142 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d116      	bne.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e007      	b.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b04      	cmp	r3, #4
 800217c:	d1ca      	bne.n	8002114 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219e:	d11b      	bne.n	80021d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f043 0204 	orr.w	r2, r3, #4
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e31d      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f6:	4b94      	ldr	r3, [pc, #592]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002200:	4b91      	ldr	r3, [pc, #580]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002208:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d07b      	beq.n	800230e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d006      	beq.n	800222a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d10f      	bne.n	8002242 <HAL_RCC_OscConfig+0x5e>
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002228:	d10b      	bne.n	8002242 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222a:	4b87      	ldr	r3, [pc, #540]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d06a      	beq.n	800230c <HAL_RCC_OscConfig+0x128>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d166      	bne.n	800230c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e2f7      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d106      	bne.n	8002258 <HAL_RCC_OscConfig+0x74>
 800224a:	4b7f      	ldr	r3, [pc, #508]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7e      	ldr	r2, [pc, #504]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e02d      	b.n	80022b4 <HAL_RCC_OscConfig+0xd0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10c      	bne.n	800227a <HAL_RCC_OscConfig+0x96>
 8002260:	4b79      	ldr	r3, [pc, #484]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a78      	ldr	r2, [pc, #480]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b76      	ldr	r3, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a75      	ldr	r2, [pc, #468]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e01c      	b.n	80022b4 <HAL_RCC_OscConfig+0xd0>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b05      	cmp	r3, #5
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0xb8>
 8002282:	4b71      	ldr	r3, [pc, #452]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a70      	ldr	r2, [pc, #448]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b6e      	ldr	r3, [pc, #440]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6d      	ldr	r2, [pc, #436]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xd0>
 800229c:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a69      	ldr	r2, [pc, #420]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b67      	ldr	r3, [pc, #412]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a66      	ldr	r2, [pc, #408]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe ff06 	bl	80010cc <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe ff02 	bl	80010cc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e2ad      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022d6:	4b5c      	ldr	r3, [pc, #368]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xe0>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fef2 	bl	80010cc <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ec:	f7fe feee 	bl	80010cc <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e299      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022fe:	4b52      	ldr	r3, [pc, #328]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x108>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d05a      	beq.n	80023d0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b04      	cmp	r3, #4
 800231e:	d005      	beq.n	800232c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d119      	bne.n	800235a <HAL_RCC_OscConfig+0x176>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d116      	bne.n	800235a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232c:	4b46      	ldr	r3, [pc, #280]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_OscConfig+0x160>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e276      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b40      	ldr	r3, [pc, #256]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	493d      	ldr	r1, [pc, #244]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002358:	e03a      	b.n	80023d0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d020      	beq.n	80023a4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002362:	4b3a      	ldr	r3, [pc, #232]	; (800244c <HAL_RCC_OscConfig+0x268>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe feb0 	bl	80010cc <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002370:	f7fe feac 	bl	80010cc <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e257      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238e:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	492a      	ldr	r1, [pc, #168]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
 80023a2:	e015      	b.n	80023d0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a4:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_RCC_OscConfig+0x268>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fe8f 	bl	80010cc <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b2:	f7fe fe8b 	bl	80010cc <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e236      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023c4:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80b8 	beq.w	800254e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d170      	bne.n	80024c6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_OscConfig+0x218>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e21a      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1a      	ldr	r2, [r3, #32]
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002408:	429a      	cmp	r2, r3
 800240a:	d921      	bls.n	8002450 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fc47 	bl	8002ca4 <RCC_SetFlashLatencyFromMSIRange>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e208      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4906      	ldr	r1, [pc, #24]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	061b      	lsls	r3, r3, #24
 8002440:	4901      	ldr	r1, [pc, #4]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
 8002446:	e020      	b.n	800248a <HAL_RCC_OscConfig+0x2a6>
 8002448:	40023800 	.word	0x40023800
 800244c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002450:	4ba4      	ldr	r3, [pc, #656]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	49a1      	ldr	r1, [pc, #644]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002462:	4ba0      	ldr	r3, [pc, #640]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	499c      	ldr	r1, [pc, #624]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fc12 	bl	8002ca4 <RCC_SetFlashLatencyFromMSIRange>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e1d3      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	0b5b      	lsrs	r3, r3, #13
 8002490:	3301      	adds	r3, #1
 8002492:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800249a:	4a92      	ldr	r2, [pc, #584]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 800249c:	6892      	ldr	r2, [r2, #8]
 800249e:	0912      	lsrs	r2, r2, #4
 80024a0:	f002 020f 	and.w	r2, r2, #15
 80024a4:	4990      	ldr	r1, [pc, #576]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80024a6:	5c8a      	ldrb	r2, [r1, r2]
 80024a8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024aa:	4a90      	ldr	r2, [pc, #576]	; (80026ec <HAL_RCC_OscConfig+0x508>)
 80024ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024ae:	4b90      	ldr	r3, [pc, #576]	; (80026f0 <HAL_RCC_OscConfig+0x50c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fdbe 	bl	8001034 <HAL_InitTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d045      	beq.n	800254e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	e1b5      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d029      	beq.n	8002522 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024ce:	4b89      	ldr	r3, [pc, #548]	; (80026f4 <HAL_RCC_OscConfig+0x510>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fdfa 	bl	80010cc <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024dc:	f7fe fdf6 	bl	80010cc <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1a1      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024ee:	4b7d      	ldr	r3, [pc, #500]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024fa:	4b7a      	ldr	r3, [pc, #488]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4977      	ldr	r1, [pc, #476]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800250c:	4b75      	ldr	r3, [pc, #468]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	4972      	ldr	r1, [pc, #456]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
 8002520:	e015      	b.n	800254e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002522:	4b74      	ldr	r3, [pc, #464]	; (80026f4 <HAL_RCC_OscConfig+0x510>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe fdd0 	bl	80010cc <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002530:	f7fe fdcc 	bl	80010cc <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e177      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002542:	4b68      	ldr	r3, [pc, #416]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d030      	beq.n	80025bc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d016      	beq.n	8002590 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002562:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <HAL_RCC_OscConfig+0x514>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002568:	f7fe fdb0 	bl	80010cc <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002570:	f7fe fdac 	bl	80010cc <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e157      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002582:	4b58      	ldr	r3, [pc, #352]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x38c>
 800258e:	e015      	b.n	80025bc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002590:	4b59      	ldr	r3, [pc, #356]	; (80026f8 <HAL_RCC_OscConfig+0x514>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7fe fd99 	bl	80010cc <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259e:	f7fe fd95 	bl	80010cc <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e140      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025b0:	4b4c      	ldr	r3, [pc, #304]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f0      	bne.n	800259e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80b5 	beq.w	8002734 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ce:	4b45      	ldr	r3, [pc, #276]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10d      	bne.n	80025f6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	4a41      	ldr	r2, [pc, #260]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 80025e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6253      	str	r3, [r2, #36]	; 0x24
 80025e6:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f2:	2301      	movs	r3, #1
 80025f4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x518>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d118      	bne.n	8002634 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002602:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <HAL_RCC_OscConfig+0x518>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a3d      	ldr	r2, [pc, #244]	; (80026fc <HAL_RCC_OscConfig+0x518>)
 8002608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260e:	f7fe fd5d 	bl	80010cc <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002616:	f7fe fd59 	bl	80010cc <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b64      	cmp	r3, #100	; 0x64
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e104      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_RCC_OscConfig+0x518>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x466>
 800263c:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002646:	6353      	str	r3, [r2, #52]	; 0x34
 8002648:	e02d      	b.n	80026a6 <HAL_RCC_OscConfig+0x4c2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x488>
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002656:	4a23      	ldr	r2, [pc, #140]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800265c:	6353      	str	r3, [r2, #52]	; 0x34
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002662:	4a20      	ldr	r2, [pc, #128]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002668:	6353      	str	r3, [r2, #52]	; 0x34
 800266a:	e01c      	b.n	80026a6 <HAL_RCC_OscConfig+0x4c2>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b05      	cmp	r3, #5
 8002672:	d10c      	bne.n	800268e <HAL_RCC_OscConfig+0x4aa>
 8002674:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	4a1a      	ldr	r2, [pc, #104]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 800267a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267e:	6353      	str	r3, [r2, #52]	; 0x34
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002684:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268a:	6353      	str	r3, [r2, #52]	; 0x34
 800268c:	e00b      	b.n	80026a6 <HAL_RCC_OscConfig+0x4c2>
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 8002694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002698:	6353      	str	r3, [r2, #52]	; 0x34
 800269a:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 800269c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269e:	4a11      	ldr	r2, [pc, #68]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 80026a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026a4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d015      	beq.n	80026da <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ae:	f7fe fd0d 	bl	80010cc <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe fd09 	bl	80010cc <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0b2      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 80026ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ee      	beq.n	80026b6 <HAL_RCC_OscConfig+0x4d2>
 80026d8:	e023      	b.n	8002722 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026da:	f7fe fcf7 	bl	80010cc <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026e0:	e019      	b.n	8002716 <HAL_RCC_OscConfig+0x532>
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	080037d8 	.word	0x080037d8
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000004 	.word	0x20000004
 80026f4:	42470020 	.word	0x42470020
 80026f8:	42470680 	.word	0x42470680
 80026fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fe fce4 	bl	80010cc <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e08d      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002716:	4b49      	ldr	r3, [pc, #292]	; (800283c <HAL_RCC_OscConfig+0x658>)
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1ee      	bne.n	8002700 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002722:	7ffb      	ldrb	r3, [r7, #31]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002728:	4b44      	ldr	r3, [pc, #272]	; (800283c <HAL_RCC_OscConfig+0x658>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	4a43      	ldr	r2, [pc, #268]	; (800283c <HAL_RCC_OscConfig+0x658>)
 800272e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002732:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	2b00      	cmp	r3, #0
 800273a:	d079      	beq.n	8002830 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d056      	beq.n	80027f0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2b02      	cmp	r3, #2
 8002748:	d13b      	bne.n	80027c2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_RCC_OscConfig+0x65c>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe fcbc 	bl	80010cc <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fcb8 	bl	80010cc <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e063      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800276a:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_RCC_OscConfig+0x658>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002776:	4b31      	ldr	r3, [pc, #196]	; (800283c <HAL_RCC_OscConfig+0x658>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	4319      	orrs	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	430b      	orrs	r3, r1
 800278e:	492b      	ldr	r1, [pc, #172]	; (800283c <HAL_RCC_OscConfig+0x658>)
 8002790:	4313      	orrs	r3, r2
 8002792:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002794:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_RCC_OscConfig+0x65c>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279a:	f7fe fc97 	bl	80010cc <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a2:	f7fe fc93 	bl	80010cc <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e03e      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_RCC_OscConfig+0x658>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x5be>
 80027c0:	e036      	b.n	8002830 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <HAL_RCC_OscConfig+0x65c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe fc80 	bl	80010cc <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d0:	f7fe fc7c 	bl	80010cc <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e027      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <HAL_RCC_OscConfig+0x658>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x5ec>
 80027ee:	e01f      	b.n	8002830 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e01a      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <HAL_RCC_OscConfig+0x658>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	429a      	cmp	r2, r3
 800280e:	d10d      	bne.n	800282c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	42470060 	.word	0x42470060

08002844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e11a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b8f      	ldr	r3, [pc, #572]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d919      	bls.n	800289a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d105      	bne.n	8002878 <HAL_RCC_ClockConfig+0x34>
 800286c:	4b8a      	ldr	r3, [pc, #552]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a89      	ldr	r2, [pc, #548]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b87      	ldr	r3, [pc, #540]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 0201 	bic.w	r2, r3, #1
 8002880:	4985      	ldr	r1, [pc, #532]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002888:	4b83      	ldr	r3, [pc, #524]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d001      	beq.n	800289a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0f9      	b.n	8002a8e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a6:	4b7d      	ldr	r3, [pc, #500]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	497a      	ldr	r1, [pc, #488]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 808e 	beq.w	80029e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ce:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d121      	bne.n	800291e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e0d7      	b.n	8002a8e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028e6:	4b6d      	ldr	r3, [pc, #436]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d115      	bne.n	800291e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0cb      	b.n	8002a8e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028fe:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0bf      	b.n	8002a8e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0b7      	b.n	8002a8e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291e:	4b5f      	ldr	r3, [pc, #380]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	495c      	ldr	r1, [pc, #368]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 800292c:	4313      	orrs	r3, r2
 800292e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002930:	f7fe fbcc 	bl	80010cc <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d112      	bne.n	8002964 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002940:	f7fe fbc4 	bl	80010cc <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e09b      	b.n	8002a8e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002956:	4b51      	ldr	r3, [pc, #324]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b08      	cmp	r3, #8
 8002960:	d1ee      	bne.n	8002940 <HAL_RCC_ClockConfig+0xfc>
 8002962:	e03e      	b.n	80029e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d112      	bne.n	8002992 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296c:	e00a      	b.n	8002984 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296e:	f7fe fbad 	bl	80010cc <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	; 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e084      	b.n	8002a8e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002984:	4b45      	ldr	r3, [pc, #276]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d1ee      	bne.n	800296e <HAL_RCC_ClockConfig+0x12a>
 8002990:	e027      	b.n	80029e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d11d      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299c:	f7fe fb96 	bl	80010cc <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e06d      	b.n	8002a8e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029b2:	4b3a      	ldr	r3, [pc, #232]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d1ee      	bne.n	800299c <HAL_RCC_ClockConfig+0x158>
 80029be:	e010      	b.n	80029e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fe fb84 	bl	80010cc <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e05b      	b.n	8002a8e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80029d6:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1ee      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d219      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d105      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x1be>
 80029f6:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0201 	bic.w	r2, r3, #1
 8002a0a:	4923      	ldr	r1, [pc, #140]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_RCC_ClockConfig+0x254>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e034      	b.n	8002a8e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4917      	ldr	r1, [pc, #92]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490f      	ldr	r1, [pc, #60]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f823 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 8002a66:	4601      	mov	r1, r0
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_RCC_ClockConfig+0x258>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x25c>)
 8002a74:	5cd3      	ldrb	r3, [r2, r3]
 8002a76:	fa21 f303 	lsr.w	r3, r1, r3
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x260>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_RCC_ClockConfig+0x264>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fad6 	bl	8001034 <HAL_InitTick>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a8c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023c00 	.word	0x40023c00
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	080037d8 	.word	0x080037d8
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	20000004 	.word	0x20000004

08002aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d007      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x26>
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d008      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x2c>
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	f040 809f 	bne.w	8002c0a <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ace:	613b      	str	r3, [r7, #16]
      break;
 8002ad0:	e0a9      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad2:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002ad4:	613b      	str	r3, [r7, #16]
      break;
 8002ad6:	e0a6      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	0c9b      	lsrs	r3, r3, #18
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	4a56      	ldr	r2, [pc, #344]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x190>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	0d9b      	lsrs	r3, r3, #22
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	3301      	adds	r3, #1
 8002af0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002af2:	4b4f      	ldr	r3, [pc, #316]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d041      	beq.n	8002b82 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	461d      	mov	r5, r3
 8002b02:	f04f 0600 	mov.w	r6, #0
 8002b06:	4629      	mov	r1, r5
 8002b08:	4632      	mov	r2, r6
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	f04f 0400 	mov.w	r4, #0
 8002b12:	0154      	lsls	r4, r2, #5
 8002b14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b18:	014b      	lsls	r3, r1, #5
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4622      	mov	r2, r4
 8002b1e:	1b49      	subs	r1, r1, r5
 8002b20:	eb62 0206 	sbc.w	r2, r2, r6
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	f04f 0400 	mov.w	r4, #0
 8002b2c:	0194      	lsls	r4, r2, #6
 8002b2e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b32:	018b      	lsls	r3, r1, #6
 8002b34:	1a5b      	subs	r3, r3, r1
 8002b36:	eb64 0402 	sbc.w	r4, r4, r2
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	00e2      	lsls	r2, r4, #3
 8002b44:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b48:	00d9      	lsls	r1, r3, #3
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4614      	mov	r4, r2
 8002b4e:	195b      	adds	r3, r3, r5
 8002b50:	eb44 0406 	adc.w	r4, r4, r6
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	0262      	lsls	r2, r4, #9
 8002b5e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b62:	0259      	lsls	r1, r3, #9
 8002b64:	460b      	mov	r3, r1
 8002b66:	4614      	mov	r4, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f04f 0400 	mov.w	r4, #0
 8002b72:	461a      	mov	r2, r3
 8002b74:	4623      	mov	r3, r4
 8002b76:	f7fd fb09 	bl	800018c <__aeabi_uldivmod>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e040      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	461d      	mov	r5, r3
 8002b86:	f04f 0600 	mov.w	r6, #0
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	4632      	mov	r2, r6
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	f04f 0400 	mov.w	r4, #0
 8002b96:	0154      	lsls	r4, r2, #5
 8002b98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b9c:	014b      	lsls	r3, r1, #5
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	1b49      	subs	r1, r1, r5
 8002ba4:	eb62 0206 	sbc.w	r2, r2, r6
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	f04f 0400 	mov.w	r4, #0
 8002bb0:	0194      	lsls	r4, r2, #6
 8002bb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bb6:	018b      	lsls	r3, r1, #6
 8002bb8:	1a5b      	subs	r3, r3, r1
 8002bba:	eb64 0402 	sbc.w	r4, r4, r2
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	00e2      	lsls	r2, r4, #3
 8002bc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bcc:	00d9      	lsls	r1, r3, #3
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4614      	mov	r4, r2
 8002bd2:	195b      	adds	r3, r3, r5
 8002bd4:	eb44 0406 	adc.w	r4, r4, r6
 8002bd8:	f04f 0100 	mov.w	r1, #0
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	02a2      	lsls	r2, r4, #10
 8002be2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002be6:	0299      	lsls	r1, r3, #10
 8002be8:	460b      	mov	r3, r1
 8002bea:	4614      	mov	r4, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	4621      	mov	r1, r4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f04f 0400 	mov.w	r4, #0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4623      	mov	r3, r4
 8002bfa:	f7fd fac7 	bl	800018c <__aeabi_uldivmod>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	460c      	mov	r4, r1
 8002c02:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	613b      	str	r3, [r7, #16]
      break;
 8002c08:	e00d      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	0b5b      	lsrs	r3, r3, #13
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	613b      	str	r3, [r7, #16]
      break;
 8002c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c26:	693b      	ldr	r3, [r7, #16]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	00f42400 	.word	0x00f42400
 8002c38:	007a1200 	.word	0x007a1200
 8002c3c:	080037cc 	.word	0x080037cc

08002c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	20000000 	.word	0x20000000

08002c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c58:	f7ff fff2 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c5c:	4601      	mov	r1, r0
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4a03      	ldr	r2, [pc, #12]	; (8002c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6a:	5cd3      	ldrb	r3, [r2, r3]
 8002c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40023800 	.word	0x40023800
 8002c78:	080037e8 	.word	0x080037e8

08002c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c80:	f7ff ffde 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c84:	4601      	mov	r1, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0adb      	lsrs	r3, r3, #11
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	080037e8 	.word	0x080037e8

08002ca4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cb0:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d12c      	bne.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cbc:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002cc8:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e016      	b.n	8002d02 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd4:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cde:	6253      	str	r3, [r2, #36]	; 0x24
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002cf4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002d08:	d105      	bne.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d10:	d101      	bne.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002d12:	2301      	movs	r3, #1
 8002d14:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 0201 	bic.w	r2, r3, #1
 8002d30:	490b      	ldr	r1, [pc, #44]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d001      	beq.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	40023c00 	.word	0x40023c00

08002d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e03f      	b.n	8002df6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe f898 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fb91 	bl	80034d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b088      	sub	sp, #32
 8002e02:	af02      	add	r7, sp, #8
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	f040 8083 	bne.w	8002f26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_UART_Transmit+0x2e>
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e07b      	b.n	8002f28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Transmit+0x40>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e074      	b.n	8002f28 <HAL_UART_Transmit+0x12a>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2221      	movs	r2, #33	; 0x21
 8002e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e54:	f7fe f93a 	bl	80010cc <HAL_GetTick>
 8002e58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	88fa      	ldrh	r2, [r7, #6]
 8002e5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	88fa      	ldrh	r2, [r7, #6]
 8002e64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002e6e:	e042      	b.n	8002ef6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e86:	d122      	bne.n	8002ece <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f9b2 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e042      	b.n	8002f28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	e017      	b.n	8002ef6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	e013      	b.n	8002ef6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f98f 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e01f      	b.n	8002f28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	60ba      	str	r2, [r7, #8]
 8002eee:	781a      	ldrb	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1b7      	bne.n	8002e70 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2200      	movs	r2, #0
 8002f08:	2140      	movs	r1, #64	; 0x40
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f976 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e006      	b.n	8002f28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e000      	b.n	8002f28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d140      	bne.n	8002fcc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_UART_Receive_IT+0x26>
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e039      	b.n	8002fce <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_UART_Receive_IT+0x38>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e032      	b.n	8002fce <HAL_UART_Receive_IT+0x9e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	88fa      	ldrh	r2, [r7, #6]
 8002f7a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2222      	movs	r2, #34	; 0x22
 8002f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0220 	orr.w	r2, r2, #32
 8002fc6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
  }
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10d      	bne.n	800302a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_UART_IRQHandler+0x52>
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f9d2 	bl	80033cc <UART_Receive_IT>
      return;
 8003028:	e0d1      	b.n	80031ce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80b0 	beq.w	8003192 <HAL_UART_IRQHandler+0x1ba>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_UART_IRQHandler+0x70>
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80a5 	beq.w	8003192 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_UART_IRQHandler+0x90>
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_UART_IRQHandler+0xb0>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003080:	f043 0202 	orr.w	r2, r3, #2
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_UART_IRQHandler+0xd0>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	f043 0204 	orr.w	r2, r3, #4
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00f      	beq.n	80030d2 <HAL_UART_IRQHandler+0xfa>
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <HAL_UART_IRQHandler+0xee>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	f043 0208 	orr.w	r2, r3, #8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d078      	beq.n	80031cc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <HAL_UART_IRQHandler+0x11c>
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f96c 	bl	80033cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_UART_IRQHandler+0x144>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d031      	beq.n	8003180 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f8b7 	bl	8003290 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d123      	bne.n	8003178 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	2b00      	cmp	r3, #0
 8003146:	d013      	beq.n	8003170 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <HAL_UART_IRQHandler+0x1fc>)
 800314e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe f8f2 	bl	800133e <HAL_DMA_Abort_IT>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d016      	beq.n	800318e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800316a:	4610      	mov	r0, r2
 800316c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316e:	e00e      	b.n	800318e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f83a 	bl	80031ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003176:	e00a      	b.n	800318e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f836 	bl	80031ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317e:	e006      	b.n	800318e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f832 	bl	80031ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800318c:	e01e      	b.n	80031cc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318e:	bf00      	nop
    return;
 8003190:	e01c      	b.n	80031cc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_UART_IRQHandler+0x1d6>
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8a3 	bl	80032f2 <UART_Transmit_IT>
    return;
 80031ac:	e00f      	b.n	80031ce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_UART_IRQHandler+0x1f6>
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8ea 	bl	800339c <UART_EndTransmit_IT>
    return;
 80031c8:	bf00      	nop
 80031ca:	e000      	b.n	80031ce <HAL_UART_IRQHandler+0x1f6>
    return;
 80031cc:	bf00      	nop
  }
}
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	080032cb 	.word	0x080032cb

080031d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320c:	e02c      	b.n	8003268 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003214:	d028      	beq.n	8003268 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <UART_WaitOnFlagUntilTimeout+0x30>
 800321c:	f7fd ff56 	bl	80010cc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	429a      	cmp	r2, r3
 800322a:	d21d      	bcs.n	8003268 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800323a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e00f      	b.n	8003288 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4013      	ands	r3, r2
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	429a      	cmp	r2, r3
 8003276:	bf0c      	ite	eq
 8003278:	2301      	moveq	r3, #1
 800327a:	2300      	movne	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	429a      	cmp	r2, r3
 8003284:	d0c3      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff ff80 	bl	80031ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b21      	cmp	r3, #33	; 0x21
 8003304:	d144      	bne.n	8003390 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330e:	d11a      	bne.n	8003346 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003324:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d105      	bne.n	800333a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	1c9a      	adds	r2, r3, #2
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	621a      	str	r2, [r3, #32]
 8003338:	e00e      	b.n	8003358 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	621a      	str	r2, [r3, #32]
 8003344:	e008      	b.n	8003358 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6211      	str	r1, [r2, #32]
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29b      	uxth	r3, r3
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4619      	mov	r1, r3
 8003366:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10f      	bne.n	800338c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800337a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800338a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff0b 	bl	80031d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b22      	cmp	r3, #34	; 0x22
 80033de:	d171      	bne.n	80034c4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e8:	d123      	bne.n	8003432 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10e      	bne.n	8003416 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	1c9a      	adds	r2, r3, #2
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	; 0x28
 8003414:	e029      	b.n	800346a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	b29b      	uxth	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28
 8003430:	e01b      	b.n	800346a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6858      	ldr	r0, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	1c59      	adds	r1, r3, #1
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6291      	str	r1, [r2, #40]	; 0x28
 800344a:	b2c2      	uxtb	r2, r0
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e00c      	b.n	800346a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	1c58      	adds	r0, r3, #1
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	6288      	str	r0, [r1, #40]	; 0x28
 8003462:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29b      	uxth	r3, r3
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4619      	mov	r1, r3
 8003478:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800347a:	2b00      	cmp	r3, #0
 800347c:	d120      	bne.n	80034c0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0220 	bic.w	r2, r2, #32
 800348c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800349c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd fa6e 	bl	8000998 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	e002      	b.n	80034c6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4313      	orrs	r3, r2
 8003504:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003510:	f023 030c 	bic.w	r3, r3, #12
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	430b      	orrs	r3, r1
 800351c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a55      	ldr	r2, [pc, #340]	; (8003690 <UART_SetConfig+0x1c0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d103      	bne.n	8003546 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800353e:	f7ff fb9d 	bl	8002c7c <HAL_RCC_GetPCLK2Freq>
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	e002      	b.n	800354c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003546:	f7ff fb85 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 800354a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003554:	d14c      	bne.n	80035f0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009a      	lsls	r2, r3, #2
 8003560:	441a      	add	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	4a49      	ldr	r2, [pc, #292]	; (8003694 <UART_SetConfig+0x1c4>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	0119      	lsls	r1, r3, #4
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009a      	lsls	r2, r3, #2
 8003580:	441a      	add	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fbb2 f2f3 	udiv	r2, r2, r3
 800358c:	4b41      	ldr	r3, [pc, #260]	; (8003694 <UART_SetConfig+0x1c4>)
 800358e:	fba3 0302 	umull	r0, r3, r3, r2
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	2064      	movs	r0, #100	; 0x64
 8003596:	fb00 f303 	mul.w	r3, r0, r3
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	3332      	adds	r3, #50	; 0x32
 80035a0:	4a3c      	ldr	r2, [pc, #240]	; (8003694 <UART_SetConfig+0x1c4>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035ae:	4419      	add	r1, r3
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009a      	lsls	r2, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c6:	4b33      	ldr	r3, [pc, #204]	; (8003694 <UART_SetConfig+0x1c4>)
 80035c8:	fba3 0302 	umull	r0, r3, r3, r2
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	2064      	movs	r0, #100	; 0x64
 80035d0:	fb00 f303 	mul.w	r3, r0, r3
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	3332      	adds	r3, #50	; 0x32
 80035da:	4a2e      	ldr	r2, [pc, #184]	; (8003694 <UART_SetConfig+0x1c4>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	095b      	lsrs	r3, r3, #5
 80035e2:	f003 0207 	and.w	r2, r3, #7
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	440a      	add	r2, r1
 80035ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035ee:	e04a      	b.n	8003686 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	009a      	lsls	r2, r3, #2
 80035fa:	441a      	add	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	4a23      	ldr	r2, [pc, #140]	; (8003694 <UART_SetConfig+0x1c4>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	0119      	lsls	r1, r3, #4
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009a      	lsls	r2, r3, #2
 800361a:	441a      	add	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	fbb2 f2f3 	udiv	r2, r2, r3
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <UART_SetConfig+0x1c4>)
 8003628:	fba3 0302 	umull	r0, r3, r3, r2
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	2064      	movs	r0, #100	; 0x64
 8003630:	fb00 f303 	mul.w	r3, r0, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	3332      	adds	r3, #50	; 0x32
 800363a:	4a16      	ldr	r2, [pc, #88]	; (8003694 <UART_SetConfig+0x1c4>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003646:	4419      	add	r1, r3
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009a      	lsls	r2, r3, #2
 8003652:	441a      	add	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	fbb2 f2f3 	udiv	r2, r2, r3
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <UART_SetConfig+0x1c4>)
 8003660:	fba3 0302 	umull	r0, r3, r3, r2
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	2064      	movs	r0, #100	; 0x64
 8003668:	fb00 f303 	mul.w	r3, r0, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	3332      	adds	r3, #50	; 0x32
 8003672:	4a08      	ldr	r2, [pc, #32]	; (8003694 <UART_SetConfig+0x1c4>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	f003 020f 	and.w	r2, r3, #15
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	440a      	add	r2, r1
 8003684:	609a      	str	r2, [r3, #8]
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40013800 	.word	0x40013800
 8003694:	51eb851f 	.word	0x51eb851f

08003698 <__libc_init_array>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	2500      	movs	r5, #0
 800369c:	4e0c      	ldr	r6, [pc, #48]	; (80036d0 <__libc_init_array+0x38>)
 800369e:	4c0d      	ldr	r4, [pc, #52]	; (80036d4 <__libc_init_array+0x3c>)
 80036a0:	1ba4      	subs	r4, r4, r6
 80036a2:	10a4      	asrs	r4, r4, #2
 80036a4:	42a5      	cmp	r5, r4
 80036a6:	d109      	bne.n	80036bc <__libc_init_array+0x24>
 80036a8:	f000 f82a 	bl	8003700 <_init>
 80036ac:	2500      	movs	r5, #0
 80036ae:	4e0a      	ldr	r6, [pc, #40]	; (80036d8 <__libc_init_array+0x40>)
 80036b0:	4c0a      	ldr	r4, [pc, #40]	; (80036dc <__libc_init_array+0x44>)
 80036b2:	1ba4      	subs	r4, r4, r6
 80036b4:	10a4      	asrs	r4, r4, #2
 80036b6:	42a5      	cmp	r5, r4
 80036b8:	d105      	bne.n	80036c6 <__libc_init_array+0x2e>
 80036ba:	bd70      	pop	{r4, r5, r6, pc}
 80036bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036c0:	4798      	blx	r3
 80036c2:	3501      	adds	r5, #1
 80036c4:	e7ee      	b.n	80036a4 <__libc_init_array+0xc>
 80036c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ca:	4798      	blx	r3
 80036cc:	3501      	adds	r5, #1
 80036ce:	e7f2      	b.n	80036b6 <__libc_init_array+0x1e>
 80036d0:	080037f8 	.word	0x080037f8
 80036d4:	080037f8 	.word	0x080037f8
 80036d8:	080037f8 	.word	0x080037f8
 80036dc:	080037fc 	.word	0x080037fc

080036e0 <memset>:
 80036e0:	4603      	mov	r3, r0
 80036e2:	4402      	add	r2, r0
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d100      	bne.n	80036ea <memset+0xa>
 80036e8:	4770      	bx	lr
 80036ea:	f803 1b01 	strb.w	r1, [r3], #1
 80036ee:	e7f9      	b.n	80036e4 <memset+0x4>

080036f0 <strcpy>:
 80036f0:	4603      	mov	r3, r0
 80036f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036f6:	f803 2b01 	strb.w	r2, [r3], #1
 80036fa:	2a00      	cmp	r2, #0
 80036fc:	d1f9      	bne.n	80036f2 <strcpy+0x2>
 80036fe:	4770      	bx	lr

08003700 <_init>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	bf00      	nop
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr

0800370c <_fini>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr
